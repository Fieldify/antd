{"version":3,"sources":["../../src/lib/TypeForm.js","../../src/lib/TypeRender.js","../../src/lib/TypeInfo.js","../../src/lib/TypeBuilder.js","../../src/Types/String.js","../../src/Types/Name.js","../../src/Types/Email.js","../../src/Types/Number.js","../../src/Types/Checkbox.js","../../src/Types/DateTimePicker.js","../../src/Types/DatePicker.js","../../src/Types/DatePickerRange.js","../../src/Types/TimePicker.js","../../src/Types/TimePickerRange.js","../../src/Types/Select.js","../../src/Types/Radio.js","../../src/Types/Object.js","../../src/Types/Array.js","../../src/Types/FieldName.js","../../src/Types/KV.js","../../src/Types/Hash.js","../../src/Types.js","../../src/Schema/Schema.js","../../src/lib/TypeDataset.js","../../src/Schema/Form.js","../../src/Schema/BuilderModal.js","../../src/Schema/Builder.js","../../src/Schema/Render.js","../../src/index.js","../../../core/lib/utils.js","../../../core/lib/fusion.js","../../../core/index.js","../../../core/lib/assign.js","../../../core/lib/iterator.js","../../../core/lib/compile.js","../../../core/lib/types/index.js","../../../core/lib/schema.js","../../../core/lib/set.js","../../../core/lib/types/String.js","../../../core/lib/types/Number.js","../../../core/lib/types/Select.js","../../../core/lib/types/Radio.js","../../../core/lib/types/Name.js","../../../core/lib/types/Email.js","../../../core/lib/types/Checkbox.js","../../../core/lib/types/Hash.js","../../../core/lib/types/URL.js","../../../core/lib/types/DateTimePicker.js","../../../core/lib/types/DatePicker.js","../../../core/lib/types/DatePickerRange.js","../../../core/lib/types/TimePicker.js","../../../core/lib/types/TimePickerRange.js","../../../core/lib/types/Slug.js","../../../core/lib/types/Color.js","../../../core/lib/types/FieldName.js","../../../core/lib/types/KV.js","../../../core/lib/input.js","../../../core/lib/types/type.js","App.js","index.js"],"names":["FieldifyTypeForm","Component","constructor","props","super","this","cycle","componentDidUpdate","state","schema","value","verify","feedback","status","options","$options","timedChange","cb","speed","setTimeout","_changeTimerQueue","changeValue","end","ret","help","error","message","render","children","isInjected","Form","label","required","validateStatus","hasFeedback","style","marginBottom","wrapperCol","sm","FieldifyTypeRender","RecycledComponent","injected","subRender","width","SignderivaTypeInfo","path","prevProps","prevState","SignderivaTypeBuilder","pNew","pOld","changed","setup","prev","default","a","configure","changeIt","key","change","Object","code","types","description","class","Info","React","Tag","color","Icon","Builder","minSize","maxSize","Space","InputNumber","min","onChange","Input","placeholder","target","Render","StringForm","TString","from","setField","Row","gutter","Col","className","span","final","noFormItem","MailOutlined","subAddressing","Checkbox","checked","FieldTimeOutlined","DatePicker","showTime","defaultValue","date","dateString","RangePicker","res","to","TimePicker","updateItems","items","Select","ptr","_radioVertical","display","height","lineHeight","horizontal","Radio","ObjectClass","fieldifyType","ArrayClass","configuration","$doc","$required","$type","max","String","input","user","msg","computeDataSource","tree","ds","actions","onClick","DeleteIcon","EditIcon","handleModalChange","modalCurrent","openModal","data","modalError","modalInitial","modal","removeKey","editedButton","mc","type","columns","title","dataIndex","PlusIcon","align","layout","labelCol","Modal","centered","closable","visible","onOk","bind","onCancel","Alert","size","Table","dataSource","pagination","total","pageSize","hideOnSinglePage","showHeader","Array","KV","FieldifySchema","name","resolver","Types","compile","TypeDataset","first","FieldifyInput","update","root","getValue","clickAddArray","line","_value","inputValue","reactive","clickRemoveArrayItem","setValue","up","follower","schematized","utils","index","item","source","schematizedSrc","sourceSchematized","inputPtr","lineKey","inputPtr2","child","toPush","form","Button","TypeForm","onError","noStyle","Card","extra","verticalAlign","bordered","references","formRef","FieldifySchemaForm","generator","allTypes","allTypesNoArray","baseSchema","$position","doc","position","$default","acceptedTypes","FieldifySchemaBuilderModal","setState","edition","original","val","read","write","content","driveSchema","force","Type","currentSchema","formChanged","result","handleOK","nvalue","initialPath","split","npath","no","p","oldPath","newPath","ref","modalUser","schemaDataSource","updateDataSource","handlingAdd","fireOnChange","ex","itemChanged","arg","getLineup","notification","modalContent","itemRemove","handler","handlingEdit","self","wire","current","composite","Tooltip","ObjectIcon","TypeInfo","ArrayIcon","fieldify2antDataTable","Popconfirm","onConfirm","okText","cancelText","sds","expandable","defaultExpandAllRows","Schema","Version","pack","leafRegex","internal","$maxArray","module","exports","leaf","leafPrivate","isThereSubObject","hasOwnProperty","test","isThereObjectParams","eachObject","objs","executor","aObjects","push","process","nextTick","next","o","shift","undefined","eachItem","list","isArray","sync","finish","exec","getNO","nestedObject","nestedOptions","substr","orderedRead","dup","ordered","values","sort","b","length","_specialClone","dst","src","require","fusion","assign","iterator","version","fieldifyAssignator","lkey","save","keys","fieldifyIteratorBuffer","level","onAssign","onEnter","onLeave","onEnd","branch","oend","object","arrayResult","next2","arraySchema","$_nested","useless","subResult","access","$_access","fib","fieldifyHandler","orgSchema","_access","_accessStack","tmpAccess","ptrS","noIn","subLine","drive","$_array","pop","Number","Name","Email","Hash","URL","DateTimePicker","DatePickerRange","TimePickerRange","Slug","Color","FieldName","set","get","load","policy","localAssigner","$_key","typeClass","console","$_type","$_wire","$_hidden","rkey","correctedOptions","sanatizeOptions","nonTypeSchematized","typeSchematized","schematizer","patch","extract","$_schematized","handlerSchematized","export","pv","opts","$write","fields","filter","output","_filterLine","encode","flow","decode","direction","lineup","beforeLast","bLast","last","setLineup","obj","injection","renameLineup","oldLineup","newLineup","saved","newKey","removeLineup","$read","valid","sets","signderivaType","strictRegex","noUnicodeRegex","exported","strict","match","unicode","$help","isNaN","parseInt","both","integer","float","regex","toLowerCase","_sha1","_sha256","_sha512","mode","sha1Verifier","sha256Verifier","sha512Verifier","sha1","sha256","sha512","maxLength","minLength","verifier","verifying","reset","node","create","schemaCur","inputCur","field","inArray","remove","splice","FieldifySchemaBuilder","FieldifySchemaRender","TabPane","Tabs","App","inputRender","json","JSON","stringify","builder","builderChanged","padding","fVersion","faVersion","xxl","defaultActiveKey","tab","Item","Group","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.484d0653.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n  Col,\n  Row,\n  Form\n} from \"antd\";\n\nexport default class FieldifyTypeForm extends Component {\n  constructor(props) {\n    super(props)\n    this.state = this.cycle(props)\n  }\n\n\n  componentDidUpdate(props, state) {\n    if (this.props.schema !== props.schema) {\n      const cycle = this.cycle(this.props);\n      this.setState(cycle)\n    }\n  }\n\n  cycle(props) {\n    this.schema = props.schema;\n    \n    const state = {\n      value: props.value,\n      verify: props.verify,\n      feedback: false,\n      status: null,\n      options: {}\n    }\n\n    this.isInjected = props.isInjected;\n\n    this.onChange = props.onChange ? props.onChange : () => { };\n    this.onError = props.onError ? props.onError : () => { };\n\n    if (!this.schema) {\n      this.schema = {}\n      return (state)\n    }\n\n    state.help = this.schema.$help;\n    state.options = this.schema.$options || {};\n    this.handler = this.schema.$_type;\n\n\n    // if (props.verify === true) {\n    //   this.verify(props.value, (ret) => {\n    //     this.state = { ...this.state, ...ret }\n    //   })\n    // }\n\n    return (state)\n  }\n\n  timedChange(cb, speed) {\n    if (this._changeTimer) {\n      this._changeTimerQueue++;\n      this._changeTimerCb = cb;\n      return;\n    }\n\n    cb = cb || this._changeTimerCb;\n    if (!cb) return;\n\n    delete this._changeTimerCb;\n    this._changeTimerQueue = 0;\n    this._changeTimer = setTimeout(() => {\n      cb(() => {\n        delete this._changeTimer;\n\n        // update in queue ?\n        if (this._changeTimerQueue > 0) {\n          this.timedChange(cb, speed);\n        }\n      })\n    }, speed)\n  }\n\n  changeValue(value, speed) {\n    speed = speed || 100;\n    this.setState({\n      value: value\n    })\n\n    this._lastValue = value;\n\n    this.timedChange((end) => {\n      this.verify(this._lastValue, (ret) => {\n        this.setState(ret);\n        if (ret.status !== \"success\") {\n          end();\n          return;\n        }\n        // console.log(\"TypeForm\", this.schema, this._lastValue);\n        this.onChange(this.schema, this._lastValue);\n        end();\n      })\n    }, speed)\n  }\n\n  verify(value, cb) {\n    if(!this.handler) {\n      return (cb({\n        status: \"error\",\n        feedback: true,\n        help: \"No Handler on verifier\"\n      }))\n    }\n    \n    this.handler.verify(value, (error, message) => {\n      if (error === false) {\n        this.onError(false);\n        return (cb({\n          status: \"success\",\n          feedback: true,\n          help: null\n        }));\n      }\n\n      \n      this.onError(true, message);\n      return (cb({\n        status: \"error\",\n        feedback: true,\n        help: message\n      }))\n    })\n  }\n\n\n  render(children) {\n    // return(children)\n\n    if (this.isInjected === true) return (\n      <Form.Item\n        label={this.schema.$doc}\n        required={this.schema.$required}\n        validateStatus={this.state.status}\n        hasFeedback={this.state.feedback}\n        help={this.state.help}\n        style={{ marginBottom: \"0px\" }}\n        wrapperCol={{ sm: 24 }}\n      >\n        {children}\n      </Form.Item>\n    )\n\n    return (\n      <Form.Item\n        label={this.schema.$doc}\n        required={this.schema.$required}\n        validateStatus={this.state.status}\n        hasFeedback={this.state.feedback}\n        help={this.state.help}\n        style={{ marginBottom: \"8px\" }}\n        wrapperCol={{ sm: 24 }}\n      >\n        {children}\n      </Form.Item>\n    )\n  }\n}\n\n","import React, { Component } from 'react';\nimport RecycledComponent from 'react-recycling';\n\nimport {\n  Col,\n  Row,\n  Form,\n  Input\n} from \"antd\";\n\nexport default class FieldifyTypeRender extends RecycledComponent {\n\n  cycle(props) {\n    const state = {\n      schema: props.schema,\n      value: props.value,\n      injected: props.injected\n    }\n\n    return (state)\n  }\n\n  subRender(children) {\n\n    if(this.state.injected === true) {\n      return (\n        <Form.Item\n          label={this.state.schema.$doc}\n          hasFeedback={true}\n          validateStatus=\"success\"\n          style={{ marginBottom: \"0px\" }}\n          wrapperCol={{ sm: 24 }}\n        >\n          {children}\n        </Form.Item>\n      )\n    }\n    return (\n      <Form.Item\n        label={this.state.schema.$doc}\n        hasFeedback={true}\n        validateStatus=\"success\"\n      >\n        {children}\n      </Form.Item>\n    )\n  }\n\n  render() {\n    return (this.subRender(\n      <div style={{ width: \"100%\" }}>\n        {this.state.value}\n      </div>\n    ));\n  }\n}\n\n","import { Component } from 'react';\n\nexport default class SignderivaTypeInfo extends Component {\n  constructor(props) {\n    super(props)\n    this.props = props;\n    if (props.match) this.path = props.match.path;\n    this.state = {}\n  }\n\n\n  componentDidUpdate(prevProps, prevState) {\n    const pNew = this.props.schema || {};\n    const pOld = prevProps.schema || {};\n    // console.log(\"SignderivaTypeInfo.update\", pOld, pNew)\n  }\n\n}\n\n","import { Component } from 'react';\n\nexport default class SignderivaTypeBuilder extends Component {\n  constructor(props) {\n    super(props);\n    this.props = props;\n    this.onChange = props.onChange ? props.onChange : () => { };\n\n    if (props.match) this.path = props.match.path;\n\n    this.state = { ...props.options };\n\n    this.default = {};\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const pNew = this.props.options || {};\n    const pOld = prevProps.options || {};\n    \n    var changed = 0;\n    for (var key in this.default) {\n      const o = pOld[key];\n      const n = pNew[key];\n      if (o !== n)\n        changed++;\n    }\n\n    // console.log(\"TypeBuilder.update\", changed, pOld, pNew)\n    if (changed > 0) {\n      this.setState(pNew);\n      this.onChange({...pNew});\n    }\n    \n  }\n\n  setup(prev) {\n    // console.log(\"setup\")\n    const state = { ...prev };\n\n    // clean non valid field\n    for (var a in state) {\n      const p = this.default[a];\n      if (!p) delete state[a]\n    }\n\n    // setup default\n    for (var a in this.default) {\n      if (!(a in state))\n        state[a] = this.default[a];\n    }\n    return (state);\n  }\n\n  configure() {\n    this.state = this.setup(this.state);\n    this.onChange({ ...this.state });\n  }\n\n  changeIt(key, value) {\n    const change = Object.assign({}, this.state);\n    change[key] = value;\n\n    // console.log(\"TypeBuilder\", change)\n    this.setState(change);\n    this.onChange({...change});\n  }\n\n}\n","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { FieldStringOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeRender from '../lib/TypeRender';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass StringForm extends TypeForm {\n  render() {\n    return (super.render(\n      <Input \n      value={this.state.value} \n      placeholder={this.state.options.placeholder} \n      onChange={({ target }) => this.changeValue(target.value)} \n      style={{width: \"100%\"}}\n      />\n    ));\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass StringRender extends TypeRender {\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass StringInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#fadb14\" style={{ color: \"#555555\" }}><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass StringBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"String min/max size\">\n          <Space>\n            <InputNumber min={0} value={this.state.minSize} onChange={(value) => this.changeIt(\"minSize\", value)} />\n\n            <InputNumber min={0} value={this.state.maxSize} onChange={(value) => this.changeIt(\"maxSize\", value)} />\n          </Space>\n        </Form.Item>\n\n      </div>\n    )\n  }\n}\n\n/* <div class=\"ant-form-item-control-input\">\n  <div class=\"ant-form-item-control-input-content\">\n    <input type=\"text\" class=\"ant-input\" value=\"vdvfsdvfdsvfds\" style=\"width: 100%;\">\n      </div><span class=\"ant-form-item-children-icon\">\n        <span role=\"img\" aria-label=\"check-circle\" class=\"anticon anticon-check-circle\">\n          <svg viewBox=\"64 64 896 896\" focusable=\"false\" class=\"\" data-icon=\"check-circle\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\">\n            <path d=\"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm193.5 301.7l-210.6 292a31.8 31.8 0 01-51.7 0L318.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.2 0 19.9 4.9 25.9 13.3l71.2 98.8 157.2-218c6-8.3 15.6-13.3 25.9-13.3H699c6.5 0 10.3 7.4 6.5 12.7z\">\n              </path>\n              </svg>\n              </span>\n              </span>\n              </div> */\n\n\n\nexport default {\n  code: types.String.code,\n  description: types.String.description,\n  class: types.String.class,\n\n  Info: StringInfo,\n  Builder: StringBuilder,\n  Form: StringForm,\n  Render: StringRender,\n}\n\n\n","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { UserSwitchOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeRender from '../lib/TypeRender';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\nimport TString from './String';\n\nconst StringForm = TString.Form\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NameForm extends TypeForm {\n  constructor(props) {\n    super(props)\n  }\n\n  cycle(props) {\n    const ret = super.cycle(props)\n    if (!ret.value) ret.value = {}\n    \n    this.result = {...ret.value}\n    return (ret)\n  }\n\n  error(from, error, message) {\n    // this.setState({\n    //   help: \"Please fill the form\"\n    // })\n  }\n\n  setField(key, schema, value) {\n    this.result[key] = value;\n    this.onChange(this.schema, this.result);\n  }\n\n  render() {\n\n    return (super.render(\n      <Row gutter={16}>\n        <Col className=\"gutter-row\" span={12}>\n          <StringForm\n            schema={this.schema.first}\n            verify={this.state.verify}\n            value={this.state.value.first}\n            onChange={(schema, value) => this.setField(\"first\", schema, value)}\n            // onError={(error, message) => this.error(\"first\", error, message)}\n            isInjected={true}\n          />\n        </Col>\n        <Col className=\"gutter-row\" span={12}>\n          <StringForm\n            schema={this.schema.last}\n            verify={this.state.verify}\n            value={this.state.value.last}\n            onChange={(schema, value) => this.setField(\"last\", schema, value)}\n            // onError={(error, message) => this.error(\"last\", error, message)}\n            isInjected={true}\n          />\n        </Col>\n      </Row>\n    ))\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NameInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#36cfc9\" style={{ color: \"#555555\" }}><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NameRender extends TypeRender {\n  static getDerivedStateFromProps(props, state) {\n    if(state.value && typeof state.value === \"object\") {\n      var final = \"\"\n\n      if(state.value.first) final += state.value.first\n      if(state.value.last) final += \" \"+state.value.last\n\n      state.value = final.trim()\n    }\n    return(state)\n  }\n}\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NameBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"Name min/max size\">\n          <Space>\n            <InputNumber min={0} value={this.state.minSize} onChange={(value) => this.changeIt(\"minSize\", value)} />\n\n            <InputNumber min={0} value={this.state.maxSize} onChange={(value) => this.changeIt(\"maxSize\", value)} />\n          </Space>\n        </Form.Item>\n\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.Name.code,\n  description: types.Name.description,\n  class: types.Name.class,\n\n  Info: NameInfo,\n  Builder: NameBuilder,\n  Form: NameForm,\n  Render: NameRender,\n\n  noFormItem: true\n}\n\n\n","import { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  Checkbox,\n  Form,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { MailOutlined } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeRender from '../lib/TypeRender';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass EmailForm extends TypeForm {\n  render() {\n    return (super.render(\n      <Input value={this.state.value} placeholder={this.state.options.placeholder} onChange={({ target }) => this.changeValue(target.value)} />\n    ));\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass EmailInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#1890ff\"><MailOutlined /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass EmailRender extends TypeRender {\n}\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Complement builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass EmailBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      subAddressing: true\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"Sub-addressing\">\n          <Checkbox checked={this.state.subAddressing} onChange={({ target }) => this.changeIt(\"subAddressing\", target.checked)}>Allowed</Checkbox>\n        </Form.Item>\n      </div>\n    )\n  }\n}\n\n\nexport default {\n  code: types.Email.code,\n  description: types.Email.description,\n  class: types.Email.class,\n\n  Info: EmailInfo,\n  Builder: EmailBuilder,\n  Form: EmailForm,\n  Render: EmailRender\n}","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { NumberOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeRender from '../lib/TypeRender';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NumberForm extends TypeForm {\n  render() {\n    return (super.render(\n      <InputNumber \n      value={this.state.value} \n      placeholder={this.state.options.placeholder} \n      onChange={(value) => this.changeValue(value)} \n      style={{width: \"100%\"}}\n      />\n    ));\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NumberInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#ff7a45\"><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NumberRender extends TypeRender {\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NumberBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.Number.code,\n  description: types.Number.description,\n  class: types.Number.class,\n\n  Info: NumberInfo,\n  Builder: NumberBuilder,\n  Form: NumberForm,\n  Render: NumberRender\n}\n\n\n","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Col,\n  Row,\n  Checkbox\n} from \"antd\";\n\nimport { CheckSquareOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\nimport TypeRender from '../lib/TypeRender';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass CheckboxForm extends TypeForm {\n  render() {\n    return (super.render(\n      <Checkbox\n        checked={this.state.value}\n        onChange={({ target }) => this.changeValue(target.checked)}\n        style={{ width: \"100%\" }}\n      >\n        {this.state.options.placeholder}\n      </Checkbox>\n    ))\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass CheckboxInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#85144b\" style={{ color: \"white\" }}><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass CheckboxRender extends TypeRender {\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass CheckboxBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n    this.configure()\n  }\n\n}\n\nexport default {\n  code: types.Checkbox.code,\n  description: types.Checkbox.description,\n  class: types.Checkbox.class,\n\n  Info: CheckboxInfo,\n  Builder: CheckboxBuilder,\n  Form: CheckboxForm,\n  Render: CheckboxRender,\n}\n\n\n","import { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  Checkbox,\n  Form,\n  Tag,\n  Input,\n  Col,\n  Row,\n  DatePicker\n} from \"antd\";\n\nimport { FieldTimeOutlined } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeRender from '../lib/TypeRender';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass DateTimePickerForm extends TypeForm {\n  render() {\n    return (super.render(\n      <DatePicker showTime defaultValue={this.state.value} onChange={(date) => {\n        if(date) this.changeValue(date.format())\n        else this.changeValue(null)\n      }}\n      />\n    ));\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass DateTimePickerInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#fa541c\"><FieldTimeOutlined /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass DateTimePickerRender extends TypeRender {\n}\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Complement builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass DateTimePickerBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n    this.configure()\n  }\n}\n\n\nexport default {\n  code: types.DateTimePicker.code,\n  description: types.DateTimePicker.description,\n  class: types.DateTimePicker.class,\n\n  Info: DateTimePickerInfo,\n  Builder: DateTimePickerBuilder,\n  Form: DateTimePickerForm,\n  Render: DateTimePickerRender\n}","import { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  Checkbox,\n  Form,\n  Tag,\n  Input,\n  Col,\n  Row,\n  DatePicker\n} from \"antd\";\n\nimport { FieldTimeOutlined } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeRender from '../lib/TypeRender';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass DatePickerForm extends TypeForm {\n  render() {\n    return (super.render(\n      <DatePicker defaultValue={this.state.value} onChange={(date, dateString) => this.changeValue(dateString)} />\n    ));\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass DatePickerInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#ad2102\"><FieldTimeOutlined /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass DatePickerRender extends TypeRender {\n}\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Complement builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass DatePickerBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n    this.configure()\n  }\n}\n\n\nexport default {\n  code: types.DatePicker.code,\n  description: types.DatePicker.description,\n  class: types.DatePicker.class,\n\n  Info: DatePickerInfo,\n  Builder: DatePickerBuilder,\n  Form: DatePickerForm,\n  Render: DatePickerRender\n}","import { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  Checkbox,\n  Form,\n  Tag,\n  Input,\n  Col,\n  Row,\n  DatePicker\n} from \"antd\";\n\nimport { FieldTimeOutlined } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeRender from '../lib/TypeRender';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\nconst { RangePicker } = DatePicker;\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass DatePickerRangeForm extends TypeForm {\n  render() {\n    return (super.render(\n      <RangePicker onChange={(date, dateString) => {\n        if(date) {\n          const res = {\n            from: dateString[0],\n            to: dateString[1],\n          }\n          this.changeValue(res);\n        }\n        else {\n          const res = {\n            from: null,\n            to: null,\n          }\n          this.changeValue(res);\n        }\n      }} />\n    ));\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass DatePickerRangeInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#ad2102\"><FieldTimeOutlined /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass DatePickerRangeRender extends TypeRender {\n  render() {\n    return (this.subRender(\n      <div style={{ width: \"100%\" }}>\n        {typeof this.state.value === \"object\" && this.state.value.from && this.state.value.to ? \n          `${this.state.value.from} - ${this.state.value.to}` : `-`}\n      </div>\n    ));\n  }\n}\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Complement builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass DatePickerRangeBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n    this.configure()\n  }\n}\n\n\nexport default {\n  code: types.DatePickerRange.code,\n  description: types.DatePickerRange.description,\n  class: types.DatePickerRange.class,\n\n  Info: DatePickerRangeInfo,\n  Builder: DatePickerRangeBuilder,\n  Form: DatePickerRangeForm,\n  Render: DatePickerRangeRender\n}","import { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  Checkbox,\n  Form,\n  Tag,\n  Input,\n  Col,\n  Row,\n  TimePicker\n} from \"antd\";\n\nimport { FieldTimeOutlined } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeRender from '../lib/TypeRender';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass TimePickerForm extends TypeForm {\n  render() {\n    return (super.render(\n      <TimePicker defaultValue={this.state.value} onChange={(date, dateString) => this.changeValue(dateString)} />\n    ));\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass TimePickerInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#ad2102\"><FieldTimeOutlined /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass TimePickerRender extends TypeRender {\n}\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Complement builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass TimePickerBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n    this.configure()\n  }\n}\n\n\nexport default {\n  code: types.TimePicker.code,\n  description: types.TimePicker.description,\n  class: types.TimePicker.class,\n\n  Info: TimePickerInfo,\n  Builder: TimePickerBuilder,\n  Form: TimePickerForm,\n  Render: TimePickerRender\n}","import { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  Checkbox,\n  Form,\n  Tag,\n  Input,\n  Col,\n  Row,\n  TimePicker\n} from \"antd\";\n\nimport { FieldTimeOutlined } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeRender from '../lib/TypeRender';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\nconst { RangePicker } = TimePicker;\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass TimePickerRangeForm extends TypeForm {\n  render() {\n    return (super.render(\n      <RangePicker onChange={(date, dateString) => {\n        if(date) {\n          const res = {\n            from: dateString[0],\n            to: dateString[1],\n          }\n          this.changeValue(res);\n        }\n        else {\n          const res = {\n            from: null,\n            to: null,\n          }\n          this.changeValue(res);\n        }\n      }} />\n    ));\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass TimePickerRangeInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#ad2102\"><FieldTimeOutlined /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass TimePickerRangeRender extends TypeRender {\n  render() {\n    return (this.subRender(\n      <div style={{ width: \"100%\" }}>\n        {typeof this.state.value === \"object\" ? \n          `${this.state.value.from} - ${this.state.value.to}` : `-`}\n      </div>\n    ));\n  }\n}\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Complement builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass TimePickerRangeBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n    this.configure()\n  }\n}\n\n\nexport default {\n  code: types.TimePickerRange.code,\n  description: types.TimePickerRange.description,\n  class: types.TimePickerRange.class,\n\n  Info: TimePickerRangeInfo,\n  Builder: TimePickerRangeBuilder,\n  Form: TimePickerRangeForm,\n  Render: TimePickerRangeRender\n}","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Select,\n  Col,\n  Row\n} from \"antd\";\n\nimport { SelectOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeRender from '../lib/TypeRender';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass SelectForm extends TypeForm {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      value: props.value,\n      options: {}\n    }\n\n    if (props.schema.$options) this.state.options = props.schema.$options\n\n    if(!this.state.value && this.state.options.default) {\n      this.state.value = this.state.options.default\n      // inform the change\n      this.onChange(this.schema, this.state.value);\n    }\n\n    this.state.items = this.updateItems()\n  }\n\n  updateItems() {\n    if (!this.state.options.items) return ([])\n\n    const options = []\n    for (var key in this.state.options.items) {\n      const value = this.state.options.items[key];\n      options.push(<Select.Option value={key} key={key}>{value}</Select.Option>)\n    }\n\n    return (options)\n  }\n\n  render() {\n    return (super.render(\n      <Select value={this.state.value} onChange={(value)  => this.changeValue(value)}>\n        {this.state.items}\n      </Select>\n    ))\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass SelectInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#52c41a\" style={{ color: \"white\" }}><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass SelectRender extends TypeRender {\n  static getDerivedStateFromProps(props, state) {\n    if(typeof state.value === \"string\") {\n\n      if(props.schema.$options && props.schema.$options.items) {\n        const ptr = props.schema.$options.items\n        if(ptr[state.value]) state.value = ptr[state.value]\n      }\n    }\n    return(state)\n  }\n\n}\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass SelectBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"Select min/max size\">\n          <Space>\n            <InputNumber min={0} value={this.state.minSize} onChange={(value) => this.changeIt(\"minSize\", value)} />\n\n            <InputNumber min={0} value={this.state.maxSize} onChange={(value) => this.changeIt(\"maxSize\", value)} />\n          </Space>\n        </Form.Item>\n\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.Select.code,\n  description: types.Select.description,\n  class: types.Select.class,\n\n  Info: SelectInfo,\n  Builder: SelectBuilder,\n  Form: SelectForm,\n  Render: SelectRender\n}\n\n\n","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Radio,\n  Col,\n  Row\n} from \"antd\";\n\nimport { FieldBinaryOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeRender from '../lib/TypeRender';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\nconst _radioVertical = {\n  display: 'block',\n  height: '30px',\n  lineHeight: '30px',\n};\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass RadioForm extends TypeForm {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      value: props.value,\n      options: {}\n    }\n\n    if (props.schema.$options) this.state.options = props.schema.$options\n\n    if (!this.state.value && this.state.options.default) {\n      this.state.value = this.state.options.default\n      // inform the change\n      this.onChange(this.schema, this.state.value);\n    }\n\n    this.state.items = this.updateItems()\n  }\n\n  componentDidUpdate(props, state) {\n    // if(state.options.default !== this.state.options.default) changed = true;\n    // if(state.items !== this.state.items) changed = true;\n    // if(state.options.horizontal !== this.state.options.horizontal) changed = true;\n\n    if (props.schema !== this.props.schema) {\n      this.setState({\n        options: props.schema.$options,\n        items: this.updateItems()\n      });\n      this.onChange(this.schema, this.state.value);\n    }\n\n    // if(changed === true) this.setState({items: this.updateItems()})\n  }\n\n  updateItems() {\n    var style = _radioVertical;\n    if(this.props.schema.$options.horizontal === true) style = null;\n    if (!this.props.schema.$options.items) return ([])\n\n    const options = []\n    for (var key in this.props.schema.$options.items) {\n      const value = this.props.schema.$options.items[key];\n      options.push(<Radio style={style} value={key} key={key}>{value}</Radio>)\n    }\n\n    return (options)\n  }\n\n  render() {\n    return (super.render(\n      <Radio.Group value={this.state.value} onChange={({ target }) => this.changeValue(target.value) }>\n        {this.state.items}\n      </Radio.Group>\n    ))\n  }\n}\n\n\n\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass RadioInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#096dd9\" style={{ color: \"white\" }}><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass RadioRender extends TypeRender {\n  static getDerivedStateFromProps(props, state) {\n    if (typeof state.value === \"string\") {\n\n      if (props.schema.$options && props.schema.$options.items) {\n        const ptr = props.schema.$options.items\n        if (ptr[state.value]) state.value = ptr[state.value]\n      }\n    }\n    return (state)\n  }\n\n}\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass RadioBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"Radio min/max size\">\n          <Space>\n            <InputNumber min={0} value={this.state.minSize} onChange={(value) => this.changeIt(\"minSize\", value)} />\n\n            <InputNumber min={0} value={this.state.maxSize} onChange={(value) => this.changeIt(\"maxSize\", value)} />\n          </Space>\n        </Form.Item>\n\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.Radio.code,\n  description: types.Radio.description,\n  class: types.Radio.class,\n\n  Info: RadioInfo,\n  Builder: RadioBuilder,\n  Form: RadioForm,\n  Render: RadioRender\n}\n\n\n","// this is a hidden type\n// to manage nested object\nimport { types,  fieldifyType } from 'fieldify'\n\n\nclass ObjectClass extends fieldifyType {\n}\n\n\nexport default {\n  code: \"Object\",\n  description: \"Nested Sub Object\",\n  class: ObjectClass\n}\n","// this is a hidden type\n// to manage nested object\nimport { types,  fieldifyType } from 'fieldify'\n\nclass ArrayClass extends fieldifyType {\n  configuration () {\n    return ({\n      min: {\n        $doc: 'Minimum of items',\n        $required: false,\n        $type: 'Number'\n      },\n      max: {\n        $doc: 'Maximun of items',\n        $required: false,\n        $type: 'Number'\n      }\n    })\n  }\n}\n\nexport default {\n  code: \"Array\",\n  description: \"Array\",\n  class: ArrayClass\n}\n","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { FieldStringOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\nimport String from './String'\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass FieldNameForm extends String.Form { \n  constructor(props){\n    super(props)\n  }\n\n  verify(input, cb) {\n    super.verify(input, (ret)=>{\n      if(ret.status !== \"success\") {\n        return(cb(ret))\n      }\n\n      // check if the key is already used\n      if(this.props.user && input in this.props.user) {\n        const msg = `Field name already used`\n        \n        this.onError(true, msg);\n        return (cb({\n          status: \"error\",\n          feedback: true,\n          help: msg\n        }))\n      }\n\n      cb(ret)\n    })\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass FieldNameInfo extends String.Info { }\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass FieldNameBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    // this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"FieldName min/max size\">\n          {/* <Space>\n            <InputNumber min={0} value={this.state.minSize} onChange={(value) => this.changeIt(\"minSize\", value)} />\n\n            <InputNumber min={0} value={this.state.maxSize} onChange={(value) => this.changeIt(\"maxSize\", value)} />\n          </Space> */}\n        </Form.Item>\n\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.FieldName.code,\n  description: types.FieldName.description,\n  class: types.FieldName.class,\n\n  Info: FieldNameInfo,\n  Builder: FieldNameBuilder,\n  Form: FieldNameForm\n}\n\n\n","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  Table,\n  Form,\n  Input,\n  Tag,\n  Modal,\n  Alert,\n  Row\n} from \"antd\";\n\nimport {\n  SmallDashOutlined as Icon,\n  EditOutlined as EditIcon,\n  DeleteOutlined as DeleteIcon,\n  UnorderedListOutlined as ObjectIcon,\n  PlusOutlined as PlusIcon,\n  CopyOutlined as ArrayIcon\n} from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeRender from '../lib/TypeRender';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass KVForm extends TypeForm {\n\n  constructor(props) {\n    super(props)\n  }\n\n  cycle(props) {\n    const ret = super.cycle(props)\n\n    if (!ret.value) ret.value = {}\n\n    this.result = { ...ret.value }\n\n    ret.modal = false\n    ret.modalCurrent = {\n      key: \"\",\n      value: \"\"\n    }\n    ret.dataTree = { ...ret.value }\n    ret.dataSource = this.computeDataSource(ret.dataTree);\n\n    return (ret)\n  }\n\n  computeDataSource(tree) {\n    const ds = []\n    for (let key in tree) {\n      const value = tree[key]\n      ds.push({\n        key: key,\n        value: value,\n        actions: <div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n          <span className=\"ant-radio-button-wrapper\" onClick={() => this.removeKey(key)}>\n            <span><DeleteIcon /></span>\n          </span>\n          <span className=\"ant-radio-button-wrapper\" onClick={() => this.openModal({ key, value })}>\n            <span><EditIcon /></span>\n          </span>\n        </div>\n      })\n    }\n    return (ds)\n  }\n\n  handleModalChange(key, value) {\n    const modalCurrent = { ...this.state.modalCurrent }\n    modalCurrent[key] = value;\n    this.setState({ modalCurrent })\n  }\n\n  openModal(data) {\n    const state = {\n      modalError: false,\n      modalInitial: null,\n      modalCurrent: data || {\n        key: \"\",\n        value: \"\"\n      },\n      modal: true\n    }\n\n    if (data) state.modalInitial = { ...state.modalCurrent }\n\n    this.setState(state)\n  }\n\n  removeKey(key) {\n    const state = { ...this.state }\n    delete state.dataTree[key]\n    state.dataSource = this.computeDataSource(state.dataTree);\n    this.setState(state)\n\n    this.changeValue(state.dataTree)\n  }\n\n  editedButton() {\n    const state = { ...this.state }\n\n    const mc = this.state.modalCurrent;\n\n    // check the key input\n    const type = this.schema.$_type;\n\n    // verify the input\n    const data = {}\n    data[mc.key] = mc.value;\n    type.verify(data, (error, message) => {\n      state.modalError = error;\n      state.modalErrorMessage = message;\n\n      if (error === false) {\n        // remove old entry and add new one\n        if (state.modalInitial) {\n          delete state.dataTree[state.modalInitial.key];\n        }\n        state.dataTree[state.modalCurrent.key] = state.modalCurrent.value\n\n        state.dataSource = this.computeDataSource(state.dataTree);\n\n        state.modal = false;\n      }\n\n      this.setState(state)\n      this.changeValue(state.dataTree)\n    })\n\n  }\n\n  render() {\n    const onCancel = () => {\n      this.setState({ modal: false });\n    };\n\n    const columns = [\n      {\n        title: 'Key',\n        dataIndex: 'key',\n        key: 'key',\n      },\n      {\n        title: 'Value',\n        dataIndex: 'value',\n        key: 'value',\n      },\n      {\n        title: <div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n          <span className=\"ant-radio-button-wrapper\" onClick={() => this.openModal()}>\n            <span>Add <PlusIcon /></span>\n          </span>\n        </div>,\n        dataIndex: 'actions',\n        key: 'actions',\n        align: \"right\"\n      },\n    ];\n\n    const layout = {\n      labelCol: { span: 8 },\n      wrapperCol: { span: 16 },\n    };\n\n    return (super.render(<div>\n      <Modal\n        centered\n        closable={false}\n        visible={this.state.modal}\n        width={300}\n        onOk={this.editedButton.bind(this)}\n        onCancel={onCancel}\n      >\n        {this.state.modalError === true ?\n          <div style={{ marginBottom: 8 }}>\n            <Alert size=\"small\" message={this.state.modalErrorMessage} type=\"error\" />\n          </div>\n\n          : null}\n\n        <Form\n          {...layout}\n        >\n          <Form.Item label=\"Key\">\n            <Input value={this.state.modalCurrent.key} onChange={({ target }) => this.handleModalChange(\"key\", target.value)} />\n          </Form.Item>\n\n          <Form.Item label=\"Value\">\n            <Input value={this.state.modalCurrent.value} onChange={({ target }) => this.handleModalChange(\"value\", target.value)} />\n          </Form.Item>\n\n        </Form>\n\n\n      </Modal>\n      <Table\n        size=\"small\"\n        dataSource={this.state.dataSource}\n        columns={columns}\n        pagination={{\n          total: this.state.dataSource.length,\n          pageSize: this.state.dataSource.length,\n          hideOnSinglePage: true\n        }}\n      />\n    </div>));\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass KVInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#22075e\"><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass KVRender extends TypeRender {\n\n  cycle(props) {\n    const ret = super.cycle(props)\n\n    if (!ret.value) ret.value = {}\n\n    this.result = { ...ret.value }\n\n    ret.dataTree = { ...ret.value }\n    ret.dataSource = this.computeDataSource(ret.dataTree);\n\n    return (ret)\n  }\n\n  computeDataSource(tree) {\n    const ds = []\n    for (let key in tree) {\n      const value = tree[key]\n      ds.push({\n        key: key,\n        value: value\n      })\n    }\n    return (ds)\n  }\n\n\n  render() {\n    const columns = [\n      {\n        dataIndex: 'key',\n        key: 'key',\n      },\n      {\n        dataIndex: 'value',\n        key: 'value',\n      }\n    ];\n\n    const layout = {\n      labelCol: { span: 8 },\n      wrapperCol: { span: 16 },\n    };\n\n    return (super.subRender(<div>\n      <Table\n        showHeader={false}\n        size=\"small\"\n        dataSource={this.state.dataSource}\n        columns={columns}\n        pagination={{\n          total: this.state.dataSource.length,\n          pageSize: this.state.dataSource.length,\n          hideOnSinglePage: true\n        }}\n      />\n    </div>));\n  }\n\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass KVBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.KV.code,\n  description: types.KV.description,\n  class: types.KV.class,\n\n  Info: KVInfo,\n  Builder: KVBuilder,\n  Form: KVForm,\n  Render: KVRender\n}\n\n\n","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { LinkOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeRender from '../lib/TypeRender';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass HashForm extends TypeForm {\n  render() {\n    return (super.render(\n      <Input \n      value={this.state.value} \n      placeholder={this.state.options.placeholder} \n      onChange={({ target }) => this.changeValue(target.value)} \n      style={{width: \"100%\"}}\n      />\n    ));\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass HashRender extends TypeRender {\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass HashInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#badb64\" style={{ color: \"#555555\" }}><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass HashBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.configure()\n  }\n}\n\n/* <div class=\"ant-form-item-control-input\">\n  <div class=\"ant-form-item-control-input-content\">\n    <input type=\"text\" class=\"ant-input\" value=\"vdvfsdvfdsvfds\" style=\"width: 100%;\">\n      </div><span class=\"ant-form-item-children-icon\">\n        <span role=\"img\" aria-label=\"check-circle\" class=\"anticon anticon-check-circle\">\n          <svg viewBox=\"64 64 896 896\" focusable=\"false\" class=\"\" data-icon=\"check-circle\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\">\n            <path d=\"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm193.5 301.7l-210.6 292a31.8 31.8 0 01-51.7 0L318.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.2 0 19.9 4.9 25.9 13.3l71.2 98.8 157.2-218c6-8.3 15.6-13.3 25.9-13.3H699c6.5 0 10.3 7.4 6.5 12.7z\">\n              </path>\n              </svg>\n              </span>\n              </span>\n              </div> */\n\n\n\nexport default {\n  code: types.Hash.code,\n  description: types.Hash.description,\n  class: types.Hash.class,\n\n  Info: HashInfo,\n  Builder: HashBuilder,\n  Form: HashForm,\n  Render: HashRender,\n}\n\n\n","import Name from \"./Types/Name\"\nimport Email from \"./Types/Email\"\nimport String from \"./Types/String\"\nimport Number from \"./Types/Number\"\nimport Checkbox from \"./Types/Checkbox\"\nimport DateTimePicker from \"./Types/DateTimePicker\"\nimport DatePicker from \"./Types/DatePicker\"\nimport DatePickerRange from \"./Types/DatePickerRange\"\n\nimport TimePicker from \"./Types/TimePicker\"\nimport TimePickerRange from \"./Types/TimePickerRange\"\n\nimport Select from \"./Types/Select\"\nimport Radio from \"./Types/Radio\"\nimport Object from \"./Types/Object\"\nimport Array from \"./Types/Array\"\nimport FieldName from \"./Types/FieldName\"\nimport KV from \"./Types/KV\"\nimport Hash from \"./Types/Hash\"\n\nexport default {\n  Name,\n  Email,\n  String,\n  Number,\n  Select,\n  Radio,\n  Checkbox,\n  DateTimePicker,\n  DatePicker,\n  DatePickerRange,\n  TimePicker,\n  TimePickerRange,\n  Hash,\n  Object,\n  Array,\n  FieldName,\n  KV\n}\n","import { schema } from \"fieldify\";\nimport Types from \"../Types\"\n\nexport class FieldifySchema extends schema {\n  constructor(name, options) {\n    super(name, options);\n  }\n\n  resolver(type) {\n    return (Types[type])\n  }\n\n  compile(schema) {\n    // process normal compilation\n    super.compile(schema);\n  }\n}\n","import { utils, input as FieldifyInput } from \"fieldify\";\nimport React from 'react';\nimport RecycledComponent from 'react-recycling';\n\nimport { Form, Table, Button, Input, Card } from \"antd\";\nimport {\n  PlusOutlined as PlusIcon,\n  DeleteOutlined as DeleteIcon\n} from '@ant-design/icons';\n\nimport { FieldifySchema } from \"../Schema/Schema\";\n\n\nexport class TypeDataset extends RecycledComponent {\n  constructor(props) {\n    super(props)\n\n    this.formRef = React.createRef()\n\n  }\n\n  cycle(props, first) {\n\n    const state = {\n      layout: props.layout ? props.layout : \"horizontal\"\n    }\n\n    // compile the schema\n    state.rawSchema = props.schema\n    state.schema = new FieldifySchema(\"form\")\n    state.schema.compile(state.rawSchema)\n\n    // create an input instance\n    // console.log(\"rawInput\", state.rawInput === props.rawInput)\n    state.rawInput = props.input\n    state.input = new FieldifyInput(state.schema)\n    state.input.setValue(props.input)\n\n    state.inputValue = state.input.getValue()\n    state.verify = props.verify || false\n\n    state.actions = props.actions;\n    state.generator = props.generator;\n\n    this.references = {};\n\n    this.onChange = props.onChange ? props.onChange : () => { };\n\n    // state.reactive = this.update(state.schema, state.inputValue, state.verify);\n    state.reactive = this.update({\n      state,\n      root: state.schema,\n      input: state.inputValue,\n      verify: state.verify\n    })\n    return (state)\n  }\n\n  getValue() {\n    return (this.state.input.getValue())\n  }\n\n  clickAddArray(line) {\n    this.state.input.set(line)\n    const _value = this.state.input.getValue();\n    this.onChange(this.state.input, _value)\n    this.setState({\n      inputValue: _value,\n      // reactive: this.update(this.state.schema, _value, false)\n      reactive: this.update({\n        state: this.state,\n        root: this.state.schema,\n        input: _value,\n        verify: false,\n      })\n    })\n  }\n\n  clickRemoveArrayItem(line) {\n    this.state.input.remove(line)\n    const _value = this.state.input.getValue();\n    this.onChange(this.state.input, _value)\n    this.setState({\n      inputValue: _value,\n      // reactive: this.update(this.state.schema, _value, false)\n\n      reactive: this.update({\n        state: this.state,\n        root: this.state.schema,\n        input: _value,\n        verify: false,\n      })\n\n    })\n  }\n\n\n  setValue(line, value) {\n    if (!this.state.input) return;\n\n    this.state.input.set(line, value)\n    const _value = this.state.input.getValue();\n    this.onChange(this.state.input, _value)\n    this.setState({\n      inputValue: _value\n    })\n  }\n\n  update(up) {\n\n    var { root, input, verify, state } = up;\n\n    const follower = (schema, schematized, input, ret, line) => {\n      line = line || \"\"\n\n      if (!input) input = {}\n\n      utils.orderedRead(schema, (index, item) => {\n\n        const source = { ...Array.isArray(item) ? item[0] : item };\n        const schematizedSrc = schematized[source.$_key];\n        const sourceSchematized = { ...Array.isArray(schematizedSrc) ? schematizedSrc[0] : schematizedSrc };\n\n        const inputPtr = input ? input[source.$_key] : null;\n        const lineKey = line + \".\" + source.$_key;\n\n        if (source.$_array === true) {\n          const columns = [\n            {\n              dataIndex: 'form',\n              key: 'form',\n              width: \"100%\"\n            }\n          ];\n\n          if (state.actions === true) {\n            columns.push({\n              dataIndex: 'actions',\n              key: 'actions',\n              align: \"right\"\n            })\n          }\n\n          const dataSource = []\n\n          var inputPtr2 = inputPtr;\n          const options = source.$array || {};\n          const min = options.min ? options.min : (source.$required === true ? 1 : 0)\n\n          if (source.$_nested === true) {\n            var inputPtr2 = input[source.$_key]\n\n            if (!Array.isArray(inputPtr)) inputPtr2 = input[source.$_key] = [];\n\n            // force to create min form\n            if (min - inputPtr2.length > 0) {\n              for (var a = 0; a <= min - inputPtr2.length; a++) {\n                inputPtr2.push({})\n              }\n            }\n\n            for (var a = 0; a < inputPtr2.length; a++) {\n              const value = inputPtr2[a];\n              const key = lineKey + \".\" + a\n\n              const child = [];\n              follower(source, sourceSchematized, value, child, key);\n\n              const toPush = { key, form: child }\n              if (state.actions === true) {\n                toPush.actions = <Button size=\"small\" onClick={() => this.clickRemoveArrayItem(key)}>\n                  <span><DeleteIcon /></span>\n                </Button>\n              }\n              dataSource.push(toPush)\n            }\n          }\n          else if (source.$type) {\n            delete sourceSchematized.$doc; // source is cloned\n            const TypeForm = source.$type[state.generator];\n\n            // console.log(\"Array non nested\", min, inputPtr2)\n\n            if (verify === true) {\n              // console.log()\n            }\n\n            if (!Array.isArray(inputPtr)) {\n              input[source.$_key] = [];\n              inputPtr2 = input[source.$_key];\n            }\n\n            if (!inputPtr2) return (ret);\n\n            if (min - inputPtr2.length > 0) {\n              for (var a = 0; a <= min - inputPtr2.length; a++) {\n                inputPtr2.push(null)\n              }\n            }\n\n            for (var a = 0; a < inputPtr2.length; a++) {\n              const value = inputPtr2[a];\n              const key = lineKey + \".\" + a\n\n              const toPush = {\n                key,\n                form: <TypeForm\n                  schema={sourceSchematized}\n                  value={value}\n                  verify={verify}\n                  user={this.props.user}\n                  onChange={(schema, value) => this.setValue(key, value)}\n                  isInjected={true}\n\n                  // reference errors\n                  onError={(error, message) => {\n                    if (error === true) {\n                      this.references[key] = message;\n                    }\n                    else {\n                      const ref = this.references[key];\n                      if (ref) {\n                        delete this.references[key];\n                      }\n                    }\n                  }}\n                />\n              }\n              if (state.actions === true) {\n                toPush.actions = <Button size=\"small\" onClick={() => this.clickRemoveArrayItem(key)}>\n                  <span><DeleteIcon /></span>\n                </Button>\n              }\n              dataSource.push(toPush)\n            }\n          }\n\n          ret.push(<Form.Item key={source.$_wire} noStyle={true}>\n            <div className=\"ant-form-item\">\n              <Card size=\"small\" title={source.$_access.$doc} extra={<div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n                {inputPtr2 && state.actions === true ?\n                  <span className=\"ant-radio-button-wrapper\" onClick={() => this.clickAddArray(lineKey + \".\" + inputPtr2.length)}>\n                    <span><PlusIcon /></span>\n                  </span>\n                  : null}\n              </div>}>\n                <Table\n                  size=\"small\"\n                  dataSource={dataSource}\n                  columns={columns}\n                  verticalAlign='middle'\n                  showHeader={false}\n                  pagination={{\n                    total: dataSource.length,\n                    pageSize: dataSource.length,\n                    hideOnSinglePage: true\n                  }}\n                  bordered\n                />\n              </Card>\n            </div>\n          </Form.Item>);\n\n        }\n        else {\n          if (source.$_nested === true) {\n            const child = [];\n\n            follower(source, sourceSchematized, inputPtr, child, lineKey);\n\n            ret.push(<div key={source.$_wire} className=\"ant-form-item\">\n              <Card size=\"small\" title={source.$doc}>\n                {child}\n              </Card>\n            </div>);\n          }\n          else if (item.$type) {\n            const TypeForm = item.$type[state.generator];\n\n            ret.push(<TypeForm\n              schema={sourceSchematized}\n              value={inputPtr}\n              key={source.$_wire}\n              verify={verify}\n              user={this.props.user}\n              onChange={(schema, value) => this.setValue(lineKey, value)}\n\n              // reference errors\n              onError={(error, message) => {\n                if (error === true) {\n                  this.references[source.$_wire] = message;\n                }\n                else {\n                  const ref = this.references[source.$_wire];\n                  if (ref) {\n                    delete this.references[source.$_wire];\n                  }\n                }\n              }}\n            />);\n          }\n        }\n      });\n      return (ret);\n    };\n\n    const ret = [];\n    follower(\n      root.handler.schema,\n      root.handlerSchematized.schema,\n      input,\n      ret\n    );\n    return (ret);\n  }\n\n  render() {\n    var layout = {};\n\n    if (this.state.layout === 'horizontal') {\n      layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n      }\n    }\n    return (<Form\n      layout={this.state.layout}\n      key={this.formRef}\n      {...layout}\n      name=\"basic\" >\n      {this.state.reactive}\n    </Form>);\n  }\n}\n","import { utils, input as FieldifyInput } from \"fieldify\";\nimport React from 'react';\nimport RecycledComponent from 'react-recycling';\n\nimport { Form, Table, Button, Input, Card } from \"antd\";\nimport {\n  PlusOutlined as PlusIcon,\n  DeleteOutlined as DeleteIcon\n} from '@ant-design/icons';\n\nimport { FieldifySchema } from \"../Schema/Schema\";\nimport { TypeDataset } from \"../lib/TypeDataset\";\n\nexport class FieldifySchemaForm extends RecycledComponent {\n  cycle(props) {\n    const state = {\n      layout: props.layout,\n      schema: props.schema,\n      input: props.input,\n      onChange: props.onChange,\n    }\n\n    return(state)\n  }\n\n  render() {\n    return (<TypeDataset\n      schema={this.state.schema}\n      input={this.state.input}\n      onChange={this.state.onChange}\n      actions={true}\n      layout={this.state.layout}\n      generator=\"Form\"\n    />);\n  }\n}\n","import { utils, input as FieldifyInput } from \"fieldify\";\n\nimport React from 'react';\nimport Types from '../Types';\nimport { Modal, Form, Input, Select, Checkbox, Tag } from \"antd\";\nimport { FieldifySchema } from \"../Schema/Schema\";\nimport { FieldifySchemaForm } from './Form'\nimport { ConsoleSqlOutlined } from \"@ant-design/icons\";\n\n// build all available types\nconst allTypes = {}\nconst allTypesNoArray = {}\nfor (var a in Types) {\n  allTypes[a] = Types[a].description\n  if (a !== \"Array\") {\n    allTypesNoArray[a] = Types[a].description\n  }\n}\n\n// set the very basic schema for the modal\nconst baseSchema = {\n  key: {\n    $doc: \"Name of the field\",\n    $type: Types.FieldName,\n    $required: true,\n    $position: 10\n  },\n  type: {\n    $doc: \"Field type\",\n    $type: \"Select\",\n    $required: true,\n    $options: {\n      items: allTypes\n    },\n    $position: 11\n  },\n  doc: {\n    $doc: \"Description\",\n    $required: false,\n    $type: \"String\",\n    $position: 22\n  },\n  position: {\n    $doc: \"Position in the serie\",\n    $required: false,\n    $type: \"Number\",\n    $default: 0,\n    $options: {\n      acceptedTypes: \"integer\"\n    },\n    $position: 23\n  },\n  // options: {\n  //   $doc: \"Options\",\n  //   $type: Types.Checkbox,\n  //   $options: {\n  //     required: \"Field is required\",\n  //     readOnly: \"Field is read only\",\n  //   }\n  // },\n}\n\nexport class FieldifySchemaBuilderModal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.formRef = React.createRef()\n    this.state = this.cycle(props, true)\n    this.currentSchema = baseSchema\n  }\n\n  componentDidUpdate(props) {\n    var changed = false\n    var state = { ...this.state }\n\n    if (this.props.visible !== props.visible) {\n      this.currentSchema = baseSchema\n      state = this.cycle(this.props)\n      changed = true;\n    }\n\n    if (changed === true) this.setState(state)\n  }\n\n  cycle(props, first) {\n\n    // here we have 3 cases\n    // normal case = $_array !== true && $_nested !== true\n    // nested in array = $_array === true && $_nested === true\n    // normal in array = $_array === true && $_nested !== true\n    // single nested = $_array !== true && $_nested === true\n\n    const state = {\n      edition: false,\n      original: props.value,\n      form: {\n        state: \"Filling\",\n        color: \"blue\"\n      },\n      value: {},\n      visible: props.visible,\n      user: props.user,\n      verify: false\n    };\n   \n    if (state.user && state.user.$_wire) {\n      state.initialPath = state.user.$_wire;\n    }\n    else state.initialPath = '';\n\n    if (props.value) {\n      const val = props.value;\n\n      state.edition = true;\n\n      // normal case\n      if (val.$_array !== true && val.$_nested !== true) {\n        state.value = {\n          key: val.$_key,\n          type: val.$type.code,\n          doc: val.$doc,\n          required: val.$required,\n          read: val.$read,\n          write: val.$write,\n          options: val.$options,\n          position: val.$position,\n        }\n      }\n      // nested in array\n      else if (val.$_array === true && val.$_nested === true) {\n        state.value = {\n          key: val.$_key,\n          type: \"Array\",\n          content: \"Object\",\n          doc: val.$doc,\n          required: val.$required,\n          read: val.$read,\n          write: val.$write,\n          options: val.$options,\n          position: val.$position,\n        }\n      }\n      // normal in array\n      else if (val.$_array === true && val.$_nested !== true) {\n        state.value = {\n          key: val.$_key,\n          type: \"Array\",\n          content: typeof val.$type === \"string\" ? val.$type : val.$type.code,\n          doc: val.$doc,\n          required: val.$required,\n          read: val.$read,\n          write: val.$write,\n          options: val.$options,\n          position: val.$position,\n        }\n      }\n      // special handle for objects\n      else if (val.$_array !== true && val.$_nested === true) {\n        state.value = {\n          key: val.$_key,\n          type: \"Object\",\n          doc: val.$doc,\n          required: val.$required,\n          read: val.$read,\n          write: val.$write,\n          options: val.$options,\n          position: val.$position,\n        }\n      }\n    }\n    // single addition\n    else {\n      // nothing to set\n      state.value = {}\n    }\n\n    this.driveSchema(state)\n    state.input.setValue(state.value)\n    return (state)\n  }\n\n  driveSchema(state, force) {\n    const value = state.value;\n\n    const Type = Types[value.type]\n    if (Type && Type !== this.currentType) {\n      // create a fake tmp type\n      const TypeObject = new Type.class\n\n      const configuration = TypeObject.configuration()\n\n      this.currentSchema = { ...baseSchema }\n\n      // special cases for array \n      if (value.type === \"Array\") {\n        this.currentSchema.content = {\n          $doc: \"Item content type\",\n          $type: \"Select\",\n          $required: true,\n          $options: {\n            default: value.content || \"Object\",\n            items: allTypesNoArray\n          },\n          $position: 12\n        }\n      }\n\n      if (configuration) this.currentSchema.options = {\n        ...configuration,\n        $doc: \"Type configuration\"\n      };\n\n      // const upSchema = Type.\n      state.currentType = Type;\n\n      state.schema = new FieldifySchema(\"modal\");\n      state.schema.compile(this.currentSchema);\n      state.input = new FieldifyInput(state.schema)\n\n    }\n    else {\n      state.schema = new FieldifySchema(\"modal\");\n      state.schema.compile(this.currentSchema);\n      state.input = new FieldifyInput(state.schema)\n    }\n  }\n\n\n  formChanged(value) {\n\n    const state = {\n      schema: this.state.schema,\n      input: this.state.input,\n      value: { ...this.state.value, ...value }\n    }\n\n    this.driveSchema(state)\n    state.input.setValue(state.value)\n    this.setState(state)\n\n    state.input.verify((result) => {\n      const state = { form: {} }\n      state.verify = true;\n\n      state.error = result.error\n\n      if (result.error === true) {\n        state.form.color = \"blue\"\n        state.form.state = \"Filling\"\n      }\n      else {\n        state.form.color = \"green\"\n        state.form.state = \"Passed\"\n      }\n\n      this.setState(state)\n    })\n\n  }\n\n  handleOK() {\n    this.state.input.verify((result) => {\n      const state = { form: {} }\n      state.verify = true;\n\n      state.error = result.error\n\n      if (result.error === true) {\n        state.form.color = \"red\"\n        state.form.state = \"Error\"\n      }\n      else {\n        state.form.color = \"green\"\n        state.form.state = \"Passed\"\n\n        this.setState(state)\n\n        // get the current input values \n        const value = result.result\n        // const value = this.state.input.getValue()\n        var nvalue = {}\n\n        // rename all root value with $\n        for (var key in value) nvalue['$' + key] = value[key]\n\n        // we will save the last path in order to reconstruct the field name\n        const source = this.state.initialPath.split('.')\n        source.pop()\n        source.push(value.key)\n        const npath = source.join('.')\n        delete nvalue.$key;\n\n        // because object and array are virtualized in the builder \n        // then we need to remap the item with the correct schema underlining\n\n        if (nvalue.$type === \"Array\" && nvalue.$content === \"Object\") {\n\n          if (this.state.edition === true) {\n            // recopy nestedObjects if exists\n            // avoid root copy\n            if (this.props.user.$_wire) {\n              const no = utils.getNO(this.props.user)\n              for (var a in no.nestedObject) {\n                const p = no.nestedObject[a]\n                nvalue[p[0]] = p[1]\n              }\n            }\n          }\n          else if(!nvalue.$doc) nvalue.$doc = \"\"\n\n          delete nvalue.$type;\n          delete nvalue.$content;\n          nvalue = [nvalue]\n        }\n        // normal in array\n        else if (nvalue.$type === \"Array\" && nvalue.$content !== \"Object\") {\n          nvalue.$type = nvalue.$content;\n          delete nvalue.$content;\n          nvalue = [nvalue]\n        }\n        // special handle for objects\n        else if (nvalue.$type === \"Object\") {\n\n          if (this.state.edition === true) {\n            // recopy nestedObjects if exists\n            // avoid root copy\n            if (this.props.user.$_wire) {\n              const no = utils.getNO(this.props.user)\n              for (var a in no.nestedObject) {\n                const p = no.nestedObject[a]\n                nvalue[p[0]] = p[1]\n              }\n            }\n          }\n          else if(!nvalue.$doc) nvalue.$doc = \"\"\n\n          delete nvalue.$type;\n        }\n\n        if (this.state.edition === true) {\n          this.props.onOk(({\n            edition: true,\n            oldPath: this.state.initialPath,\n            newPath: npath,\n            key: value.key,\n            value: nvalue\n          }))\n        }\n        else {\n          this.props.onOk(({\n            edition: false,\n            newPath: this.state.initialPath + \".\" + value.key,\n            key: value.key,\n            value: nvalue\n          }))\n        }\n      }\n    })\n\n  }\n\n  render() {\n    const onOk = () => {\n      // this.onOk(this.state);\n    };\n    const onCancel = () => {\n      // this.setState({ visible: false });\n      this.props.onCancel(this.state);\n    };\n    const layout = {\n      labelCol: { span: 8 },\n      wrapperCol: { span: 16 },\n    };\n\n    return (<Modal\n      title={<span>Add New Field To Your Schema <Tag color={this.state.form.color}>{this.state.form.state}</Tag></span>}\n      centered\n      visible={this.state.visible}\n      width={600}\n      onOk={this.handleOK.bind(this)}\n      onCancel={onCancel}\n    >\n      <FieldifySchemaForm\n        ref={this.formRef}\n        schema={this.currentSchema}\n        input={this.state.value}\n        user={this.props.user}\n        verify={this.state.verify}\n        onChange={this.formChanged.bind(this)}\n      />\n\n    </Modal>);\n  }\n}\n","import React from 'react';\n\nimport RecycledComponent from 'react-recycling';\n\nimport {\n  schema,\n  iterator,\n  assign,\n  fusion,\n  utils\n} from \"fieldify\"\n\nimport {\n  notification,\n  Table,\n  Tag,\n  Popconfirm,\n  Tooltip\n} from 'antd';\n\nimport {\n  EditOutlined as EditIcon,\n  DeleteOutlined as DeleteIcon,\n  UnorderedListOutlined as ObjectIcon,\n  PlusOutlined as PlusIcon,\n  CopyOutlined as ArrayIcon\n} from '@ant-design/icons';\n\nimport { FieldifySchema } from \"./Schema\";\n\nimport { FieldifySchemaBuilderModal } from './BuilderModal';\n\nimport String from \"../Types/String\";\n\nexport class FieldifySchemaBuilder extends RecycledComponent {\n\n  cycle(props, first) {\n    const state = {\n      modal: false,\n      modalUser: null,\n      schemaDataSource: []\n    };\n\n    this.onChange = ()=>{}\n    if(props.onChange) this.onChange = props.onChange\n\n    // compile the schema\n    state.schema = new FieldifySchema(\"form\")\n    state.schema.compile(props.schema)\n\n    state.schemaDataSource = this.updateDataSource(state.schema)\n\n    this.columns = [\n      {\n        title: 'Key',\n        dataIndex: 'name',\n        key: 'key',\n      },\n      {\n        title: 'Description',\n        dataIndex: 'doc',\n        key: 'doc'\n      },\n      {\n        title: <div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n          <span className=\"ant-radio-button-wrapper\" onClick={() => this.handlingAdd()}>\n            <span>Add <PlusIcon /></span>\n          </span>\n        </div>,\n        dataIndex: 'actions',\n        key: 'actions',\n        align: \"right\"\n      },\n    ];\n\n    return(state)\n  }\n\n  fireOnChange() {\n    const ex = this.state.schema.export()\n    // this.state.schema.compile(ex)\n\n    // fire on change for exporting the new schema\n    this.onChange(ex)\n  }\n\n  itemChanged(arg) {\n\n    if (arg.edition === true) {\n      const lineup = this.state.schema.getLineup(arg.oldPath);\n\n      // delete org\n      this.state.schema.removeLineup(arg.oldPath)\n\n      // put new\n      this.state.schema.setLineup(arg.newPath, arg.value)\n\n      notification.success({\n        message: \"Field updated\",\n        description: `Field at ${arg.oldPath} has been successfully updated`\n      })\n    }\n\n    // manage addition\n    else {\n      // just put the new one\n      this.state.schema.setLineup(arg.newPath, arg.value)\n\n      notification.success({\n        message: \"Field added\",\n        description: `Field at ${arg.newPath} has been successfully added`\n      })\n    }\n\n    this.fireOnChange();\n\n    this.setState({\n      modal: false,\n      modalContent: null,\n      modalUser: null,\n      schemaDataSource: this.updateDataSource(this.state.schema)\n    });\n  }\n\n  itemRemove(item) {\n    this.state.schema.removeLineup(item.$_wire);\n\n    this.fireOnChange();\n\n    this.setState({\n      schemaDataSource: this.updateDataSource(this.state.schema)\n    });\n\n    notification.success({\n      message: \"Field removed\",\n      description: `Field at ${item.$_wire} has been successfully removed`\n    })\n  }\n\n  handlingAdd(path) {\n    path = path || \".\";\n\n    const lineup = this.state.schema.getLineup(path) || this.state.schema.handler.schema;\n\n    const state = {\n      modal: true, \n      modalContent: null, \n      modalUser: lineup\n    }\n\n    this.setState(state);\n  }\n\n  handlingEdit(item) {\n    const path = item.$_wire || \".\";\n\n    const lineup = this.state.schema.getLineup(path) || this.state.schema.handler.schema;\n\n    const state = {\n      modal: true, \n      modalContent: item, \n      modalUser: lineup\n    }\n\n    this.setState(state);\n  }\n\n  updateDataSource(root) {\n    const self = this;\n    function fieldify2antDataTable(schema, wire) {\n      if (!wire)\n        wire = \"\";\n      const current = [];\n      utils.orderedRead(schema, (index, item) => {\n        var path = wire + \".\" + item.$_key;\n        item.$_path = path;\n\n        // Is array\n        if (Array.isArray(item)) {\n          path = wire + \".\" + item[0].$_key;\n          item[0].$_path = path;\n          item[0].$_array = true;\n\n          var composite = <Tooltip title=\"... of objects\">\n            <Tag color=\"#722ed1\"><ObjectIcon /></Tag>\n          </Tooltip>;\n          // for direct type assignation\n          if (\"$type\" in item[0]) {\n            const TypeInfo = item[0].$type.Info;\n            composite = <TypeInfo />;\n          }\n          else {\n            item[0].$_nested = true;\n          }\n\n          current.push({\n            ptr: item[0],\n            key: path,\n            name: <div>\n              <Tooltip title=\"This field is an array ...\">\n                <Tag color=\"#eb2f96\"><ArrayIcon /></Tag>\n              </Tooltip>\n              {composite}\n              <strong>{item[0].$_key}</strong>\n            </div>,\n            doc: item[0].$doc,\n            children: !(\"$type\" in item[0]) ? fieldify2antDataTable(item[0], path) : null,\n            actions: <div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n              <Popconfirm title={<span>Are you sure to delete the Array <strong>{path}</strong></span>} onConfirm={() => self.itemRemove(item[0])} okText=\"Yes\" cancelText=\"No\">\n                <span className=\"ant-radio-button-wrapper\">\n                  <span><DeleteIcon /></span>\n                </span>\n              </Popconfirm>\n\n\n              <span className=\"ant-radio-button-wrapper\" onClick={() => self.handlingEdit(item[0])}>\n                <span><EditIcon /></span>\n              </span>\n\n              {!(\"$type\" in item[0]) ?\n                <span className=\"ant-radio-button-wrapper\" onClick={() => self.handlingAdd(path)}>\n                  <span><PlusIcon /></span>\n                </span>\n                : null}\n            </div>\n          });\n        }\n        // is object\n        else if (typeof item === \"object\" && !item.$type) {\n          item.$_nested = true;\n          current.push({\n            ptr: item,\n            key: path,\n            name: <div>\n              <Tooltip title=\"This field is an object\">\n                <Tag color=\"#722ed1\"><ObjectIcon /></Tag>\n              </Tooltip>\n              <strong>{item.$_key}</strong>\n            </div>,\n            doc: item.$doc,\n            children: fieldify2antDataTable(item, path),\n            actions: <div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n              <Popconfirm title={<span>Are you sure to delete Object <strong>{path}</strong></span>} onConfirm={() => self.itemRemove(item)} okText=\"Yes\" cancelText=\"No\">\n                <span className=\"ant-radio-button-wrapper\">\n                  <span><DeleteIcon /></span>\n                </span>\n              </Popconfirm>\n\n              <span className=\"ant-radio-button-wrapper\" onClick={() => self.handlingEdit(item)}>\n                <span><EditIcon /></span>\n              </span>\n\n              <span className=\"ant-radio-button-wrapper\" onClick={() => self.handlingAdd(path)}>\n                <span><PlusIcon /></span>\n              </span>\n            </div>\n          });\n        }\n        else {\n          const TypeInfo = item.$type.Info;\n          current.push({\n            ptr: item,\n            key: path,\n            name: <div>\n              <TypeInfo /> {item.$_key}\n            </div>,\n            doc: item.$doc,\n            actions: <div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n              <Popconfirm title={<span>Are you sure to delete <strong>{path}</strong></span>} onConfirm={() => self.itemRemove(item)}\n                // onCancel={cancel}\n                okText=\"Yes\" cancelText=\"No\">\n                <span className=\"ant-radio-button-wrapper\">\n                  <span><DeleteIcon /></span>\n                </span>\n              </Popconfirm>\n\n              <span className=\"ant-radio-button-wrapper\" onClick={() => self.handlingEdit(item)}>\n                <span><EditIcon /></span>\n              </span>\n            </div>\n          });\n        }\n      });\n      return (current);\n    }\n\n    var data = null;\n    if (root) {\n      data = fieldify2antDataTable(root.handler.schema);\n      return (data)\n    }\n\n    return ([])\n  }\n\n  render() {\n    const sds = this.state.schemaDataSource;\n\n    return (<div>\n      <FieldifySchemaBuilderModal\n        user={this.state.modalUser}\n        visible={this.state.modal}\n        value={this.state.modalContent}\n        onCancel={() => this.setState({ modal: false })}\n        onOk={this.itemChanged.bind(this)}\n      />\n\n      <Table columns={this.columns} dataSource={sds} size=\"small\" pagination={{\n        total: sds.length,\n        pageSize: sds.length,\n        hideOnSinglePage: true\n      }} expandable={{ defaultExpandAllRows: true }} />\n    </div>);\n  }\n}","import { utils, input as FieldifyInput } from \"fieldify\";\nimport React from 'react';\nimport RecycledComponent from 'react-recycling';\n\nimport { Form, Table, Button, Input, Card } from \"antd\";\nimport {\n  PlusOutlined as PlusIcon,\n  DeleteOutlined as DeleteIcon\n} from '@ant-design/icons';\n\nimport { FieldifySchema } from \"../Schema/Schema\";\nimport { TypeDataset } from \"../lib/TypeDataset\";\n\nexport class FieldifySchemaRender extends RecycledComponent {\n  cycle(props) {\n    const state = {\n      layout: props.layout,\n      schema: props.schema,\n      input: props.input,\n    }\n\n    return(state)\n  }\n\n  render() {\n    return (<TypeDataset\n      schema={this.state.schema}\n      input={this.state.input}\n      actions={false}\n      layout={this.state.layout}\n      generator=\"Render\"\n    />);\n  }\n}\n","import { input } from \"fieldify\"\n\nimport React from 'react'\nimport styles from './styles.module.css'\n\nimport * as schema from './Schema'\nimport types from './Types'\n\n// just map the input class from fieldify\nexport class Input extends input {}\n\n// export the schema\nexport const Schema = schema;\n\n// export types\nexport const Types = types;\n\n// get current version\nimport pack from '../package.json'\nexport const Version = pack.version;\n\nimport \"antd/dist/antd.css\";\n\n","const leafRegex = /^\\$/\nconst leafPrivateRegex = /^\\$_/\n\nconst internal = {\n  $required: true,\n  $maxArray: 100\n}\n\nmodule.exports = {\n  leaf: leafRegex,\n  leafPrivate: leafPrivateRegex,\n\n  /**\n   * Determine if there is a defined field in the current object stage\n   * @param  {Object}  schema Current stage\n   * @return {Boolean}      true there is reference, false it's free\n   */\n  isThereSubObject: (schema) => {\n    for (var key in schema) {\n      if (internal.hasOwnProperty(key)) continue\n      if (!leafRegex.test(key)) {\n        return (true)\n      }\n    }\n    return (false)\n  },\n\n  /**\n   * Determine if there an object parameter\n   * @param  {Object}  schema Current stage\n   * @return {Boolean}      true there is reference, false it's free\n   */\n  isThereObjectParams: (schema) => {\n    for (var key in schema) {\n      if (internal.hasOwnProperty(key)) continue\n      if (leafRegex.test(key)) {\n        return (true)\n      }\n    }\n    return (false)\n  },\n\n  /**\n   * Async object follower\n   * @param  {[type]} objs       Object to follow\n   * @param  {Function} executor Per item execution\n   */\n  eachObject: (objs, executor) => {\n    var aObjects = []\n\n    // transpose objets to array\n    for (var a in objs) { aObjects.push([a, objs[a]]) }\n\n    function next () {\n      var o = aObjects.shift()\n      if (o === undefined) {\n        executor(null, null, next, true)\n        return\n      }\n      executor(o[0], o[1], () => {\n        process.nextTick(next)\n      }, false)\n    }\n\n    process.nextTick(next)\n  },\n\n  /**\n   * Async array follower\n   * @param  {[type]} list     List of object\n   * @param  {[type]} executor Per item execution\n   */\n  eachItem: (list, executor) => {\n    var index = 0\n    if (!Array.isArray(list)) { return (executor(null, null, null, true)) }\n    function next () {\n      var o = list[index]\n      if (o === undefined) {\n        executor(null, null, null, true)\n        return\n      }\n      executor(index, o, () => {\n        index++\n        process.nextTick(next)\n      }, false)\n    }\n    process.nextTick(next)\n  },\n\n  /**\n   * Read async a list of callback\n   * @param  {Array}    list   Array of callback\n   * @param  {Function} finish Triggered when list is completed\n   */\n  sync: (list, finish) => {\n    function next (index) {\n      var exec = list[index]\n      if (!exec) {\n        if (finish) finish()\n        return\n      }\n      exec(() => {\n        index++\n        process.nextTick(next, index)\n      })\n    }\n    process.nextTick(next, 0)\n  },\n\n  getNO: (schema) => {\n    const nestedObject = []\n    const nestedOptions = []\n\n    for (var key in schema) {\n      const ptr = schema[key]\n      const fc = key.substr(0, 1)\n      if (fc === '$') nestedOptions.push([key, ptr])\n      else nestedObject.push([key, ptr])\n    }\n\n    return ({ nestedObject, nestedOptions })\n  },\n\n  orderedRead: (schema, cb, wire) => {\n    wire = wire || ''\n\n    const dup = { ...schema }\n\n    // remap keys\n    for (var key in dup) {\n      if (leafRegex.test(key)) {\n        delete dup[key]\n        continue\n      }\n    }\n\n    // ordering the line\n    const ordered = Object.values(dup).sort((a, b) => {\n      if (Array.isArray(a)) a = a[0]\n      if (Array.isArray(b)) b = b[0]\n\n      return (a.$position - b.$position)\n    })\n\n    // this pass is use to reduce displacement on positions\n    for (var index = 0; index < ordered.length; index++) {\n      var ptr = ordered[index]\n      if (Array.isArray(ptr)) ptr = ptr[0]\n      ptr.$position = index\n    }\n\n    // follow and update the line\n    for (var index = 0; index < ordered.length; index++) {\n      const item = ordered[index]\n      cb(index, item)\n    }\n  }\n}\n","function _specialClone (dst, src) {\n  for (var a in src) {\n    const p = src[a]\n    if (Array.isArray(p)) {\n      if (!Array.isArray(dst[a])) dst[a] = [{}]\n      _specialClone(dst[a][0], p[0])\n    }\n    else if (p && typeof p === 'object') {\n      // here we only remap javascript Object\n      // all other object are pointed\n      if (p.constructor.name === 'Object') {\n        if (!dst[a]) dst[a] = {}\n        _specialClone(dst[a], p)\n      }\n      else {\n        dst[a] = src[a]\n      }\n    }\n    else {\n      dst[a] = src[a]\n    }\n  }\n}\n\n/**\n * Fusionning 2 objects schema, returning new one\n * @param  {Object} dst Destination object\n * @param  {Object} src Source object\n * @return {Object}     New object\n */\nfunction fieldifyFusion (dst, src) {\n  const ret = {}\n\n  _specialClone(ret, dst)\n  _specialClone(ret, src)\n\n  return (ret)\n}\n\nmodule.exports = fieldifyFusion\n","const utils = require('./lib/utils')\nconst fusion = require('./lib/fusion')\nconst assign = require('./lib/assign')\nconst iterator = require('./lib/iterator')\nconst compile = require('./lib/compile')\nconst schema = require('./lib/schema')\nconst input = require('./lib/input')\nconst types = require('./lib/types')\nconst fieldifyType = require('./lib/types/type')\nconst pack = require('./package.json')\n\nmodule.exports = {\n  schema,\n  input,\n  types,\n  fusion,\n  assign,\n  iterator,\n  compile,\n  utils,\n  version: pack.version,\n\n  // this is a shortcut to retrieve the root object for types\n  fieldifyType\n}\n","const utils = require('./utils')\n\n/**\n  * Generator deep iterator is a complex function to assign a\n  * new struture of a current schema\n  * @param  {Object} schema Source schema to follow\n  * @param  {fieldifyAssignator~callback} leaf Executed on each leaf\n  * @param  {Mixed} user User pointer\n  * @param  {lkey} lkey Internal use\n  */\nfunction fieldifyAssignator (schema, leaf, user, lkey, first) {\n  const { nestedObject } = utils.getNO(schema)\n\n  var ret = {}\n\n  if (first === false) {\n    const lret = leaf(user, ret, schema, lkey)\n    if (lret === false) return (ret)\n  }\n\n  // follow the rest of keys\n  for (var a in nestedObject) {\n    const key = nestedObject[a][0]\n    const value = schema[key]\n\n    const save = lkey\n    lkey = lkey ? lkey + '.' + key : key\n    if (Array.isArray(value)) {\n      ret[key] = [fieldifyAssignator(value[0], leaf, user, lkey, false)]\n\n      // prune branch\n      if (Object.keys(ret[key][0]).length === 0) delete ret[key]\n    }\n    else {\n      ret[key] = fieldifyAssignator(value, leaf, user, lkey, false)\n\n      // prune the branch\n      if (Object.keys(ret[key]).length === 0) delete ret[key]\n    }\n\n    // restore state\n    lkey = save\n  }\n\n  if (first !== false) {\n    for (var key in ret) {\n      const ptr = ret[key]\n\n      if (typeof ptr === 'object' && Object.keys(ptr) === 0) {\n        delete ret[key]\n      }\n    }\n  }\n  return (ret)\n}\n\n/**\n * This callback is displayed as part of the Requester class.\n * @callback fieldifyAssignator~callback\n * @param {number} responseCode\n * @param {string} responseMessage\n */\n\nmodule.exports = fieldifyAssignator\n","const utils = require('./utils')\n\nclass fieldifyIteratorBuffer {\n  constructor (options) {\n    this.options = options\n    this.handler = options.handler\n    this.result = {}\n    this.level = 0\n\n    // correct callbacks\n    options.onAssign = options.onAssign || ((current, next) => {\n      // generic assignation\n      current.result[current.key] = current.input\n      next()\n    })\n    options.onEnter = options.onEnter || ((current) => { })\n    options.onLeave = options.onLeave || ((current) => { })\n    options.onEnd = options.onEnd || ((result) => { })\n  }\n\n  branch (schema, input, end, line) {\n    line = line || '.'\n    const no = utils.getNO(schema)\n    const result = {}\n    this.level++\n\n    // when entering in a branch\n    this.options.onEnter(schema)\n\n    // follow each element of the current branch\n    utils.eachItem(no.nestedObject, (index, ptr, next, oend) => {\n      if (oend === true) {\n        this.level--\n\n        // when leaving in a branch\n        this.options.onLeave(schema)\n\n        // initial level\n        if (this.level === 0) {\n          this.result = result\n          end(this, result)\n        }\n        // level up\n        else {\n          end(this, result)\n        }\n\n        return\n      }\n\n      const key = ptr[0]\n\n      const current = {\n        iterator: this,\n        key: key,\n        object: ptr[1],\n        input: input ? input[ptr[0]] : null,\n        line: line + key,\n        result: result\n      }\n\n      if (Array.isArray(current.object)) {\n        // this is an input error\n        if (!Array.isArray(current.input)) {\n          // here we reset the input as we have\n          // to follow all the schema\n          current.input = null\n\n          // here is a problem. the schema must\n          // be followed at least one time in\n          // order to reveal assignation errors\n          // and notabely required fields.\n          this.branch(\n            current.object[0],\n            null,\n            (useless, subResult) => {\n              next()\n            },\n            key\n          )\n        }\n        else {\n          // ok at this step we can follow the input\n          // as we are sure is it an array.\n          // Array is just a bridge between 2 branch.\n          const arrayResult = []\n          utils.eachItem(current.input, (index, ptr, next2, oend) => {\n            if (oend === true) {\n              // assign to result\n              if (arrayResult.length > 0) result[key] = arrayResult\n\n              // return to normal mode\n              next()\n\n              return\n            }\n\n            // management of array with direct and indirect assignment\n            const arraySchema = current.object[0]\n\n            if (arraySchema.$_nested === true) {\n              // this is an input error\n              if (typeof current.input !== 'object') {\n                // here we reset the input as we have\n                // to follow all the schema\n                ptr = null\n              }\n\n              // console.log(\"ARRAY NEST\", arraySchema, ptr)\n\n              // change branche because of nested branch\n              this.branch(\n                arraySchema,\n                ptr,\n                (useless, subResult) => {\n                  if (Object.keys(subResult).length > 0) arrayResult.push(subResult)\n                  next2()\n                },\n                key\n              )\n            }\n            // here we can get and compare values\n            else {\n              current.input = ptr\n\n              // console.log(\"ARRAY DIRECT\");\n\n              // creation of a shortcut on the access fields\n              current.access = arraySchema.$_access\n              current.result = {}\n\n              // execution of user assignment\n              this.options.onAssign(current, () => {\n                // store as array if there is result\n                const values = Object.values(current.result)\n                if (values.length > 0) {\n                  arrayResult.push(values[0])\n                }\n\n                next2()\n              })\n            }\n          })\n        }\n      }\n      // here the input must be an object\n      else if (current.object.$_nested === true) {\n        // this is an input error\n        if (typeof current.input !== 'object') {\n          // here we reset the input as we have\n          // to follow all the schema\n          current.input = null\n        }\n\n        this.branch(\n          current.object,\n          current.input,\n          (useless, subResult) => {\n            if (Object.keys(subResult).length > 0) result[key] = subResult\n            next()\n          },\n          key\n        )\n      }\n      // here we can get and compare values\n      else {\n        // put a shortcut\n        current.access = current.object.$_access\n\n        // execution of user assignment\n        this.options.onAssign(current, next)\n      }\n    })\n  }\n}\n\nfunction fieldifyIterator (options) {\n  const fib = new fieldifyIteratorBuffer(options)\n\n  fib.branch(options.handler.schema, options.input, () => {\n    // end user execution\n    fib.options.onEnd(fib)\n  })\n}\n\nmodule.exports = fieldifyIterator\n","const utils = require('./utils')\nconst fusion = require('./fusion')\n\nclass fieldifyHandler {\n  constructor (schema) {\n    this.orgSchema = schema\n    this.schema = fusion({}, schema)\n\n    this._access = {}\n    this._accessStack = []\n  }\n\n  branch (schema, line) {\n    line = line || ''\n    const no = utils.getNO(schema)\n\n    // construct options of the current branch\n    const tmpAccess = {}\n    for (var a in no.nestedOptions) {\n      const ptr = no.nestedOptions[a]\n      tmpAccess[ptr[0]] = ptr[1]\n    }\n\n    this._access = fusion(this._access, tmpAccess)\n\n    if (no.nestedObject.length > 0) schema.$_nested = true\n\n    for (var key in no.nestedObject) {\n      const ptrS = no.nestedObject[key]\n      const noIn = utils.getNO(ptrS[1])\n      const subLine = line.length > 0 ? line + '.' + ptrS[0] : ptrS[0]\n      var drive = ptrS[1]\n\n      // current key is an array\n      if (Array.isArray(ptrS[1])) {\n        drive = ptrS[1][0]\n        drive.$_array = true\n      }\n      // the current key is nested\n      else if (noIn.nestedObject.length > 0) {\n        drive.$_nested = true\n      }\n\n      // push on the stack current accesses\n      this._accessStack.push(this._access)\n\n      // remove useless private info\n      delete this._access.$_nested\n      delete this._access.$_array\n\n      // enter in the branch\n      this.branch(drive, subLine)\n\n      // set the current access\n      drive.$_access = this._access\n\n      // restore the state of access\n      this._access = this._accessStack.pop()\n    }\n  }\n}\n\nfunction fieldifyCompiler (schema) {\n  const fib = new fieldifyHandler(schema)\n\n  // process nested object\n  fib.branch(fib.schema)\n\n  //    console.log(JSON.stringify(fib.schema, null, \"\\t\"))\n\n  return (fib)\n}\n\nmodule.exports = fieldifyCompiler\n","const String = require('./String')\nconst Number = require('./Number')\nconst Select = require('./Select')\nconst Radio = require('./Radio')\nconst Name = require('./Name')\nconst Email = require('./Email')\nconst Checkbox = require('./Checkbox')\nconst Hash = require('./Hash')\nconst URL = require('./URL')\nconst DateTimePicker = require('./DateTimePicker')\nconst DatePicker = require('./DatePicker')\nconst DatePickerRange = require('./DatePickerRange')\nconst TimePicker = require('./TimePicker')\nconst TimePickerRange = require('./TimePickerRange')\nconst Slug = require('./Slug')\nconst Color = require('./Color')\nconst FieldName = require('./FieldName')\nconst KV = require('./KV')\n\nmodule.exports = {\n  String,\n  Number,\n  Select,\n  Radio,\n  Name,\n  Email,\n  Checkbox,\n  Hash,\n  URL,\n  DateTimePicker,\n  DatePicker,\n  DatePickerRange,\n  TimePicker,\n  TimePickerRange,\n  Slug,\n  Color,\n  FieldName,\n  KV\n}\n","\nconst fusion = require('./fusion')\nconst compile = require('./compile')\nconst iterator = require('./iterator')\nconst assign = require('./assign')\nconst utils = require('./utils')\nconst set = require('./set')\nconst types = require('./types')\n\n// const fieldifyTypes = require('@fieldify/types/esm')\nconst currentSet = 'F2020V1'\n\nclass fieldifySchema {\n  constructor (name, options) {\n    if (!options) options = {}\n\n    // the set must be previously loaded\n    if (options.set) this.set = set.get(currentSet)\n    else this.set = set.load(currentSet, types)\n\n    this.tree = options.tree || {}\n    this.policy = options.policy || {\n      required: false,\n      read: true,\n      write: true\n    }\n\n    // this.policy.required = this.policy.required === true\n    // this.policy.read = this.policy.read === true\n    // this.policy.write = this.policy.write === true\n  }\n\n  resolver (type) {\n    return (this.set[type])\n  }\n\n  fusion (schema) {\n    this.tree = fusion(this.tree, schema)\n  }\n\n  /**\n   * Compile the targetted schema\n   * @param {Object} schema The schema\n   */\n  compile (schema) {\n    if (schema) this.tree = schema\n\n    const localAssigner = (user, dst, object, source) => {\n      dst.$_key = ('.' + source).split('.').pop()\n\n      for (var a in object) dst[a] = object[a]\n\n      var typeClass = null\n\n      // the type is a string, use the resolver to retrieve\n      // the good object control\n      if (typeof object.$type === 'string') {\n        dst.$type = this.resolver(object.$type)\n        if (!dst.$type) {\n          console.error('Can not resolv type ' + object.$type)\n          return (true)\n        }\n        typeClass = dst.$type.class\n      }\n      else if (object.$type) {\n        typeClass = object.$type.class\n      }\n\n      // create the type with the desired options\n\n      dst.$_type = typeClass ? new typeClass(object.$options) : undefined\n      dst.$_wire = '.' + source\n\n      // apply default policy\n      // use with caution\n      if (user) {\n        dst.$_hidden = true\n        dst.$_wire = user + dst.$_wire\n      }\n\n      // here we apply policy with driven line\n      for (var key in this.policy) {\n        const rkey = '$' + key\n        const value = this.policy[key]\n\n        if (!(rkey in dst)) dst[rkey] = value\n      }\n\n      // sanatize options\n      if (!user && dst.$_type && object.$options) {\n        const correctedOptions = dst.$_type.sanatizeOptions(object.$options || {})\n        dst.$options = correctedOptions\n      }\n\n      return (true)\n    }\n\n    // here we store the \"original\" non type schematized use\n    // to work with lineup and to drive the flow of displaying\n    const nonTypeSchematized = assign(this.tree, localAssigner)\n\n    // extract the schematized types\n    // this will be use in background for verification\n    // and filtering\n    const typeSchematized = assign(nonTypeSchematized, (user, dst, object, source) => {\n      if (object.$_type && object.$_type.schematizer) {\n        const patch = object.$_type.schematizer(object)\n        if (patch !== null) {\n          for (var a in object) dst[a] = object[a]\n\n          // extract sub fields\n          const extract = assign(patch, localAssigner, object.$_wire)\n          for (var a in extract) dst[a] = extract[a]\n\n          dst.$_schematized = true\n        }\n        else for (var a in object) dst[a] = object[a]\n      }\n      else for (var a in object) dst[a] = object[a]\n\n      return (true)\n    })\n\n    // we will finally based the search on the assigned extraction\n    this.handler = compile(nonTypeSchematized, this.resolver.bind(this))\n    this.handlerSchematized = compile(typeSchematized, this.resolver.bind(this))\n  }\n\n  /**\n   * Export the current working schema\n   */\n  export (pv) {\n    const localAssigner = (user, dst, object, source) => {\n      if (object.$_hidden === true) return (true)\n\n      for (var a in object) {\n        if (utils.leafPrivate.test(a) && pv === true) {\n          dst[a] = object[a]\n        }\n        else if (utils.leaf.test(a) && utils.leafPrivate.test(a) === false && pv !== true) {\n          dst[a] = object[a]\n        }\n      }\n\n      if (typeof dst.$type !== 'string' && dst.$type) dst.$type = dst.$type.code\n\n      return (true)\n    }\n\n    //  prune and return\n    return (assign(this.handler.schema, localAssigner))\n  }\n\n  /**\n   * Verify User Input following Schema Definition\n   * @param {*} input User input\n   * @param {*} onEnd Function is async, fired when verification is done\n   */\n  verify (input, onEnd) {\n    const ret = {\n      error: false\n    }\n\n    const opts = {\n      handler: this.handlerSchematized,\n      input: input,\n\n      onAssign: (current, next) => {\n        // get different pointer we need\n        const { access, input } = current\n\n        // check if access schema has right to write\n        if (access.$write !== true) {\n          // do not response to avoid field discovery\n          // just ignore the field\n          // if user set required without then it\n          // will have logic conflict\n          return (next())\n        }\n\n        // check if the field is required\n        if (access.$required === true && input === undefined) {\n          ret.error = true\n          if (!ret.fields) ret.fields = {}\n          ret.fields[current.line] = 'Required Field'\n          return (next())\n        }\n        // in opposite, if the field is not required\n        // then we should not run the verifier\n        if (access.$required !== true && input === undefined) {\n          // just a pass through\n          return (next())\n        }\n\n        // run the type dependant verifier\n        if (access.$_type) {\n          access.$_type.verify(input, (error, message) => {\n            // there is error during verification\n            if (error === true) {\n              ret.error = true\n              if (!ret.fields) ret.fields = {}\n              ret.fields[current.line] = message\n              return (next())\n            }\n\n            // just assign value\n            current.result[current.key] = input\n            next()\n          })\n        }\n        else {\n          ret.error = true\n          if (!ret.fields) ret.fields = {}\n          ret.fields[current.line] = 'Need field interpretor'\n          return (next())\n        }\n      },\n\n      onEnd: (iterator) => {\n        ret.result = iterator.result\n        onEnd(ret)\n      }\n    }\n    iterator(opts)\n  }\n\n  /**\n   * Filter Database Output following Schema Definition\n   * @param {*} output\n   * @param {*} onEnd\n   */\n  filter (output, onEnd) {\n    if (Array.isArray(output)) {\n      const ret = {\n        error: false,\n        result: []\n      }\n      utils.eachItem(output, (index, ptr, next, oend) => {\n        if (oend === true) return (onEnd(ret))\n\n        // apply filter on each entry\n        this._filterLine(ptr, ({ result }) => {\n          ret.result.push(result)\n          next()\n        })\n      })\n    }\n    else {\n      this._filterLine(output, onEnd)\n    }\n  }\n\n  /**\n   * Encode the input data following fieldify schema\n   * @param {*} input\n   * @param {*} onEnd When operation is done\n   */\n  encode (input, onEnd) {\n    this.flow('encode', input, onEnd)\n  }\n\n  /**\n   * Decode the input data following fieldify schema\n   * @param {*} input\n   * @param {*} onEnd When operation is done\n   */\n  decode (input, onEnd) {\n    this.flow('decode', input, onEnd)\n  }\n\n  /**\n   * Execute type callback following the flow of the schema\n   * @param {String} direction The executed callback inside the type\n   * @param {*} input Input data\n   * @param {*} onEnd Called when finish to read\n   */\n  flow (direction, input, onEnd) {\n    const ret = {\n      error: false\n    }\n\n    const opts = {\n      handler: this.handlerSchematized,\n      input: input,\n\n      onAssign: (current, next) => {\n        // get different pointer we need\n        const { access, result, input } = current\n\n        // run the type dependant verifier\n        access.$_type[direction](input, (output) => {\n          // just assign value\n          result[current.key] = output\n          next()\n        })\n      },\n\n      onEnd: (iterator) => {\n        ret.result = iterator.result\n        onEnd(ret)\n      }\n    }\n    iterator(opts)\n  }\n\n  /**\n   * Get lineup allow to read the schema following a string\n   * @param {String} lineup String, field separate by points\n   * @param {Boolean} beforeLast Return the before last instead of the last one\n   * @returns {Object}\n   *\n   * The string must start with a point:\n   * getLineup(\".\") = get the root schema\n   * getLineup(\".fieldA.fieldB\")\n   */\n  getLineup (lineup, beforeLast) {\n    const fields = lineup.split('.')\n    fields.shift()\n\n    var bLast = this.handler.schema\n    var root = this.handler.schema\n    for (var a = 0; a < fields.length; a++) {\n      const field = fields[a]\n      var ptr = root[field]\n      bLast = root\n\n      if (Array.isArray(ptr)) ptr = ptr[0]\n\n      if (!ptr) return (beforeLast === true ? { beforeLast: bLast, last: null, fields } : null)\n      root = ptr\n    }\n\n    return (beforeLast === true ? { beforeLast: bLast, last: root, fields } : root)\n  }\n\n  /**\n   * Set an object in the schema following the lineup string\n   * @param {String} lineup\n   * @param {Object} obj\n   *\n   * The string must start with a point:\n   * setLineup(\".fieldA.fieldB\", {$type: Types.String})\n   */\n  setLineup (lineup, obj) {\n    const root = this.getLineup(lineup, true)\n    const injection = root.beforeLast\n    const key = root.fields[root.fields.length - 1]\n\n    if (!injection) return (false)\n\n    // inject the field as it into the schema\n    injection[key] = obj\n\n    // during the injection and to avoid recompilation\n    // we will dynamically resolv the type\n    if (obj.$type && typeof obj.$type === 'string') {\n      obj.$type = this.resolver(obj.$type)\n    }\n\n    return (true)\n  }\n\n  /**\n   * Rename a line up\n   * @param {String} oldLineup\n   * @param {String} newLineup\n   */\n  renameLineup (oldLineup, newLineup) {\n    // get old lineup info\n    const root = this.getLineup(oldLineup, true)\n    const injection = root.beforeLast\n    const key = root.fields[root.fields.length - 1]\n    const saved = injection[key]\n\n    if (!injection || !saved) return (false)\n\n    // prepare new lineup\n    const fields = newLineup.split('.')\n    fields.shift()\n    const newKey = fields[fields.length - 1]\n\n    if (!newKey) return (false)\n\n    // restore on the new place\n    injection[newKey] = saved\n\n    return (true)\n  }\n\n  /**\n   * Remove object (and everything else) following the lineup String\n   * @param {String} lineup\n   */\n  removeLineup (lineup) {\n    const root = this.getLineup(lineup, true)\n    const injection = root.beforeLast\n    const key = root.fields[root.fields.length - 1]\n\n    if (!injection) return (false)\n\n    // inject the field as it into the schema\n    delete injection[key]\n\n    return (true)\n  }\n\n  _filterLine (input, onEnd) {\n    const ret = {\n      error: false\n    }\n\n    const opts = {\n      handler: this.handlerSchematized,\n      input: input,\n\n      onAssign: (current, next) => {\n        // get different pointer we need\n        const { access, result, input } = current\n\n        // check if access schema has right to write\n        if (access.$read !== true) {\n          // do not response to avoid field discovery\n          // just ignore the field\n          // if user set required without then it\n          // will have logic conflict\n          return (next())\n        }\n\n        // run the type dependant verifier\n        access.$_type.filter(input, (valid, message) => {\n          if (valid !== true) {\n            return (next())\n          }\n\n          // just assign value\n          result[current.key] = input\n          next()\n        })\n      },\n\n      onEnd: (iterator) => {\n        ret.result = iterator.result\n        onEnd(ret)\n      }\n    }\n    iterator(opts)\n  }\n}\n\nmodule.exports = fieldifySchema\n","\nclass fieldifySet {\n  constructor () {\n    this.sets = {}\n  }\n\n  load (name, fields) {\n    if (this.sets[name]) return (this.sets[name])\n\n    this.sets[name] = fields\n\n    // load fields\n\n    return (this.sets[name])\n  }\n\n  get (name) {\n    return (this.sets[name])\n  }\n}\n\n// one global instance\nmodule.exports = new fieldifySet()\n","const signderivaType = require('./type')\n\nconst strictRegex = /`|~|!|@|#|\\$|%|\\^|&|\\*|\\(|\\)|\\+|=|\\[|\\{|\\]|\\}|\\||\\\\|'|<|,|\\.|>|\\?|\\/|\"|;|:/gm\n\nconst noUnicodeRegex = /^[a-z0-9\\-_\\s]+$/i\n\nconst exported = {\n  code: 'String',\n  description: 'String of characters'\n}\n\nclass signderivaTypeString extends signderivaType {\n  verify (input, cb) {\n    if (typeof input !== 'string') {\n      return (cb(true, 'Not a string'))\n    }\n\n    if ('min' in this.options && input.length < this.options.min) {\n      return (cb(true, `String is too short (min: ${this.options.min})`))\n    }\n\n    if ('max' in this.options && input.length > this.options.max) {\n      return (cb(true, `String is too long (max: ${this.options.max})`))\n    }\n\n    if (this.options.strict === true && input.match(strictRegex)) {\n      return (cb(true, 'Forbidden special chars'))\n    }\n\n    if (this.options.unicode !== true && !noUnicodeRegex.test(input)) {\n      return (cb(true, 'Unicode is forbidden'))\n    }\n\n    cb(false)\n  }\n\n  configuration () {\n    return ({\n      placeholder: {\n        $doc: 'Field placeholder',\n        $required: false,\n        $type: 'String'\n      },\n      help: {\n        $doc: 'Help / Bottom message',\n        $required: false,\n        $type: 'String'\n      },\n      min: {\n        $doc: 'Minimun length',\n        $required: false,\n        $type: 'Number',\n        $options: {\n          default: 1\n        }\n      },\n      max: {\n        $doc: 'Maximun length',\n        $required: false,\n        $type: 'Number',\n        $options: {\n          default: 256\n        }\n      },\n      strict: {\n        $doc: 'Strict Mode',\n        $help: 'Specials Chars Are Forbidden',\n        $required: false,\n        $type: 'Checkbox',\n        $options: {\n          default: false\n        }\n      },\n      unicode: {\n        $doc: 'Accept Unicode',\n        $help: 'Accept Char From Different Languages',\n        $required: false,\n        $type: 'Checkbox',\n        $options: {\n          default: true\n        }\n      }\n    })\n  }\n}\n\nexported.class = signderivaTypeString\nmodule.exports = exported\n","const signderivaType = require('./type')\n\n// const noUnicodeRegex = /^[0-9]+$/i\n\nconst exported = {\n  code: 'Number',\n  description: 'Various Numbers'\n}\n\nfunction isInt (n) {\n  return n % 1 === 0\n}\n\nclass signderivaTypeNumber extends signderivaType {\n  verify (input, cb) {\n    if (isNaN(input)) return (cb(true, 'Not a number'))\n\n    if (typeof input === 'string') input = parseInt(input)\n\n    const integer = isInt(input)\n\n    // if (this.options.unicode === false && !noUnicodeRegex.test(input)) {\n    //   return (cb(true, 'Unicode is forbidden'))\n    // }\n\n    cb(false)\n  }\n\n  // sanatizeOptions (input) {\n  //   const output = {\n  //     // placeholder: typeof input.placeholder === 'string' ? input.placeholder : undefined,\n  //     // help: typeof input.help === 'string' ? input.help : undefined,\n  //     // min: typeof input.min === 'number' ? input.min : undefined,\n  //     // max: typeof input.max === 'number' ? input.max : undefined,\n  //     // strict: typeof input.strict === 'boolean' ? input.strict : undefined,\n  //     // unicode: typeof input.unicode === 'boolean' ? input.unicode : undefined\n  //   }\n  //   return (output)\n  // }\n\n  configuration () {\n    return ({\n      acceptedTypes: {\n        $doc: 'What kind of number to accept',\n        $required: true,\n        $type: 'Select',\n        $options: {\n          default: 'both',\n          items: {\n            both: 'Both Integer & Float',\n            integer: 'Only Integer',\n            float: 'Only Float'\n          }\n        }\n      }\n    })\n  }\n}\n\nexported.class = signderivaTypeNumber\nmodule.exports = exported\n","const fieldifyType = require('./type')\n\nclass fieldifyTypeSelector extends fieldifyType {\n  sanatizeOptions (input) {\n    const output = {\n      placeholder: typeof input.placeholder === 'string' ? input.placeholder : undefined,\n      help: typeof input.help === 'string' ? input.help : undefined,\n      default: typeof input.default === 'string' ? input.default : undefined,\n      items: typeof input.items === 'object' ? input.items : undefined\n    }\n    return (output)\n  }\n\n  configuration () {\n    return ({\n      default: {\n        $doc: 'Default selection (key)',\n        $required: false,\n        $type: 'String'\n      },\n      items: {\n        $doc: 'Items in selector',\n        $required: true,\n        $type: 'KV'\n      }\n    })\n  }\n}\n\nmodule.exports = {\n  code: 'Select',\n  description: 'Selector',\n  class: fieldifyTypeSelector\n}\n","const fieldifyType = require('./type')\n\nclass fieldifyTypeRadio extends fieldifyType {\n  // sanatizeOptions (input) {\n  //   const output = {\n  //     placeholder: typeof input.placeholder === 'string' ? input.placeholder : undefined,\n  //     help: typeof input.help === 'string' ? input.help : undefined,\n  //     default: typeof input.default === 'string' ? input.default : undefined,\n  //     items: typeof input.items === 'object' ? input.items : undefined\n  //   }\n  //   return (output)\n  // }\n\n  configuration () {\n    return ({\n      default: {\n        $doc: 'Default selection (key)',\n        $required: false,\n        $type: 'String'\n      },\n      items: {\n        $doc: 'Items in selector',\n        $required: true,\n        $type: 'KV'\n      },\n      horizontal: {\n        $doc: 'Horizontal',\n        $required: false,\n        $type: 'Checkbox'\n      }\n    })\n  }\n}\n\nmodule.exports = {\n  code: 'Radio',\n  description: 'Radio Selector',\n  class: fieldifyTypeRadio\n}\n","const signderivaType = require('./type')\n\nclass signderivaTypeName extends signderivaType {\n  schematizer () {\n    return ({\n      first: {\n        $type: 'String',\n        $options: {\n          strict: true,\n          min: 2,\n          max: 128,\n          unicode: true\n        }\n      },\n      last: {\n        $type: 'String',\n        $options: {\n          strict: true,\n          min: 2,\n          max: 128,\n          unicode: true\n        }\n      }\n    })\n  }\n}\n\nmodule.exports = {\n  code: 'Name',\n  description: 'Name (first and last name)',\n  class: signderivaTypeName\n}\n","const signderivaType = require('./type')\n\n// eslint-disable-next-line no-control-regex\nconst regex = /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/\n\nclass signderivaTypeEmailAddress extends signderivaType {\n  verify (input, cb) {\n    if (typeof input !== 'string') {\n      return (cb(true, 'Not an e-mail'))\n    }\n\n    const ret = regex.test(input)\n    if (ret !== true) return (cb(true, 'Invalid e-mail address'))\n\n    return (cb(false))\n  }\n\n  encode (input, cb) {\n    input = input.toLowerCase()\n    if (cb) cb(input)\n    return (input)\n  }\n}\n\nmodule.exports = {\n  code: 'Email',\n  description: 'E-mail address',\n  class: signderivaTypeEmailAddress\n}\n","const fieldifyType = require('./type')\n\nclass fieldifyTypeCheckbox extends fieldifyType {\n  configuration () {\n    return ({\n      placeholder: {\n        $doc: 'Field placeholder',\n        $required: false,\n        $type: 'String'\n      }\n    })\n  }\n}\n\nmodule.exports = {\n  code: 'Checkbox',\n  description: 'Checkbox Options',\n  class: fieldifyTypeCheckbox\n}\n","const signderivaType = require('./type')\n\n// Support\n// SHA1\n// SHA256 < default\n// SHA512\n\nconst _sha1 = /\\b[0-9a-f]{5,40}\\b/\nconst _sha256 = /\\b[A-Fa-f0-9]{64}\\b/\nconst _sha512 = /\\b[A-Fa-f0-9]{128}\\b/\n\nclass signderivaTypeHash extends signderivaType {\n  constructor (options) {\n    super(options)\n\n    switch (this.options.mode) {\n      case 'sha1':\n        this.verify = this.sha1Verifier.bind(this)\n        break\n\n      default:\n      case 'sha256':\n        this.verify = this.sha256Verifier.bind(this)\n        break\n\n      case 'sha512':\n        this.verify = this.sha512Verifier.bind(this)\n        break\n    }\n  }\n\n  sha1Verifier (input, cb) {\n    if (!input) return (cb(true, 'Not a string'))\n    const ret = _sha1.test(input)\n    if (ret !== true) return (cb(true, 'Not a SHA1 Hash'))\n    return (cb(false))\n  }\n\n  sha256Verifier (input, cb) {\n    if (!input) return (cb(true, 'Not a string'))\n    const ret = _sha256.test(input)\n    if (ret !== true) return (cb(true, 'Not a SHA256 Hash'))\n    return (cb(false))\n  }\n\n  sha512Verifier (input, cb) {\n    if (!input) return (cb(true, 'Not a string'))\n    const ret = _sha512.test(input)\n    if (ret !== true) return (cb(true, 'Not a SHA512 Hash'))\n    return (cb(false))\n  }\n\n  configuration () {\n    return ({\n      mode: {\n        $doc: 'Awaited hash type',\n        $required: false,\n        $type: 'Select',\n        $options: {\n          default: 'sha256',\n          items: {\n            sha1: 'SHA1',\n            sha256: 'SHA256',\n            sha512: 'SHA512'\n          }\n        }\n      }\n    })\n  }\n}\n\nmodule.exports = {\n  code: 'Hash',\n  description: 'Computer Hash',\n  class: signderivaTypeHash\n}\n","const signderivaType = require('./type')\n\n// Support\n// SHA1\n// SHA256 < default\n// SHA512\n\n// eslint-disable-next-line no-useless-escape\nconst regex = /^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$/g\n\nclass signderivaTypeURL extends signderivaType {\n  constructor (options) {\n    super(options)\n\n    if (!this.options.maxLength) this.options.maxLength = 256\n    if (!this.options.minLength) this.options.minLength = 8\n  }\n\n  verifier (input, cb) {\n    if (!input) {\n      if (cb) cb(false)\n      return (false)\n    }\n\n    if (typeof input !== 'string') {\n      if (cb) cb(false)\n      return (false)\n    }\n\n    if (input.length <= 0 || input.length > this.options.maxLength) {\n      if (cb) cb(false)\n      return (false)\n    }\n\n    const ret = regex.test(input)\n    if (cb) cb(ret)\n    return (ret)\n  }\n}\n\nmodule.exports = {\n  code: 'URL',\n  description: 'URL',\n  class: signderivaTypeURL\n}\n","const signderivaType = require('./type')\n\nclass signderivaTypeDateTimePicker extends signderivaType {\n\n}\n\nmodule.exports = {\n  code: 'DateTimePicker',\n  description: 'Date & Time Picker',\n  class: signderivaTypeDateTimePicker\n}\n","const signderivaType = require('./type')\n\nclass signderivaTypeDatePicker extends signderivaType {\n\n}\n\nmodule.exports = {\n  code: 'DatePicker',\n  description: 'Date Picker',\n  class: signderivaTypeDatePicker\n}\n","const signderivaType = require('./type')\n\nclass signderivaTypeDatePickerRange extends signderivaType {\n  schematizer () {\n    return ({\n      from: {\n        $type: 'DatePicker'\n      },\n      to: {\n        $type: 'DatePicker'\n      }\n    })\n  }\n}\n\nmodule.exports = {\n  code: 'DatePickerRange',\n  description: 'Date Picker Range',\n  class: signderivaTypeDatePickerRange\n}\n","const signderivaType = require('./type')\n\nclass signderivaTypeTimePicker extends signderivaType {\n\n}\n\nmodule.exports = {\n  code: 'TimePicker',\n  description: 'Time Picker',\n  class: signderivaTypeTimePicker\n}\n","const signderivaType = require('./type')\n\nclass signderivaTypeTimePickerRange extends signderivaType {\n  schematizer () {\n    return ({\n      from: {\n        $type: 'TimePicker'\n      },\n      to: {\n        $type: 'TimePicker'\n      }\n    })\n  }\n}\n\nmodule.exports = {\n  code: 'TimePickerRange',\n  description: 'Time PickerRange',\n  class: signderivaTypeTimePickerRange\n}\n","const signderivaType = require('./type')\n\nconst regex = /^[a-z0-9]+(?:-[a-z0-9]+)*$/g\n\nclass signderivaTypeSlug extends signderivaType {\n  verifier (input, cb) {\n    if (!input) {\n      if (cb) cb(false)\n      return (false)\n    }\n\n    if (typeof input !== 'string') {\n      if (cb) cb(false)\n      return (false)\n    }\n\n    const ret = regex.test(input)\n    if (cb) cb(ret)\n    return (ret)\n  }\n}\n\nmodule.exports = {\n  code: 'Slug',\n  description: 'Slug name',\n  class: signderivaTypeSlug\n}\n","const signderivaType = require('./type')\n\nconst regex = /^((0x){0,1}|#{0,1})([0-9A-F]{8}|[0-9A-F]{6})$/ig\n\nclass signderivaTypeColor extends signderivaType {\n  verifier (input, cb) {\n    if (!input) {\n      if (cb) cb(false)\n      return (false)\n    }\n\n    if (typeof input !== 'string') {\n      if (cb) cb(false)\n      return (false)\n    }\n\n    const ret = regex.test(input)\n    if (cb) cb(ret)\n    return (ret)\n  }\n}\n\nmodule.exports = {\n  code: 'Color',\n  description: 'HTML Color',\n  class: signderivaTypeColor\n}\n","const fieldifyType = require('./type')\n\nconst regex = /^([a-z0-9\\-]+)$/i\n\nclass fieldifyTypeFieldName extends fieldifyType {\n  verify (input, cb) {\n    if (!input) {\n      return (cb(true))\n    }\n\n    if (typeof input !== 'string') {\n      return (cb(true, 'Not a string'))\n    }\n\n    const ret = regex.test(input)\n    if (!ret) return (cb(true, 'Forbidden special chars'))\n\n    return (cb(false))\n  }\n}\n\nmodule.exports = {\n  code: 'FieldName',\n  description: 'Restricted Field Name',\n  class: fieldifyTypeFieldName\n}\n","const signderivaType = require('./type')\n\nconst regex = /^([a-z0-9]+)$/i\n\nclass signderivaTypeKV extends signderivaType {\n  verify (input, cb) {\n    if (!input || typeof input !== 'object' || input.constructor.name !== 'Object') {\n      return (cb(true, 'Not a KV'))\n    }\n\n    for (var key in input) {\n      // const value = input[key]\n\n      // verify the key\n      const ret = regex.test(key)\n      if (!ret) return (cb(true, 'Invalid key name ' + key))\n    }\n\n    cb(false)\n  }\n\n  // sanatizeOptions (input) {\n  //   const output = {\n  //     placeholder: typeof input.placeholder === 'string' ? input.placeholder : undefined,\n  //     help: typeof input.help === 'string' ? input.help : undefined,\n  //     min: typeof input.min === 'number' ? input.min : undefined,\n  //     max: typeof input.max === 'number' ? input.max : undefined,\n  //     strict: typeof input.strict === 'boolean' ? input.strict : undefined,\n  //     unicode: typeof input.unicode === 'boolean' ? input.unicode : undefined\n  //   }\n  //   return (output)\n  // }\n\n  configuration () {\n    return ({\n      min: {\n        $doc: 'Minimun of items',\n        $required: false,\n        $type: 'Number',\n        $options: {\n          acceptedTypes: 'integer'\n        }\n      },\n      max: {\n        $doc: 'Maximun of items',\n        $required: false,\n        $type: 'Number',\n        $options: {\n          acceptedTypes: 'integer'\n        }\n      }\n    })\n  }\n}\n\nmodule.exports = {\n  code: 'KV',\n  description: 'Object with single Key / Value',\n  class: signderivaTypeKV\n}\n","\n// const fusion = require('./fusion')\n// const compile = require('./compile')\n// const iterator = require('./iterator')\n// const assign = require('./assign')\n// const utils = require('./utils')\n\nclass fieldifyInput {\n  constructor (schema, value) {\n    this.schema = schema\n    this._value = value || {}\n    this.verifying = false\n  }\n\n  setValue (input) {\n    this._value = input\n  }\n\n  getValue () {\n    return (this._value)\n  }\n\n  verify (cb) {\n    this.schema.verify(this._value, cb)\n  }\n\n  reset () {\n    this._value = {}\n  }\n\n  set (line, data) {\n    const node = this.get(line, true)\n    if (node) node.input[node.fields[node.fields.length - 1]] = data\n  }\n\n  get (line, create) {\n    const fields = line.split('.')\n    fields.shift()\n\n    var schema = this.schema.handler.schema\n    var input = this._value\n    var schemaCur, inputCur\n\n    // align integers in field name\n    for (var a = 0; a < fields.length; a++) {\n      var field = fields[a]\n      if (!isNaN(field)) {\n        field = parseInt(field)\n        fields[a] = field\n      }\n    }\n\n    // horizontal read\n    var inArray = null\n    schemaCur = schema\n    for (var a = 0; a < fields.length - 1; a++) {\n      var field = fields[a]\n\n      schemaCur = schema[field]\n      inputCur = input[field]\n\n      if (Array.isArray(schemaCur)) {\n        inArray = schemaCur[0]\n\n        // check whether input is ready for array\n        if (!inputCur || !Array.isArray(inputCur)) {\n          // malformed input\n          if (create !== true) return (null)\n\n          // reconstruct the input\n          input[field] = []\n        }\n\n        // swap schema and input\n        inputCur = input[field]\n        schema = schemaCur\n        input = inputCur\n\n        // dont need to go away\n        continue\n      }\n\n      if (inArray) {\n        if (isNaN(field)) return (null)\n        field = parseInt(field)\n        schemaCur = inArray\n      }\n\n      if (!schemaCur) {\n        return (null)\n      }\n\n      // no input found for this entry\n      // initialize it\n      inputCur = input[field]\n\n      // awaiting nested in input\n      if (schemaCur.$_nested === true || (inArray && inArray.$_nested === true)) {\n        if (!inputCur || typeof inputCur !== 'object' || inputCur.constructor.name !== 'Object') {\n          if (create === true) input[field] = {}\n          else return (null)\n        }\n      }\n\n      inputCur = input[field]\n\n      if (!inputCur && create !== true) return (null)\n\n      // swap schema and input\n      schema = schemaCur\n      input = inputCur\n      inArray = null\n    }\n\n    // console.log(\"will write at\", input)\n\n    return ({ schema, input, fields })\n\n    // return (null)\n  }\n\n  remove (line) {\n    const node = this.get(line)\n    if (node) {\n      const key = node.fields[node.fields.length - 1]\n      if (Array.isArray(node.input)) node.input.splice(key, 1)\n      else delete node.input[node.fields[node.fields.length - 1]]\n    }\n  }\n}\n\nmodule.exports = fieldifyInput\n","module.exports = class fieldifyType {\n  constructor (options) {\n    this.options = options || {}\n  }\n\n  encode (input, cb) {\n    if (cb) cb(input)\n    return (input)\n  }\n\n  decode (input, cb) {\n    if (cb) cb(input)\n    return (input)\n  }\n\n  verify (input, cb) {\n    if (cb) cb(false)\n    return (false)\n  }\n\n  filter (input, cb) {\n    if (cb) cb(true)\n    return (true)\n  }\n\n  schematizer () {\n    return (null)\n  }\n\n  configuration () {\n    return (null)\n  }\n\n  // will be auto generate from configuration\n  sanatizeOptions (input) {\n    return (input)\n  }\n}\n","import React from 'react'\n\n\nimport { Schema, Types, Input, Version as faVersion } from '@fieldify/antd'\n\nimport { Row, Col, Card, Tabs, Tag, Form, Radio, Divider } from 'antd';\n\nimport \"antd/dist/antd.css\";\nimport { fieldifyType, version as fVersion } from 'fieldify';\n\nconst {\n  FieldifySchemaBuilder,\n  FieldifySchema,\n  FieldifySchemaForm,\n  FieldifySchemaRender\n} = Schema\n\nconst { TabPane } = Tabs\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    const initial = {\n      // \"fds\": {\n      //   \"$type\": \"Hash\",\n      //   \"$doc\": \"ffre\",\n      //   \"$position\": 0,\n      //   \"$options\": {\n      //     \"mode\": \"sha512\"\n      //   },\n      //   \"$required\": false,\n      //   \"$read\": true,\n      //   \"$write\": true\n      // },\n      \"cdsacdsa\": {\n        \"$type\": \"String\",\n        \"$position\": 0,\n        \"$options\": {\n          \"placeholder\": \"cdsa\",\n          \"help\": \"cdsa\",\n          \"min\": 321,\n          \"max\": 32132\n        },\n        \"$required\": false,\n        \"$read\": true,\n        \"$write\": true\n      },\n\n      \"DateTimePicker\": {\n        \"$type\": \"DateTimePicker\",\n        \"$doc\": \"DateTimePicker\",\n      },\n\n      \"DatePicker\": {\n        \"$type\": \"DatePicker\",\n        \"$doc\": \"DatePicker\"\n      },\n      \"DatePickerRange\": {\n        \"$type\": \"DatePickerRange\",\n        \"$doc\": \"DatePickerRange\"\n      },\n\n      \"TimePicker\": {\n        \"$type\": \"TimePicker\",\n        \"$doc\": \"TimePicker\"\n      },\n      \"TimePickerRange\": {\n        \"$type\": \"TimePickerRange\",\n        \"$doc\": \"TimePickerRange\"\n      },\n\n      \"lala\": {\n        \"$type\": \"Radio\",\n        \"$doc\": \"Radio description\",\n        \"$position\": 1,\n        \"$options\": {\n          \"default\": \"1\",\n          \"items\": {\n            \"1\": \"Une cle\",\n            \"2\": \"2 Cle\",\n            \"3\": \"key 3\"\n          },\n          \"horizontal\": true\n        }\n      }\n      // \"checkbox\": {\n      //   \"$type\": \"Checkbox\",\n      //   \"$doc\": \"Ceci est une case a cocher\"\n      // }\n    }\n\n    this.state = this.cycle({\n      schema: initial,\n      input: {}\n    }, true)\n  }\n\n  cycle(props, first) {\n\n    const state = {\n      schema: props.schema,\n      input: props.input,\n      inputRender: { ...props.input },\n\n      form: {\n        layout: \"horizontal\",\n        json: JSON.stringify(props.input, null, \"  \"),\n        state: \"Filling\",\n        color: \"blue\"\n      },\n      builder: {\n        json: JSON.stringify(props.schema, null, \"  \")\n      },\n      render: {\n        layout: \"horizontal\"\n      }\n    }\n\n    return (state)\n  }\n\n\n  builderChanged(schema) {\n    const state = {\n      schema: schema,\n      builder: {\n        json: JSON.stringify(schema, null, \"  \")\n      }\n    }\n\n    this.setState(state)\n  }\n\n  formChanged(input, value) {\n    // run the verifier on each change to \n    // get the status into the title\n\n    input.verify((result) => {\n\n      const state = {\n        inputRender: { ...result.result },\n        form: {\n          layout: this.state.form.layout,\n          data: result.result,\n          json: JSON.stringify(value, null, \"  \")\n        }\n      }\n\n      if (result.error === true) {\n        state.form.color = \"orange\"\n        state.form.state = \"Verify Failed\"\n      }\n      else {\n        state.form.color = \"green\"\n        state.form.state = \"Passed\"\n      }\n\n      this.setState(state)\n    })\n  }\n\n  render() {\n    const style = { padding: '8px', };\n\n    return <div style={{ width: \"100%\" }}>\n      <h1>Welcome in @fieldify/antd</h1>\n  <small>Fieldify Engine v{fVersion} / Fieldify For antd v{faVersion}</small>\n      <h2>Schema Builder</h2>\n\n      <Row>\n        <Col sm={12} xxl={8}>\n          <div style={style}>\n            <Card size=\"small\" title=\"Pass #1 - Building\">\n              <Tabs defaultActiveKey=\"1\">\n                <TabPane tab=\"Visual Editor\" key=\"1\">\n                  <FieldifySchemaBuilder schema={this.state.schema} onChange={this.builderChanged.bind(this)} />\n                </TabPane>\n                <TabPane tab=\"JSON Schema\" key=\"2\">\n                  <pre>\n                    {this.state.builder.json}\n                  </pre>\n                </TabPane>\n              </Tabs>\n            </Card>\n          </div>\n        </Col>\n        <Col sm={12} xxl={8}>\n          <div style={style}>\n            <Card size=\"small\" title={<>Pass #2 - Filling Form <Tag color={this.state.form.color}>{this.state.form.state}</Tag></>}>\n              <Tabs defaultActiveKey=\"1\">\n                <TabPane tab=\"Visual Rendering\" key=\"1\">\n                  <Form>\n                    <Form.Item label=\"Form Layout\" name=\"layout\">\n                      <Radio.Group\n                        value={this.state.form.layout}\n                        onChange={({ target }) => {\n                          this.setState({ form: { ...this.state.form, layout: target.value } })\n                        }}\n                      >\n                        <Radio.Button value=\"horizontal\">Horizontal</Radio.Button>\n                        <Radio.Button value=\"vertical\">Vertical</Radio.Button>\n                        <Radio.Button value=\"inline\">Inline</Radio.Button>\n                      </Radio.Group>\n                    </Form.Item>\n                  </Form>\n                  <Divider />\n                  <FieldifySchemaForm schema={this.state.schema} input={this.state.input} layout={this.state.form.layout} onChange={this.formChanged.bind(this)} />\n                </TabPane>\n                <TabPane tab=\"Sanatized JSON Input\" key=\"2\">\n                  <pre>\n                    {this.state.form.json}\n                  </pre>\n                </TabPane>\n              </Tabs>\n            </Card>\n          </div>\n        </Col>\n        <Col sm={12} xxl={8}>\n          <div style={style}>\n            <Card size=\"small\" title=\"Pass #3 - Final Result\">\n              <Form>\n                <Form.Item label=\"Form Layout\" name=\"layout\">\n                  <Radio.Group\n                    value={this.state.render.layout}\n                    onChange={({ target }) => this.setState({ render: { layout: target.value } })}\n                  >\n                    <Radio.Button value=\"horizontal\">Horizontal</Radio.Button>\n                    <Radio.Button value=\"vertical\">Vertical</Radio.Button>\n                    <Radio.Button value=\"inline\">Inline</Radio.Button>\n                  </Radio.Group>\n                </Form.Item>\n              </Form>\n              <Divider />\n              <FieldifySchemaRender schema={this.state.schema} input={this.state.inputRender} layout={this.state.render.layout} />\n            </Card>\n          </div>\n        </Col>\n      </Row>\n    </div>\n  }\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}