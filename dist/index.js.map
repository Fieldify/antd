{"version":3,"file":"index.js","sources":["../src/lib/TypeForm.js","../src/lib/TypeInfo.js","../src/lib/TypeBuilder.js","../src/Types/String.js","../src/Types/Name.js","../src/Types/Email.js","../src/Types/Checkbox.js","../src/Types/Select.js","../src/Types/FieldName.js","../src/Types.js","../src/Schema/Schema.js","../src/Schema/Form.js","../src/Schema/BuilderModal.js","../src/Schema/Builder.js","../src/Schema.js","../src/index.js"],"sourcesContent":["import React, { Component } from 'react';\nimport {\n  Col,\n  Row,\n  Form\n} from \"antd\";\n\nexport default class FieldifyTypeForm extends Component {\n  constructor(props) {\n    super(props)\n    this.state = this.cycle(props)\n\n    if (props.verify === true) {\n      this.verify(props.value, (ret) => {\n        this.state = { ...this.state, ...ret }\n      })\n    }\n  }\n\n\n  componentDidUpdate(props, state) {\n    if (this.props !== props) {\n      const cycle = this.cycle(this.props);\n\n      // // verify information\n      // if (cycle.verify === true) {\n      //   this.changeValue(cycle.value, 50)\n\n      // }\n\n      this.setState(cycle)\n    }\n  }\n\n  cycle(props) {\n    this.schema = props.schema;\n\n    const state = {\n      value: props.value,\n      verify: props.verify,\n      feedback: false,\n      status: null,\n      help: this.schema.$help\n    }\n\n    this.isInjected = props.isInjected;\n\n    this.onChanged = props.onChange ? props.onChange : () => { };\n    this.onError = props.onError ? props.onError : () => { };\n\n    if (!this.schema) return (state)\n\n    state.options = this.schema.$options || {};\n    this.handler = this.schema.$_type;\n\n    return (state)\n  }\n\n  timedChange(cb, speed) {\n    if (this._changeTimer) {\n      this._changeTimerQueue++;\n      this._changeTimerCb = cb;\n      return;\n    }\n\n    cb = cb || this._changeTimerCb;\n    if (!cb) return;\n\n    delete this._changeTimerCb;\n    this._changeTimerQueue = 0;\n    this._changeTimer = setTimeout(() => {\n      cb(() => {\n        delete this._changeTimer;\n\n        // update in queue ?\n        if (this._changeTimerQueue > 0) {\n          this.timedChange(cb, speed);\n        }\n      })\n    }, speed)\n  }\n\n  changeValue(value, speed) {\n    speed = speed || 500;\n\n    this.setState({\n      value: value\n    })\n\n    this._lastValue = value;\n\n    this.timedChange((end) => {\n      this.verify(this._lastValue, (ret) => {\n        this.setState(ret);\n\n        if (ret.error !== \"success\") {\n          end();\n          return;\n        }\n\n        this.onChanged(value);\n        end();\n      })\n    }, speed)\n  }\n\n  verify(value, cb) {\n    this.handler.verify(value, (error, message) => {\n      if (error === false) {\n        this.onError(false);\n        return (cb({\n          status: \"success\",\n          feedback: true,\n          help: null\n        }));\n      }\n\n      \n      this.onError(true, message);\n      return (cb({\n        status: \"error\",\n        feedback: true,\n        help: message\n      }))\n    })\n  }\n\n\n  render(children) {\n    // return(children)\n\n    if (!this.schema || this.isInjected === true) return (\n      <Form.Item\n        label={this.schema.$doc}\n        required={this.schema.$required}\n        validateStatus={this.state.status}\n        hasFeedback={this.state.feedback}\n        help={this.state.help}\n        style={{ marginBottom: \"0px\" }}\n        wrapperCol={{ sm: 24 }}\n      >\n        {children}\n      </Form.Item>\n    )\n\n    return (\n      <Form.Item\n        label={this.schema.$doc}\n        required={this.schema.$required}\n        validateStatus={this.state.status}\n        hasFeedback={this.state.feedback}\n        help={this.state.help}\n        style={{ marginBottom: \"8px\" }}\n        wrapperCol={{ sm: 24 }}\n      >\n        {children}\n      </Form.Item>\n    )\n  }\n}\n\n","import { Component } from 'react';\n\nexport default class SignderivaTypeInfo extends Component {\n  constructor(props) {\n    super(props)\n    this.props = props;\n    if (props.match) this.path = props.match.path;\n    this.state = {}\n  }\n\n\n  componentDidUpdate(prevProps, prevState) {\n    const pNew = this.props.schema || {};\n    const pOld = prevProps.schema || {};\n    // console.log(\"SignderivaTypeInfo.update\", pOld, pNew)\n  }\n\n}\n\n","import { Component } from 'react';\n\nexport default class SignderivaTypeBuilder extends Component {\n  constructor(props) {\n    super(props);\n    this.props = props;\n    this.onChange = props.onChange ? props.onChange : () => { };\n\n    if (props.match) this.path = props.match.path;\n\n    this.state = { ...props.options };\n\n    this.default = {};\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const pNew = this.props.options || {};\n    const pOld = prevProps.options || {};\n    \n    var changed = 0;\n    for (var key in this.default) {\n      const o = pOld[key];\n      const n = pNew[key];\n      if (o !== n)\n        changed++;\n    }\n\n    // console.log(\"TypeBuilder.update\", changed, pOld, pNew)\n    if (changed > 0) {\n      this.setState(pNew);\n      this.onChange({...pNew});\n    }\n    \n  }\n\n  setup(prev) {\n    // console.log(\"setup\")\n    const state = { ...prev };\n\n    // clean non valid field\n    for (var a in state) {\n      const p = this.default[a];\n      if (!p) delete state[a]\n    }\n\n    // setup default\n    for (var a in this.default) {\n      if (!(a in state))\n        state[a] = this.default[a];\n    }\n    return (state);\n  }\n\n  configure() {\n    this.state = this.setup(this.state);\n    this.onChange({ ...this.state });\n  }\n\n  changeIt(key, value) {\n    const change = Object.assign({}, this.state);\n    change[key] = value;\n\n    // console.log(\"TypeBuilder\", change)\n    this.setState(change);\n    this.onChange({...change});\n  }\n\n}\n","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { FieldStringOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass StringForm extends TypeForm {\n  render() {\n    return (super.render(\n      <Input \n      value={this.state.value} \n      placeholder={this.state.options.placeholder} \n      onChange={({ target }) => this.changeValue(target.value)} \n      style={{width: \"100%\"}}\n      />\n    ));\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass StringInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#fadb14\" style={{ color: \"#555555\" }}><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass StringBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"String min/max size\">\n          <Space>\n            <InputNumber min={0} value={this.state.minSize} onChange={(value) => this.changeIt(\"minSize\", value)} />\n\n            <InputNumber min={0} value={this.state.maxSize} onChange={(value) => this.changeIt(\"maxSize\", value)} />\n          </Space>\n        </Form.Item>\n\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.String.code,\n  description: types.String.description,\n  class: types.String.class,\n\n  Info: StringInfo,\n  Builder: StringBuilder,\n  Form: StringForm\n}\n\n\n","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { UserSwitchOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\nimport TString from './String';\n\nconst StringForm = TString.Form\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NameForm extends TypeForm {\n  constructor(props) {\n    super(props)\n  }\n\n  cycle(props) {\n    const ret = super.cycle(props)\n    if(!ret.value) ret.value = {}\n    return(ret)\n  }\n\n  error(from, error, message) {\n\n    // this.setState({\n    //   help: \"Please fill the form\"\n    // })\n  }\n\n  render() {\n \n    return (super.render(\n      <Row gutter={16}>\n        <Col className=\"gutter-row\" span={12}>\n          <StringForm\n            schema={this.schema.first}\n            verify={this.state.verify}\n            value={this.state.value.first}\n            onChange={() => console.log(\"First name changed\")}\n            // onError={(error, message) => this.error(\"first\", error, message)}\n            isInjected={true}\n          />\n        </Col>\n        <Col className=\"gutter-row\" span={12}>\n        <StringForm\n            schema={this.schema.last}\n            verify={this.state.verify}\n            value={this.state.value.last}\n            onChange={() => console.log(\"Last name changed\")}\n            // onError={(error, message) => this.error(\"last\", error, message)}\n            isInjected={true}\n          />\n        </Col>\n      </Row>\n    ))\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NameInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#36cfc9\" style={{ color: \"#555555\" }}><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NameBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"Name min/max size\">\n          <Space>\n            <InputNumber min={0} value={this.state.minSize} onChange={(value) => this.changeIt(\"minSize\", value)} />\n\n            <InputNumber min={0} value={this.state.maxSize} onChange={(value) => this.changeIt(\"maxSize\", value)} />\n          </Space>\n        </Form.Item>\n\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.Name.code,\n  description: types.Name.description,\n  class: types.Name.class,\n\n  Info: NameInfo,\n  Builder: NameBuilder,\n  Form: NameForm,\n\n  noFormItem: true\n}\n\n\n","import { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  Checkbox,\n  Form,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { MailOutlined } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass EmailForm extends TypeForm {\n  render() {\n    return (super.render(\n      <Input value={this.state.value} placeholder={this.state.options.placeholder} onChange={({ target }) => this.changeValue(target.value)} />\n    ));\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass EmailInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#1890ff\"><MailOutlined /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Complement builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass EmailBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      subAddressing: true\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"Sub-addressing\">\n          <Checkbox checked={this.state.subAddressing} onChange={({ target }) => this.changeIt(\"subAddressing\", target.checked)}>Allowed</Checkbox>\n        </Form.Item>\n      </div>\n    )\n  }\n}\n\n\nexport default {\n  code: types.Email.code,\n  description: types.Email.description,\n  class: types.Email.class,\n\n  Info: EmailInfo,\n  Builder: EmailBuilder,\n  Form: EmailForm\n}","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { FieldStringOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass CheckboxForm extends TypeForm {\n  render() {\n    return (super.render(\n      <Input placeholder=\"Checkbox of characters\" />\n    ))\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass CheckboxInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#fadb14\" style={{ color: \"#555555\" }}><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass CheckboxBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"Checkbox min/max size\">\n          <Space>\n            <InputNumber min={0} value={this.state.minSize} onChange={(value) => this.changeIt(\"minSize\", value)} />\n\n            <InputNumber min={0} value={this.state.maxSize} onChange={(value) => this.changeIt(\"maxSize\", value)} />\n          </Space>\n        </Form.Item>\n\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.Checkbox.code,\n  description: types.Checkbox.description,\n  class: types.Checkbox.class,\n\n  Info: CheckboxInfo,\n  Builder: CheckboxBuilder,\n  Form: CheckboxForm\n}\n\n\n","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Select,\n  Col,\n  Row\n} from \"antd\";\n\nimport { FieldStringOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass SelectForm extends TypeForm {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      value: props.value,\n      options: {}\n    }\n\n    if (props.schema.$options) this.state.options = props.schema.$options\n\n    this.state.items = this.updateItems()\n  }\n\n  updateItems() {\n    if (!this.state.options.items) return ([])\n\n    const options = []\n    for (var key in this.state.options.items) {\n      const value = this.state.options.items[key];\n      options.push(<Select.Option value={key} key={key}>{value}</Select.Option>)\n    }\n\n    return (options)\n  }\n\n  render() {\n    return (super.render(\n      <Select value={this.state.value} onChange={(value) => this.changeValue(value)}>\n        {this.state.items}\n      </Select>\n    ))\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass SelectInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#fadb14\" style={{ color: \"#555555\" }}><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass SelectBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"Select min/max size\">\n          <Space>\n            <InputNumber min={0} value={this.state.minSize} onChange={(value) => this.changeIt(\"minSize\", value)} />\n\n            <InputNumber min={0} value={this.state.maxSize} onChange={(value) => this.changeIt(\"maxSize\", value)} />\n          </Space>\n        </Form.Item>\n\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.Select.code,\n  description: types.Select.description,\n  class: types.Select.class,\n\n  Info: SelectInfo,\n  Builder: SelectBuilder,\n  Form: SelectForm\n}\n\n\n","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { FieldStringOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\nimport String from './String'\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass FieldNameForm extends String.Form { \n  constructor(props){\n    super(props)\n  }\n\n  verify(input, cb) {\n    super.verify(input, (ret)=>{\n      if(ret.status !== \"success\") {\n        return(cb(ret))\n      }\n\n      // check if the key is already used\n      if(this.props.user && input in this.props.user) {\n        const msg = `Field name already used`\n        \n        this.onError(true, msg);\n        return (cb({\n          status: \"error\",\n          feedback: true,\n          help: msg\n        }))\n      }\n\n      cb(ret)\n    })\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass FieldNameInfo extends String.Info { }\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass FieldNameBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    // this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"FieldName min/max size\">\n          {/* <Space>\n            <InputNumber min={0} value={this.state.minSize} onChange={(value) => this.changeIt(\"minSize\", value)} />\n\n            <InputNumber min={0} value={this.state.maxSize} onChange={(value) => this.changeIt(\"maxSize\", value)} />\n          </Space> */}\n        </Form.Item>\n\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.FieldName.code,\n  description: types.FieldName.description,\n  class: types.FieldName.class,\n\n  Info: FieldNameInfo,\n  Builder: FieldNameBuilder,\n  Form: FieldNameForm\n}\n\n\n","import Name from \"./Types/Name\"\nimport Email from \"./Types/Email\"\nimport String from \"./Types/String\"\nimport Checkbox from \"./Types/Checkbox\"\nimport Select from \"./Types/Select\"\nimport FieldName from \"./Types/FieldName\"\n\n\nexport default {\n  Name,\n  Email,\n  String,\n  Select,\n  Checkbox,\n  FieldName\n}\n","import { schema } from \"fieldify\";\n\nexport class FieldifySchema extends schema {\n  constructor(name, options) {\n    super(name, options);\n  }\n\n  compile(schema) {\n    // process normal compilation\n    super.compile(schema);\n  }\n}\n","import React from 'react';\nimport { utils, input as FieldifyInput } from \"fieldify\";\nimport { Form, Table, Button, Input, Card } from \"antd\";\nimport {\n  PlusOutlined as PlusIcon,\n  DeleteOutlined as DeleteIcon\n} from '@ant-design/icons';\n\nexport class FieldifySchemaForm extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = this.cycle(props);\n  }\n\n  componentDidUpdate(props, state) {\n    if (this.props !== props) {\n      const cycle = this.cycle(this.props);\n      this.setState(cycle)\n    }\n  }\n\n  cycle(props) {\n    this.schema = props.schema;\n    this.input = props.input;\n\n    if (!this.input || !(typeof props.input === \"object\")) {\n      this.input = new FieldifyInput(this.schema)\n    }\n\n    const state = {\n      input: this.input.getValue(),\n      verify: props.verify\n    };\n\n    state.reactive = this.update(state.input, state.verify);\n\n    this.references = {};\n\n    return (state)\n  }\n\n  clickAddArray(item) {\n    this.input.set(item.$_wire)\n\n    const value = this.input.getValue();\n\n    this.setState({\n      input: value,\n      reactive: this.update(value, false)\n    })\n  }\n\n\n  input(input, verify) {\n    // const state = {\n    //   verify,\n    //   input\n    // }\n    // state.reactive = this.update(input, verify)\n    // this.setState(state)\n  }\n\n  update(input, verify) {\n    const follower = (schema, input, ret) => {\n      utils.orderedRead(schema, (index, item) => {\n        const inputPtr = input ? input[item.$_key] : null;\n\n        // check if the item is hidden\n        if (item.hidden === true)\n          return;\n\n        // ARRAY\n        if (Array.isArray(item)) {\n          const source = { ...item[0] };\n\n          const options = source.$array || {};\n          const min = options.min ? options.min : (source.$required === true ? 1 : 0)\n\n          const columns = [\n            {\n              dataIndex: 'form',\n              key: 'form',\n              width: \"100%\"\n            },\n            {\n              dataIndex: 'actions',\n              key: 'actions',\n              align: \"right\"\n            },\n          ];\n          const dataSource = []\n\n          /*\n           * Is an array with non nested schema inside\n           */\n          if (source.$_array === true && source.$_nested !== true) {\n\n\n\n            var inputPtr2 = inputPtr;\n            delete source.$doc; // source is cloned\n            const TypeForm = source.$type.Form;\n\n            // console.log(\"Array non nested\", min, inputPtr2)\n\n            if (verify === true) {\n              // console.log()\n            }\n\n            if (!Array.isArray(inputPtr)) {\n              input[item.$_key] = [];\n              inputPtr2 = input[item.$_key];\n            }\n\n            if (!inputPtr2) return (ret);\n\n            if (min - inputPtr2.length > 0) {\n              for (var a = 0; a <= min - inputPtr2.length; a++) {\n                inputPtr2.push(null)\n              }\n            }\n\n            for (var a = 0; a < inputPtr2.length; a++) {\n              const value = inputPtr2[a];\n              const key = source.$_wire + \".\" + a\n\n              dataSource.push({\n                key,\n                form: <TypeForm\n                  schema={source}\n                  value={value}\n                  verify={verify}\n                  user={this.props.user}\n                  onChange={(value) => console.log(\"onChange\", item, value)}\n                  isInjected={true}\n                  // reference errors\n                  onError={(error, message) => {\n                    if (error === true) {\n                      this.references[key] = message;\n                    }\n                    else {\n                      const ref = this.references[key];\n                      if (ref) {\n                        delete this.references[key];\n                      }\n                    }\n                  }}\n                />,\n                actions: <Button size=\"small\" onClick={() => console.log(\"delete\")}>\n                  <span><DeleteIcon /></span>\n                </Button>\n              })\n            }\n\n          }\n          /*\n           * Is an array with nested schema inside\n           */\n          else if (source.$_array === true && source.$_nested === true) {\n            var inputPtr2 = input[item.$_key]\n\n            // console.log(\"Schema has nested array\", item.$_wire, item.$_key, verify, source, input[item.$_key], input)\n\n            if (!Array.isArray(inputPtr)) inputPtr2 = input[item.$_key] = [];\n\n            // console.log(\"Array nested\", min, min - inputPtr2.length, inputPtr2)\n\n            // force to create min form\n            if (min - inputPtr2.length > 0) {\n              for (var a = 0; a <= min - inputPtr2.length; a++) {\n                inputPtr2.push({})\n              }\n            }\n\n\n            // very special case for field where there is subfield\n            if (item[0].$_schematized === true) {\n              delete source.$doc; // source is cloned\n              const TypeForm = source.$type.Form;\n\n              for (var a = 0; a < inputPtr2.length; a++) {\n                const value = inputPtr2[a];\n                const key = source.$_wire + \".\" + a\n\n                dataSource.push({\n                  key,\n                  form: <TypeForm\n                    schema={source}\n                    value={value}\n                    verify={verify}\n                    user={this.props.user}\n                    onChange={(value) => console.log(\"onChange\", item, value)}\n                    isInjected={true}\n                    // reference errors\n                    onError={(error, message) => {\n                      if (error === true) {\n                        this.references[key] = message;\n                      }\n                      else {\n                        const ref = this.references[key];\n                        if (ref) {\n                          delete this.references[key];\n                        }\n                      }\n                    }}\n                  />,\n                  actions: <Button size=\"small\" onClick={() => console.log(\"delete\")}>\n                    <span><DeleteIcon /></span>\n                  </Button>\n                })\n              }\n            }\n            else {\n              for (var a = 0; a < inputPtr2.length; a++) {\n                const value = inputPtr2[a];\n\n                const child = [];\n                follower(item.$_ptr[0], value, child);\n\n                dataSource.push({\n                  key: item.$_wire + \".\" + a,\n                  form: child,\n                  actions: <Button size=\"small\" onClick={() => console.log(\"delete\")}>\n                    <span><DeleteIcon /></span>\n                  </Button>\n                })\n              }\n            }\n\n          }\n\n          ret.push(<Form.Item key={item.$_wire} noStyle={true}>\n            <div className=\"ant-form-item\">\n              <Card size=\"small\" title={source.$_access.$doc} extra={<div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n                <span className=\"ant-radio-button-wrapper\" onClick={() => this.clickAddArray(item)}>\n                  <span><PlusIcon /></span>\n                </span>\n              </div>}>\n                <Table\n                  size=\"small\"\n                  dataSource={dataSource}\n                  columns={columns}\n                  verticalAlign='middle'\n                  showHeader={false}\n                  pagination={{\n                    total: dataSource.length,\n                    pageSize: dataSource.length,\n                    hideOnSinglePage: true\n                  }}\n                  bordered\n                />\n              </Card>\n            </div>\n          </Form.Item>);\n        }\n        // OBJECT\n        else if (typeof item === \"object\" && !item.$type) {\n          const child = [];\n          follower(item.$_ptr, inputPtr, child);\n          ret.push(<div key={item.$_wire} className=\"ant-form-item\">\n            <Card size=\"small\" title={item.$doc}>\n              {child}\n            </Card>\n          </div>);\n        }\n        // LEAF\n        else {\n          const TypeForm = item.$type.Form;\n\n          ret.push(<TypeForm\n            schema={item}\n            value={inputPtr}\n            key={item.$_wire}\n            verify={verify}\n            user={this.props.user}\n            onChange={(value) => console.log(\"onChange\", item, value)}\n\n            // reference errors\n            onError={(error, message) => {\n              if (error === true) {\n                this.references[item.$_key] = message;\n              }\n              else {\n                const ref = this.references[item.$_key];\n                if (ref) {\n                  delete this.references[item.$_key];\n                }\n              }\n            }}\n          />);\n        }\n      });\n      return (ret);\n    };\n\n\n    const ret = [];\n    follower(this.schema.handler.schema, input, ret);\n    return (ret);\n  }\n\n  render() {\n\n    const layout = {\n      labelCol: { span: 8 },\n      wrapperCol: { span: 16 },\n    };\n\n    return (<Form {...layout} name=\"basic\">\n      {this.state.reactive}\n    </Form>);\n  }\n}\n","import React from 'react';\nimport Types from '../Types';\nimport { Modal, Form, Input, Select, Checkbox } from \"antd\";\nimport { FieldifySchema } from \"../Schema/Schema\";\nimport { FieldifySchemaForm } from './Form'\n\n\nexport class FieldifySchemaBuilderModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: props.visible,\n      user: props.user,\n      size: 1\n    };\n\n    this.allTypes = {}\n    for (var a in Types) {\n      this.allTypes[a] = Types[a].description\n    }\n    // create the base of the schema\n    this.schema = new FieldifySchema(\"modal\");\n    this.schema.compile({\n      key: {\n        $doc: \"Name of the field\",\n        $type: Types.FieldName,\n        $required: true\n      },\n      type: {\n        $doc: \"Field type\",\n        $type: Types.Select,\n        $required: true,\n        $options: {\n          items: this.allTypes\n        }\n      },\n      doc: {\n        $doc: \"Description\",\n        $required: true,\n        $type: Types.String\n      },\n      // options: {\n      //   $doc: \"Options\",\n      //   $type: Types.Checkbox,\n      //   $options: {\n      //     required: \"Field is required\",\n      //     readOnly: \"Field is read only\",\n      //   }\n      // },\n    });\n\n    this.formRef = React.createRef()\n\n    // setTimeout(()=>{\n    //   if(this.formRef.current) {\n    //     this.formRef.current.input({\n    //       key: \"yes cda\"\n    //     })\n    //   }\n    // }, 3000)\n  \n  }\n\n  componentDidUpdate(props, state) {\n    const newState = { ...this.state };\n    var changed = false;\n\n    if (this.state.visible !== this.props.visible) {\n      newState.visible = this.props.visible;\n      changed = true;\n    }\n\n    if (this.state.user !== this.props.user) {\n      newState.user = this.props.user;\n      changed = true;\n    }\n\n    if (changed === true)\n      this.setState(newState);\n  }\n\n  // updateOptions(opts) {\n  //   this.setState({\n  //     ...this.state,\n  //     $options: { ...opts }\n  //   });\n  // }\n\n  // getTypeState(value, state) {\n  //   const type = Types[value];\n  //   if (type) {\n  //     return ({\n  //       ...this.state,\n  //       ...state,\n  //       $type: value,\n  //       builder: null\n  //     });\n  //   }\n  //   return ({ ...this.state, ...state, $type: value, builder: null });\n  // }\n  // updateType(value, state) {\n  //   this.setState(this.getTypeState(value, state));\n  // }\n\n  receiveHeadForm() {\n    console.log(\"receiveHeadForm\")\n  }\n\n\n  render() {\n    const onOk = () => {\n      // this.onOk(this.state);\n    };\n    const onCancel = () => {\n      // this.setState({ visible: false });\n      this.props.onCancel(this.state);\n    };\n    const $name = ({ target }) => {\n      this.setState({ $key: target.value });\n    };\n    const $required = ({ target }) => {\n      this.setState({ $required: target.checked });\n    };\n    const $doc = ({ target }) => {\n      this.setState({ $doc: target.value });\n    };\n    const layout = {\n      labelCol: { span: 8 },\n      wrapperCol: { span: 16 },\n    };\n    return (<Modal title=\"Add New Field To Your Schema\" width={this.state.size * 520} centered visible={this.state.visible} onOk={onOk} onCancel={onCancel}>\n\n      <FieldifySchemaForm ref={this.formRef} schema={this.schema} user={this.props.user} onChange={this.receiveHeadForm.bind(this)} />\n\n    </Modal>);\n  }\n}\n","import React from 'react';\nimport {\n  schema,\n  iterator,\n  assign,\n  fusion,\n  utils\n} from \"fieldify\"\n\nimport {\n  notification,\n  Table,\n  Tag,\n  Popconfirm,\n  Tooltip\n} from 'antd';\n\nimport {\n  EditOutlined as EditIcon,\n  DeleteOutlined as DeleteIcon,\n  UnorderedListOutlined as ObjectIcon,\n  PlusOutlined as PlusIcon,\n  CopyOutlined as ArrayIcon\n} from '@ant-design/icons';\n\nimport { FieldifySchemaBuilderModal } from './BuilderModal';\n\nimport String from \"../Types/String\";\n\nexport class FieldifySchemaBuilder extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      modal: false,\n      modalUser: null,\n      schemaDataSource: []\n    };\n\n    this.schema = props.schema;\n\n    this.state.schemaDataSource = this.updateDataSource()\n\n    this.columns = [\n      {\n        title: 'Key',\n        dataIndex: 'name',\n        key: 'key',\n      },\n      {\n        title: 'Description',\n        dataIndex: 'doc',\n        key: 'doc'\n      },\n      {\n        title: <div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n          <span className=\"ant-radio-button-wrapper\" onClick={() => this.handlingAdd()}>\n            <span>Add Field <PlusIcon /></span>\n          </span>\n        </div>,\n        dataIndex: 'actions',\n        key: 'actions',\n        align: \"right\"\n      },\n    ];\n\n  }\n\n  fireOnChange() {\n\n  }\n\n  itemChanged(arg) {\n    console.log(\"itemChanged\", arg);\n  }\n\n  itemRemove(item) {\n    this.props.schema.removeLineup(item.$_path);\n\n    this.fireOnChange();\n\n    this.setState({\n      schemaDataSource: this.updateDataSource()\n    });\n\n    notification.success({\n      message: \"Field removed\",\n      description: `Field at ${item.$_path} has been removed successfully`\n    })\n  }\n\n  handlingAdd(path) {\n    path = path || \".\";\n    const lineup = this.props.schema.getLineup(path) || this.schema.handler.schema;\n    console.log(\"handing add\", path, lineup);\n    this.setState({ modal: true, modalUser: lineup });\n  }\n\n  handlingEdit(item) {\n    console.log(\"handing edit\", item, Array.isArray(item));\n    this.setState({ modal: true, modalContent: item });\n  }\n\n  updateDataSource() {\n    const self = this;\n    function fieldify2antDataTable(schema, wire) {\n      if (!wire)\n        wire = \"\";\n      const current = [];\n      utils.orderedRead(schema, (index, item) => {\n        const path = wire + \".\" + item.$_key;\n        item.$_path = path;\n\n        // Is array\n        if (Array.isArray(item)) {\n          var composite = <Tooltip title=\"... of objects\">\n            <Tag color=\"#722ed1\"><ObjectIcon /></Tag>\n          </Tooltip>;\n          // for direct type assignation\n          if (\"$type\" in item[0]) {\n            const TypeInfo = item[0].$type.Info;\n            composite = <TypeInfo />;\n          }\n          current.push({\n            ptr: item,\n            key: path,\n            name: <div>\n              <Tooltip title=\"This field is an array ...\">\n                <Tag color=\"#eb2f96\"><ArrayIcon /></Tag>\n              </Tooltip>\n              {composite}\n              <strong>{item.$_key}</strong>\n            </div>,\n            doc: item.$doc,\n            children: !(\"$type\" in item[0]) ? fieldify2antDataTable(item[0], path) : null,\n            actions: <div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n              <Popconfirm title={<span>Are you sure to delete the Array <strong>{path}</strong></span>} onConfirm={() => self.itemRemove(item)} okText=\"Yes\" cancelText=\"No\">\n                <span className=\"ant-radio-button-wrapper\">\n                  <span><DeleteIcon /></span>\n                </span>\n              </Popconfirm>\n\n              <span className=\"ant-radio-button-wrapper\" onClick={() => self.handlingEdit(item)}>\n                <span><EditIcon /></span>\n              </span>\n\n              {!(\"$type\" in item[0]) ?\n                <span className=\"ant-radio-button-wrapper\" onClick={() => self.handlingAdd(path)}>\n                  <span><PlusIcon /></span>\n                </span>\n                : null}\n            </div>\n          });\n        }\n        // is object\n        else if (typeof item === \"object\" && !item.$type) {\n          current.push({\n            ptr: item,\n            key: path,\n            name: <div>\n              <Tooltip title=\"This field is an object\">\n                <Tag color=\"#722ed1\"><ObjectIcon /></Tag>\n              </Tooltip>\n              <strong>{item.$_key}</strong>\n            </div>,\n            doc: item.$doc,\n            children: fieldify2antDataTable(item, path),\n            actions: <div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n              <Popconfirm title={<span>Are you sure to delete Object <strong>{path}</strong></span>} onConfirm={() => self.itemRemove(item)} okText=\"Yes\" cancelText=\"No\">\n                <span className=\"ant-radio-button-wrapper\">\n                  <span><DeleteIcon /></span>\n                </span>\n              </Popconfirm>\n\n              <span className=\"ant-radio-button-wrapper\" onClick={() => self.handlingEdit(item)}>\n                <span><EditIcon /></span>\n              </span>\n\n              <span className=\"ant-radio-button-wrapper\" onClick={() => self.handlingAdd(path)}>\n                <span><PlusIcon /></span>\n              </span>\n            </div>\n          });\n        }\n        else if (item.$type) {\n          const TypeInfo = item.$type.Info;\n          current.push({\n            ptr: item,\n            key: path,\n            name: <div>\n              <TypeInfo /> {item.$_key}\n            </div>,\n            doc: item.$doc,\n            actions: <div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n              <Popconfirm title={<span>Are you sure to delete <strong>{path}</strong></span>} onConfirm={() => self.itemRemove(item)}\n                // onCancel={cancel}\n                okText=\"Yes\" cancelText=\"No\">\n                <span className=\"ant-radio-button-wrapper\">\n                  <span><DeleteIcon /></span>\n                </span>\n              </Popconfirm>\n\n              <span className=\"ant-radio-button-wrapper\" onClick={() => self.handlingEdit(item)}>\n                <span><EditIcon /></span>\n              </span>\n            </div>\n          });\n        }\n      });\n      return (current);\n    }\n\n    var data = null;\n    if (this.schema) {\n      data = fieldify2antDataTable(this.schema.tree);\n      return (data)\n    }\n\n    return ([])\n  }\n\n  render() {\n    const sds = this.state.schemaDataSource;\n\n    return (<div>\n      <FieldifySchemaBuilderModal\n        user={this.state.modalUser}\n        visible={this.state.modal}\n        onCancel={() => this.setState({ modal: false })}\n        onOk={this.itemChanged.bind(this)}\n      />\n\n      <Table columns={this.columns} dataSource={sds} size=\"small\" pagination={{\n        total: sds.length,\n        pageSize: sds.length,\n        hideOnSinglePage: true\n      }} expandable={{ defaultExpandAllRows: true }} />\n    </div>);\n  }\n}\n","\nimport React from 'react'\n\nimport { iterator, assign } from \"fieldify\"\n\n\nimport { Space, Radio, Button } from \"antd\";\n\n\nexport { FieldifySchemaBuilder } from \"./Schema/Builder\"\nexport { FieldifySchemaForm } from \"./Schema/Form\"\n\nexport { FieldifySchema } from \"./Schema/Schema\"\n\nexport class FieldifySchemaRender extends React.Component {\n\n  render() {\n    return (<div>test</div>)\n  }\n}\n\n\n\n","import { input } from \"fieldify\"\n\nimport React from 'react'\nimport styles from './styles.module.css'\n\nimport * as schema from './Schema'\nimport types from './Types'\n\n// just map the input class from fieldify\nexport class Input extends input {}\n\n// export the schema\nexport const Schema = schema;\n\n// export types\nexport const Types = types;\n\n\n"],"names":["FieldifyTypeForm","props","state","cycle","verify","value","ret","componentDidUpdate","setState","schema","feedback","status","help","$help","isInjected","onChanged","onChange","onError","options","$options","handler","$_type","timedChange","cb","speed","_changeTimer","_changeTimerQueue","_changeTimerCb","setTimeout","changeValue","_lastValue","end","error","message","render","children","React","Form","$doc","$required","marginBottom","sm","Component","SignderivaTypeInfo","match","path","prevProps","prevState","SignderivaTypeBuilder","pNew","pOld","changed","key","o","n","setup","prev","a","p","configure","changeIt","change","Object","assign","StringForm","Input","placeholder","target","width","TypeForm","StringInfo","Tag","color","Icon","TypeInfo","StringBuilder","minSize","maxSize","Space","InputNumber","TypeBuilder","code","types","String","description","Info","Builder","TString","NameForm","from","Row","Col","first","console","log","last","NameInfo","NameBuilder","Name","noFormItem","EmailForm","EmailInfo","MailOutlined","EmailBuilder","subAddressing","Checkbox","checked","Email","CheckboxForm","CheckboxInfo","CheckboxBuilder","SelectForm","items","updateItems","push","Select","SelectInfo","SelectBuilder","FieldNameForm","input","user","msg","FieldNameInfo","FieldNameBuilder","FieldName","FieldifySchema","name","compile","FieldifySchemaForm","FieldifyInput","getValue","reactive","update","references","clickAddArray","item","set","$_wire","follower","utils","orderedRead","index","inputPtr","$_key","hidden","Array","isArray","source","$array","min","columns","dataIndex","align","dataSource","$_array","$_nested","inputPtr2","$type","length","form","ref","actions","Button","DeleteIcon","$_schematized","child","$_ptr","Card","$_access","PlusIcon","Table","total","pageSize","hideOnSinglePage","layout","labelCol","span","wrapperCol","FieldifySchemaBuilderModal","visible","size","allTypes","Types","type","doc","formRef","createRef","newState","receiveHeadForm","onOk","onCancel","Modal","bind","FieldifySchemaBuilder","modal","modalUser","schemaDataSource","updateDataSource","title","handlingAdd","fireOnChange","itemChanged","arg","itemRemove","removeLineup","$_path","notification","success","lineup","getLineup","handlingEdit","modalContent","self","fieldify2antDataTable","wire","current","composite","Tooltip","ObjectIcon","ptr","ArrayIcon","Popconfirm","EditIcon","data","tree","sds","defaultExpandAllRows","FieldifySchemaRender","Schema"],"mappings":"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"}