{"version":3,"file":"index.modern.js","sources":["../src/lib/TypeForm.js","../src/lib/TypeInfo.js","../src/lib/TypeBuilder.js","../src/Types/String.js","../src/Types/Name.js","../src/Types/Email.js","../src/Types/Checkbox.js","../src/Types/Select.js","../src/Types/FieldName.js","../src/Types.js","../src/Schema/Schema.js","../src/Schema/Form.js","../src/Schema/BuilderModal.js","../src/Schema/Builder.js","../src/Schema.js","../src/index.js"],"sourcesContent":["import React, { Component } from 'react';\nimport {\n  Col,\n  Row,\n  Form\n} from \"antd\";\n\nexport default class FieldifyTypeForm extends Component {\n  constructor(props) {\n    super(props)\n    this.state = this.cycle(props)\n\n    if (props.verify === true) {\n      this.verify(props.value, (ret) => {\n        this.state = { ...this.state, ...ret }\n      })\n    }\n  }\n\n\n  componentDidUpdate(props, state) {\n    if (this.props !== props) {\n      const cycle = this.cycle(this.props);\n\n      // // verify information\n      // if (cycle.verify === true) {\n      //   this.changeValue(cycle.value, 50)\n\n      // }\n\n      this.setState(cycle)\n    }\n  }\n\n  cycle(props) {\n    this.schema = props.schema;\n\n    const state = {\n      value: props.value,\n      verify: props.verify,\n      feedback: false,\n      status: null,\n      help: this.schema.$help\n    }\n\n    this.isInjected = props.isInjected;\n\n    this.onChanged = props.onChange ? props.onChange : () => { };\n    this.onError = props.onError ? props.onError : () => { };\n\n    if (!this.schema) return (state)\n\n    state.options = this.schema.$options || {};\n    this.handler = this.schema.$_type;\n\n    return (state)\n  }\n\n  timedChange(cb, speed) {\n    if (this._changeTimer) {\n      this._changeTimerQueue++;\n      this._changeTimerCb = cb;\n      return;\n    }\n\n    cb = cb || this._changeTimerCb;\n    if (!cb) return;\n\n    delete this._changeTimerCb;\n    this._changeTimerQueue = 0;\n    this._changeTimer = setTimeout(() => {\n      cb(() => {\n        delete this._changeTimer;\n\n        // update in queue ?\n        if (this._changeTimerQueue > 0) {\n          this.timedChange(cb, speed);\n        }\n      })\n    }, speed)\n  }\n\n  changeValue(value, speed) {\n    speed = speed || 500;\n\n    this.setState({\n      value: value\n    })\n\n    this._lastValue = value;\n\n    this.timedChange((end) => {\n      this.verify(this._lastValue, (ret) => {\n        this.setState(ret);\n\n        if (ret.error !== \"success\") {\n          end();\n          return;\n        }\n\n        this.onChanged(value);\n        end();\n      })\n    }, speed)\n  }\n\n  verify(value, cb) {\n    this.handler.verify(value, (error, message) => {\n      if (error === false) {\n        this.onError(false);\n        return (cb({\n          status: \"success\",\n          feedback: true,\n          help: null\n        }));\n      }\n\n      \n      this.onError(true, message);\n      return (cb({\n        status: \"error\",\n        feedback: true,\n        help: message\n      }))\n    })\n  }\n\n\n  render(children) {\n    // return(children)\n\n    if (!this.schema || this.isInjected === true) return (\n      <Form.Item\n        label={this.schema.$doc}\n        required={this.schema.$required}\n        validateStatus={this.state.status}\n        hasFeedback={this.state.feedback}\n        help={this.state.help}\n        style={{ marginBottom: \"0px\" }}\n        wrapperCol={{ sm: 24 }}\n      >\n        {children}\n      </Form.Item>\n    )\n\n    return (\n      <Form.Item\n        label={this.schema.$doc}\n        required={this.schema.$required}\n        validateStatus={this.state.status}\n        hasFeedback={this.state.feedback}\n        help={this.state.help}\n        style={{ marginBottom: \"8px\" }}\n        wrapperCol={{ sm: 24 }}\n      >\n        {children}\n      </Form.Item>\n    )\n  }\n}\n\n","import { Component } from 'react';\n\nexport default class SignderivaTypeInfo extends Component {\n  constructor(props) {\n    super(props)\n    this.props = props;\n    if (props.match) this.path = props.match.path;\n    this.state = {}\n  }\n\n\n  componentDidUpdate(prevProps, prevState) {\n    const pNew = this.props.schema || {};\n    const pOld = prevProps.schema || {};\n    // console.log(\"SignderivaTypeInfo.update\", pOld, pNew)\n  }\n\n}\n\n","import { Component } from 'react';\n\nexport default class SignderivaTypeBuilder extends Component {\n  constructor(props) {\n    super(props);\n    this.props = props;\n    this.onChange = props.onChange ? props.onChange : () => { };\n\n    if (props.match) this.path = props.match.path;\n\n    this.state = { ...props.options };\n\n    this.default = {};\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const pNew = this.props.options || {};\n    const pOld = prevProps.options || {};\n    \n    var changed = 0;\n    for (var key in this.default) {\n      const o = pOld[key];\n      const n = pNew[key];\n      if (o !== n)\n        changed++;\n    }\n\n    // console.log(\"TypeBuilder.update\", changed, pOld, pNew)\n    if (changed > 0) {\n      this.setState(pNew);\n      this.onChange({...pNew});\n    }\n    \n  }\n\n  setup(prev) {\n    // console.log(\"setup\")\n    const state = { ...prev };\n\n    // clean non valid field\n    for (var a in state) {\n      const p = this.default[a];\n      if (!p) delete state[a]\n    }\n\n    // setup default\n    for (var a in this.default) {\n      if (!(a in state))\n        state[a] = this.default[a];\n    }\n    return (state);\n  }\n\n  configure() {\n    this.state = this.setup(this.state);\n    this.onChange({ ...this.state });\n  }\n\n  changeIt(key, value) {\n    const change = Object.assign({}, this.state);\n    change[key] = value;\n\n    // console.log(\"TypeBuilder\", change)\n    this.setState(change);\n    this.onChange({...change});\n  }\n\n}\n","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { FieldStringOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass StringForm extends TypeForm {\n  render() {\n    return (super.render(\n      <Input \n      value={this.state.value} \n      placeholder={this.state.options.placeholder} \n      onChange={({ target }) => this.changeValue(target.value)} \n      style={{width: \"100%\"}}\n      />\n    ));\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass StringInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#fadb14\" style={{ color: \"#555555\" }}><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass StringBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"String min/max size\">\n          <Space>\n            <InputNumber min={0} value={this.state.minSize} onChange={(value) => this.changeIt(\"minSize\", value)} />\n\n            <InputNumber min={0} value={this.state.maxSize} onChange={(value) => this.changeIt(\"maxSize\", value)} />\n          </Space>\n        </Form.Item>\n\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.String.code,\n  description: types.String.description,\n  class: types.String.class,\n\n  Info: StringInfo,\n  Builder: StringBuilder,\n  Form: StringForm\n}\n\n\n","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { UserSwitchOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\nimport TString from './String';\n\nconst StringForm = TString.Form\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NameForm extends TypeForm {\n  constructor(props) {\n    super(props)\n  }\n\n  cycle(props) {\n    const ret = super.cycle(props)\n    if(!ret.value) ret.value = {}\n    return(ret)\n  }\n\n  error(from, error, message) {\n\n    // this.setState({\n    //   help: \"Please fill the form\"\n    // })\n  }\n\n  render() {\n \n    return (super.render(\n      <Row gutter={16}>\n        <Col className=\"gutter-row\" span={12}>\n          <StringForm\n            schema={this.schema.first}\n            verify={this.state.verify}\n            value={this.state.value.first}\n            onChange={() => console.log(\"First name changed\")}\n            // onError={(error, message) => this.error(\"first\", error, message)}\n            isInjected={true}\n          />\n        </Col>\n        <Col className=\"gutter-row\" span={12}>\n        <StringForm\n            schema={this.schema.last}\n            verify={this.state.verify}\n            value={this.state.value.last}\n            onChange={() => console.log(\"Last name changed\")}\n            // onError={(error, message) => this.error(\"last\", error, message)}\n            isInjected={true}\n          />\n        </Col>\n      </Row>\n    ))\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NameInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#36cfc9\" style={{ color: \"#555555\" }}><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NameBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"Name min/max size\">\n          <Space>\n            <InputNumber min={0} value={this.state.minSize} onChange={(value) => this.changeIt(\"minSize\", value)} />\n\n            <InputNumber min={0} value={this.state.maxSize} onChange={(value) => this.changeIt(\"maxSize\", value)} />\n          </Space>\n        </Form.Item>\n\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.Name.code,\n  description: types.Name.description,\n  class: types.Name.class,\n\n  Info: NameInfo,\n  Builder: NameBuilder,\n  Form: NameForm,\n\n  noFormItem: true\n}\n\n\n","import { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  Checkbox,\n  Form,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { MailOutlined } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass EmailForm extends TypeForm {\n  render() {\n    return (super.render(\n      <Input value={this.state.value} placeholder={this.state.options.placeholder} onChange={({ target }) => this.changeValue(target.value)} />\n    ));\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass EmailInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#1890ff\"><MailOutlined /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Complement builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass EmailBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      subAddressing: true\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"Sub-addressing\">\n          <Checkbox checked={this.state.subAddressing} onChange={({ target }) => this.changeIt(\"subAddressing\", target.checked)}>Allowed</Checkbox>\n        </Form.Item>\n      </div>\n    )\n  }\n}\n\n\nexport default {\n  code: types.Email.code,\n  description: types.Email.description,\n  class: types.Email.class,\n\n  Info: EmailInfo,\n  Builder: EmailBuilder,\n  Form: EmailForm\n}","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { FieldStringOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass CheckboxForm extends TypeForm {\n  render() {\n    return (super.render(\n      <Input placeholder=\"Checkbox of characters\" />\n    ))\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass CheckboxInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#fadb14\" style={{ color: \"#555555\" }}><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass CheckboxBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"Checkbox min/max size\">\n          <Space>\n            <InputNumber min={0} value={this.state.minSize} onChange={(value) => this.changeIt(\"minSize\", value)} />\n\n            <InputNumber min={0} value={this.state.maxSize} onChange={(value) => this.changeIt(\"maxSize\", value)} />\n          </Space>\n        </Form.Item>\n\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.Checkbox.code,\n  description: types.Checkbox.description,\n  class: types.Checkbox.class,\n\n  Info: CheckboxInfo,\n  Builder: CheckboxBuilder,\n  Form: CheckboxForm\n}\n\n\n","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Select,\n  Col,\n  Row\n} from \"antd\";\n\nimport { FieldStringOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass SelectForm extends TypeForm {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      value: props.value,\n      options: {}\n    }\n\n    if (props.schema.$options) this.state.options = props.schema.$options\n\n    this.state.items = this.updateItems()\n  }\n\n  updateItems() {\n    if (!this.state.options.items) return ([])\n\n    const options = []\n    for (var key in this.state.options.items) {\n      const value = this.state.options.items[key];\n      options.push(<Select.Option value={key} key={key}>{value}</Select.Option>)\n    }\n\n    return (options)\n  }\n\n  render() {\n    return (super.render(\n      <Select value={this.state.value} onChange={(value) => this.changeValue(value)}>\n        {this.state.items}\n      </Select>\n    ))\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass SelectInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#fadb14\" style={{ color: \"#555555\" }}><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass SelectBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"Select min/max size\">\n          <Space>\n            <InputNumber min={0} value={this.state.minSize} onChange={(value) => this.changeIt(\"minSize\", value)} />\n\n            <InputNumber min={0} value={this.state.maxSize} onChange={(value) => this.changeIt(\"maxSize\", value)} />\n          </Space>\n        </Form.Item>\n\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.Select.code,\n  description: types.Select.description,\n  class: types.Select.class,\n\n  Info: SelectInfo,\n  Builder: SelectBuilder,\n  Form: SelectForm\n}\n\n\n","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { FieldStringOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\nimport String from './String'\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass FieldNameForm extends String.Form { \n  constructor(props){\n    super(props)\n  }\n\n  verify(input, cb) {\n    super.verify(input, (ret)=>{\n      if(ret.status !== \"success\") {\n        return(cb(ret))\n      }\n\n      // check if the key is already used\n      if(this.props.user && input in this.props.user) {\n        const msg = `Field name already used`\n        \n        this.onError(true, msg);\n        return (cb({\n          status: \"error\",\n          feedback: true,\n          help: msg\n        }))\n      }\n\n      cb(ret)\n    })\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass FieldNameInfo extends String.Info { }\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass FieldNameBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    // this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"FieldName min/max size\">\n          {/* <Space>\n            <InputNumber min={0} value={this.state.minSize} onChange={(value) => this.changeIt(\"minSize\", value)} />\n\n            <InputNumber min={0} value={this.state.maxSize} onChange={(value) => this.changeIt(\"maxSize\", value)} />\n          </Space> */}\n        </Form.Item>\n\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.FieldName.code,\n  description: types.FieldName.description,\n  class: types.FieldName.class,\n\n  Info: FieldNameInfo,\n  Builder: FieldNameBuilder,\n  Form: FieldNameForm\n}\n\n\n","import Name from \"./Types/Name\"\nimport Email from \"./Types/Email\"\nimport String from \"./Types/String\"\nimport Checkbox from \"./Types/Checkbox\"\nimport Select from \"./Types/Select\"\nimport FieldName from \"./Types/FieldName\"\n\n\nexport default {\n  Name,\n  Email,\n  String,\n  Select,\n  Checkbox,\n  FieldName\n}\n","import { schema } from \"fieldify\";\n\nexport class FieldifySchema extends schema {\n  constructor(name, options) {\n    super(name, options);\n  }\n\n  compile(schema) {\n    // process normal compilation\n    super.compile(schema);\n  }\n}\n","import React from 'react';\nimport { utils, input as FieldifyInput } from \"fieldify\";\nimport { Form, Table, Button, Input, Card } from \"antd\";\nimport {\n  PlusOutlined as PlusIcon,\n  DeleteOutlined as DeleteIcon\n} from '@ant-design/icons';\n\nexport class FieldifySchemaForm extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = this.cycle(props);\n  }\n\n  componentDidUpdate(props, state) {\n    if (this.props !== props) {\n      const cycle = this.cycle(this.props);\n      this.setState(cycle)\n    }\n  }\n\n  cycle(props) {\n    this.schema = props.schema;\n    this.input = props.input;\n\n    if (!this.input || !(typeof props.input === \"object\")) {\n      this.input = new FieldifyInput(this.schema)\n    }\n\n    const state = {\n      input: this.input.getValue(),\n      verify: props.verify\n    };\n\n    state.reactive = this.update(state.input, state.verify);\n\n    this.references = {};\n\n    return (state)\n  }\n\n  clickAddArray(item) {\n    this.input.set(item.$_wire)\n\n    const value = this.input.getValue();\n\n    this.setState({\n      input: value,\n      reactive: this.update(value, false)\n    })\n  }\n\n\n  input(input, verify) {\n    // const state = {\n    //   verify,\n    //   input\n    // }\n    // state.reactive = this.update(input, verify)\n    // this.setState(state)\n  }\n\n  update(input, verify) {\n    const follower = (schema, input, ret) => {\n      utils.orderedRead(schema, (index, item) => {\n        const inputPtr = input ? input[item.$_key] : null;\n\n        // check if the item is hidden\n        if (item.hidden === true)\n          return;\n\n        // ARRAY\n        if (Array.isArray(item)) {\n          const source = { ...item[0] };\n\n          const options = source.$array || {};\n          const min = options.min ? options.min : (source.$required === true ? 1 : 0)\n\n          const columns = [\n            {\n              dataIndex: 'form',\n              key: 'form',\n              width: \"100%\"\n            },\n            {\n              dataIndex: 'actions',\n              key: 'actions',\n              align: \"right\"\n            },\n          ];\n          const dataSource = []\n\n          /*\n           * Is an array with non nested schema inside\n           */\n          if (source.$_array === true && source.$_nested !== true) {\n\n\n\n            var inputPtr2 = inputPtr;\n            delete source.$doc; // source is cloned\n            const TypeForm = source.$type.Form;\n\n            // console.log(\"Array non nested\", min, inputPtr2)\n\n            if (verify === true) {\n              // console.log()\n            }\n\n            if (!Array.isArray(inputPtr)) {\n              input[item.$_key] = [];\n              inputPtr2 = input[item.$_key];\n            }\n\n            if (!inputPtr2) return (ret);\n\n            if (min - inputPtr2.length > 0) {\n              for (var a = 0; a <= min - inputPtr2.length; a++) {\n                inputPtr2.push(null)\n              }\n            }\n\n            for (var a = 0; a < inputPtr2.length; a++) {\n              const value = inputPtr2[a];\n              const key = source.$_wire + \".\" + a\n\n              dataSource.push({\n                key,\n                form: <TypeForm\n                  schema={source}\n                  value={value}\n                  verify={verify}\n                  user={this.props.user}\n                  onChange={(value) => console.log(\"onChange\", item, value)}\n                  isInjected={true}\n                  // reference errors\n                  onError={(error, message) => {\n                    if (error === true) {\n                      this.references[key] = message;\n                    }\n                    else {\n                      const ref = this.references[key];\n                      if (ref) {\n                        delete this.references[key];\n                      }\n                    }\n                  }}\n                />,\n                actions: <Button size=\"small\" onClick={() => console.log(\"delete\")}>\n                  <span><DeleteIcon /></span>\n                </Button>\n              })\n            }\n\n          }\n          /*\n           * Is an array with nested schema inside\n           */\n          else if (source.$_array === true && source.$_nested === true) {\n            var inputPtr2 = input[item.$_key]\n\n            // console.log(\"Schema has nested array\", item.$_wire, item.$_key, verify, source, input[item.$_key], input)\n\n            if (!Array.isArray(inputPtr)) inputPtr2 = input[item.$_key] = [];\n\n            // console.log(\"Array nested\", min, min - inputPtr2.length, inputPtr2)\n\n            // force to create min form\n            if (min - inputPtr2.length > 0) {\n              for (var a = 0; a <= min - inputPtr2.length; a++) {\n                inputPtr2.push({})\n              }\n            }\n\n\n            // very special case for field where there is subfield\n            if (item[0].$_schematized === true) {\n              delete source.$doc; // source is cloned\n              const TypeForm = source.$type.Form;\n\n              for (var a = 0; a < inputPtr2.length; a++) {\n                const value = inputPtr2[a];\n                const key = source.$_wire + \".\" + a\n\n                dataSource.push({\n                  key,\n                  form: <TypeForm\n                    schema={source}\n                    value={value}\n                    verify={verify}\n                    user={this.props.user}\n                    onChange={(value) => console.log(\"onChange\", item, value)}\n                    isInjected={true}\n                    // reference errors\n                    onError={(error, message) => {\n                      if (error === true) {\n                        this.references[key] = message;\n                      }\n                      else {\n                        const ref = this.references[key];\n                        if (ref) {\n                          delete this.references[key];\n                        }\n                      }\n                    }}\n                  />,\n                  actions: <Button size=\"small\" onClick={() => console.log(\"delete\")}>\n                    <span><DeleteIcon /></span>\n                  </Button>\n                })\n              }\n            }\n            else {\n              for (var a = 0; a < inputPtr2.length; a++) {\n                const value = inputPtr2[a];\n\n                const child = [];\n                follower(item.$_ptr[0], value, child);\n\n                dataSource.push({\n                  key: item.$_wire + \".\" + a,\n                  form: child,\n                  actions: <Button size=\"small\" onClick={() => console.log(\"delete\")}>\n                    <span><DeleteIcon /></span>\n                  </Button>\n                })\n              }\n            }\n\n          }\n\n          ret.push(<Form.Item key={item.$_wire} noStyle={true}>\n            <div className=\"ant-form-item\">\n              <Card size=\"small\" title={source.$_access.$doc} extra={<div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n                <span className=\"ant-radio-button-wrapper\" onClick={() => this.clickAddArray(item)}>\n                  <span><PlusIcon /></span>\n                </span>\n              </div>}>\n                <Table\n                  size=\"small\"\n                  dataSource={dataSource}\n                  columns={columns}\n                  verticalAlign='middle'\n                  showHeader={false}\n                  pagination={{\n                    total: dataSource.length,\n                    pageSize: dataSource.length,\n                    hideOnSinglePage: true\n                  }}\n                  bordered\n                />\n              </Card>\n            </div>\n          </Form.Item>);\n        }\n        // OBJECT\n        else if (typeof item === \"object\" && !item.$type) {\n          const child = [];\n          follower(item.$_ptr, inputPtr, child);\n          ret.push(<div key={item.$_wire} className=\"ant-form-item\">\n            <Card size=\"small\" title={item.$doc}>\n              {child}\n            </Card>\n          </div>);\n        }\n        // LEAF\n        else {\n          const TypeForm = item.$type.Form;\n\n          ret.push(<TypeForm\n            schema={item}\n            value={inputPtr}\n            key={item.$_wire}\n            verify={verify}\n            user={this.props.user}\n            onChange={(value) => console.log(\"onChange\", item, value)}\n\n            // reference errors\n            onError={(error, message) => {\n              if (error === true) {\n                this.references[item.$_key] = message;\n              }\n              else {\n                const ref = this.references[item.$_key];\n                if (ref) {\n                  delete this.references[item.$_key];\n                }\n              }\n            }}\n          />);\n        }\n      });\n      return (ret);\n    };\n\n\n    const ret = [];\n    follower(this.schema.handler.schema, input, ret);\n    return (ret);\n  }\n\n  render() {\n\n    const layout = {\n      labelCol: { span: 8 },\n      wrapperCol: { span: 16 },\n    };\n\n    return (<Form {...layout} name=\"basic\">\n      {this.state.reactive}\n    </Form>);\n  }\n}\n","import React from 'react';\nimport Types from '../Types';\nimport { Modal, Form, Input, Select, Checkbox } from \"antd\";\nimport { FieldifySchema } from \"../Schema/Schema\";\nimport { FieldifySchemaForm } from './Form'\n\n\nexport class FieldifySchemaBuilderModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: props.visible,\n      user: props.user,\n      size: 1\n    };\n\n    this.allTypes = {}\n    for (var a in Types) {\n      this.allTypes[a] = Types[a].description\n    }\n    // create the base of the schema\n    this.schema = new FieldifySchema(\"modal\");\n    this.schema.compile({\n      key: {\n        $doc: \"Name of the field\",\n        $type: Types.FieldName,\n        $required: true\n      },\n      type: {\n        $doc: \"Field type\",\n        $type: Types.Select,\n        $required: true,\n        $options: {\n          items: this.allTypes\n        }\n      },\n      doc: {\n        $doc: \"Description\",\n        $required: true,\n        $type: Types.String\n      },\n      // options: {\n      //   $doc: \"Options\",\n      //   $type: Types.Checkbox,\n      //   $options: {\n      //     required: \"Field is required\",\n      //     readOnly: \"Field is read only\",\n      //   }\n      // },\n    });\n\n    this.formRef = React.createRef()\n\n    // setTimeout(()=>{\n    //   if(this.formRef.current) {\n    //     this.formRef.current.input({\n    //       key: \"yes cda\"\n    //     })\n    //   }\n    // }, 3000)\n  \n  }\n\n  componentDidUpdate(props, state) {\n    const newState = { ...this.state };\n    var changed = false;\n\n    if (this.state.visible !== this.props.visible) {\n      newState.visible = this.props.visible;\n      changed = true;\n    }\n\n    if (this.state.user !== this.props.user) {\n      newState.user = this.props.user;\n      changed = true;\n    }\n\n    if (changed === true)\n      this.setState(newState);\n  }\n\n  // updateOptions(opts) {\n  //   this.setState({\n  //     ...this.state,\n  //     $options: { ...opts }\n  //   });\n  // }\n\n  // getTypeState(value, state) {\n  //   const type = Types[value];\n  //   if (type) {\n  //     return ({\n  //       ...this.state,\n  //       ...state,\n  //       $type: value,\n  //       builder: null\n  //     });\n  //   }\n  //   return ({ ...this.state, ...state, $type: value, builder: null });\n  // }\n  // updateType(value, state) {\n  //   this.setState(this.getTypeState(value, state));\n  // }\n\n  receiveHeadForm() {\n    console.log(\"receiveHeadForm\")\n  }\n\n\n  render() {\n    const onOk = () => {\n      // this.onOk(this.state);\n    };\n    const onCancel = () => {\n      // this.setState({ visible: false });\n      this.props.onCancel(this.state);\n    };\n    const $name = ({ target }) => {\n      this.setState({ $key: target.value });\n    };\n    const $required = ({ target }) => {\n      this.setState({ $required: target.checked });\n    };\n    const $doc = ({ target }) => {\n      this.setState({ $doc: target.value });\n    };\n    const layout = {\n      labelCol: { span: 8 },\n      wrapperCol: { span: 16 },\n    };\n    return (<Modal title=\"Add New Field To Your Schema\" width={this.state.size * 520} centered visible={this.state.visible} onOk={onOk} onCancel={onCancel}>\n\n      <FieldifySchemaForm ref={this.formRef} schema={this.schema} user={this.props.user} onChange={this.receiveHeadForm.bind(this)} />\n\n    </Modal>);\n  }\n}\n","import React from 'react';\nimport {\n  schema,\n  iterator,\n  assign,\n  fusion,\n  utils\n} from \"fieldify\"\n\nimport {\n  notification,\n  Table,\n  Tag,\n  Popconfirm,\n  Tooltip\n} from 'antd';\n\nimport {\n  EditOutlined as EditIcon,\n  DeleteOutlined as DeleteIcon,\n  UnorderedListOutlined as ObjectIcon,\n  PlusOutlined as PlusIcon,\n  CopyOutlined as ArrayIcon\n} from '@ant-design/icons';\n\nimport { FieldifySchemaBuilderModal } from './BuilderModal';\n\nimport String from \"../Types/String\";\n\nexport class FieldifySchemaBuilder extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      modal: false,\n      modalUser: null,\n      schemaDataSource: []\n    };\n\n    this.schema = props.schema;\n\n    this.state.schemaDataSource = this.updateDataSource()\n\n    this.columns = [\n      {\n        title: 'Key',\n        dataIndex: 'name',\n        key: 'key',\n      },\n      {\n        title: 'Description',\n        dataIndex: 'doc',\n        key: 'doc'\n      },\n      {\n        title: <div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n          <span className=\"ant-radio-button-wrapper\" onClick={() => this.handlingAdd()}>\n            <span>Add Field <PlusIcon /></span>\n          </span>\n        </div>,\n        dataIndex: 'actions',\n        key: 'actions',\n        align: \"right\"\n      },\n    ];\n\n  }\n\n  fireOnChange() {\n\n  }\n\n  itemChanged(arg) {\n    console.log(\"itemChanged\", arg);\n  }\n\n  itemRemove(item) {\n    this.props.schema.removeLineup(item.$_path);\n\n    this.fireOnChange();\n\n    this.setState({\n      schemaDataSource: this.updateDataSource()\n    });\n\n    notification.success({\n      message: \"Field removed\",\n      description: `Field at ${item.$_path} has been removed successfully`\n    })\n  }\n\n  handlingAdd(path) {\n    path = path || \".\";\n    const lineup = this.props.schema.getLineup(path) || this.schema.handler.schema;\n    console.log(\"handing add\", path, lineup);\n    this.setState({ modal: true, modalUser: lineup });\n  }\n\n  handlingEdit(item) {\n    console.log(\"handing edit\", item, Array.isArray(item));\n    this.setState({ modal: true, modalContent: item });\n  }\n\n  updateDataSource() {\n    const self = this;\n    function fieldify2antDataTable(schema, wire) {\n      if (!wire)\n        wire = \"\";\n      const current = [];\n      utils.orderedRead(schema, (index, item) => {\n        const path = wire + \".\" + item.$_key;\n        item.$_path = path;\n\n        // Is array\n        if (Array.isArray(item)) {\n          var composite = <Tooltip title=\"... of objects\">\n            <Tag color=\"#722ed1\"><ObjectIcon /></Tag>\n          </Tooltip>;\n          // for direct type assignation\n          if (\"$type\" in item[0]) {\n            const TypeInfo = item[0].$type.Info;\n            composite = <TypeInfo />;\n          }\n          current.push({\n            ptr: item,\n            key: path,\n            name: <div>\n              <Tooltip title=\"This field is an array ...\">\n                <Tag color=\"#eb2f96\"><ArrayIcon /></Tag>\n              </Tooltip>\n              {composite}\n              <strong>{item.$_key}</strong>\n            </div>,\n            doc: item.$doc,\n            children: !(\"$type\" in item[0]) ? fieldify2antDataTable(item[0], path) : null,\n            actions: <div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n              <Popconfirm title={<span>Are you sure to delete the Array <strong>{path}</strong></span>} onConfirm={() => self.itemRemove(item)} okText=\"Yes\" cancelText=\"No\">\n                <span className=\"ant-radio-button-wrapper\">\n                  <span><DeleteIcon /></span>\n                </span>\n              </Popconfirm>\n\n              <span className=\"ant-radio-button-wrapper\" onClick={() => self.handlingEdit(item)}>\n                <span><EditIcon /></span>\n              </span>\n\n              {!(\"$type\" in item[0]) ?\n                <span className=\"ant-radio-button-wrapper\" onClick={() => self.handlingAdd(path)}>\n                  <span><PlusIcon /></span>\n                </span>\n                : null}\n            </div>\n          });\n        }\n        // is object\n        else if (typeof item === \"object\" && !item.$type) {\n          current.push({\n            ptr: item,\n            key: path,\n            name: <div>\n              <Tooltip title=\"This field is an object\">\n                <Tag color=\"#722ed1\"><ObjectIcon /></Tag>\n              </Tooltip>\n              <strong>{item.$_key}</strong>\n            </div>,\n            doc: item.$doc,\n            children: fieldify2antDataTable(item, path),\n            actions: <div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n              <Popconfirm title={<span>Are you sure to delete Object <strong>{path}</strong></span>} onConfirm={() => self.itemRemove(item)} okText=\"Yes\" cancelText=\"No\">\n                <span className=\"ant-radio-button-wrapper\">\n                  <span><DeleteIcon /></span>\n                </span>\n              </Popconfirm>\n\n              <span className=\"ant-radio-button-wrapper\" onClick={() => self.handlingEdit(item)}>\n                <span><EditIcon /></span>\n              </span>\n\n              <span className=\"ant-radio-button-wrapper\" onClick={() => self.handlingAdd(path)}>\n                <span><PlusIcon /></span>\n              </span>\n            </div>\n          });\n        }\n        else if (item.$type) {\n          const TypeInfo = item.$type.Info;\n          current.push({\n            ptr: item,\n            key: path,\n            name: <div>\n              <TypeInfo /> {item.$_key}\n            </div>,\n            doc: item.$doc,\n            actions: <div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n              <Popconfirm title={<span>Are you sure to delete <strong>{path}</strong></span>} onConfirm={() => self.itemRemove(item)}\n                // onCancel={cancel}\n                okText=\"Yes\" cancelText=\"No\">\n                <span className=\"ant-radio-button-wrapper\">\n                  <span><DeleteIcon /></span>\n                </span>\n              </Popconfirm>\n\n              <span className=\"ant-radio-button-wrapper\" onClick={() => self.handlingEdit(item)}>\n                <span><EditIcon /></span>\n              </span>\n            </div>\n          });\n        }\n      });\n      return (current);\n    }\n\n    var data = null;\n    if (this.schema) {\n      data = fieldify2antDataTable(this.schema.tree);\n      return (data)\n    }\n\n    return ([])\n  }\n\n  render() {\n    const sds = this.state.schemaDataSource;\n\n    return (<div>\n      <FieldifySchemaBuilderModal\n        user={this.state.modalUser}\n        visible={this.state.modal}\n        onCancel={() => this.setState({ modal: false })}\n        onOk={this.itemChanged.bind(this)}\n      />\n\n      <Table columns={this.columns} dataSource={sds} size=\"small\" pagination={{\n        total: sds.length,\n        pageSize: sds.length,\n        hideOnSinglePage: true\n      }} expandable={{ defaultExpandAllRows: true }} />\n    </div>);\n  }\n}\n","\nimport React from 'react'\n\nimport { iterator, assign } from \"fieldify\"\n\n\nimport { Space, Radio, Button } from \"antd\";\n\n\nexport { FieldifySchemaBuilder } from \"./Schema/Builder\"\nexport { FieldifySchemaForm } from \"./Schema/Form\"\n\nexport { FieldifySchema } from \"./Schema/Schema\"\n\nexport class FieldifySchemaRender extends React.Component {\n\n  render() {\n    return (<div>test</div>)\n  }\n}\n\n\n\n","import { input } from \"fieldify\"\n\nimport React from 'react'\nimport styles from './styles.module.css'\n\nimport * as schema from './Schema'\nimport types from './Types'\n\n// just map the input class from fieldify\nexport class Input extends input {}\n\n// export the schema\nexport const Schema = schema;\n\n// export types\nexport const Types = types;\n\n\n"],"names":["FieldifyTypeForm","Component","constructor","props","state","cycle","verify","value","ret","componentDidUpdate","setState","schema","feedback","status","help","$help","isInjected","onChanged","onChange","onError","options","$options","handler","$_type","timedChange","cb","speed","_changeTimer","_changeTimerQueue","_changeTimerCb","setTimeout","changeValue","_lastValue","end","error","message","render","children","$doc","$required","marginBottom","sm","SignderivaTypeInfo","match","path","prevProps","prevState","SignderivaTypeBuilder","default","pNew","pOld","changed","key","o","n","setup","prev","a","p","configure","changeIt","change","Object","assign","StringForm","TypeForm","Input","placeholder","target","width","StringInfo","TypeInfo","color","Icon","StringBuilder","TypeBuilder","minSize","maxSize","code","types","String","description","class","Info","Builder","Form","TString","NameForm","from","first","console","log","last","NameInfo","NameBuilder","Name","noFormItem","EmailForm","EmailInfo","EmailBuilder","subAddressing","Checkbox","checked","Email","CheckboxForm","CheckboxInfo","CheckboxBuilder","SelectForm","items","updateItems","push","Select","SelectInfo","SelectBuilder","FieldNameForm","input","user","msg","FieldNameInfo","FieldNameBuilder","FieldName","FieldifySchema","name","compile","FieldifySchemaForm","React","FieldifyInput","getValue","reactive","update","references","clickAddArray","item","set","$_wire","follower","utils","orderedRead","index","inputPtr","$_key","hidden","Array","isArray","source","$array","min","columns","dataIndex","align","dataSource","$_array","$_nested","inputPtr2","$type","length","form","ref","actions","DeleteIcon","$_schematized","child","$_ptr","$_access","PlusIcon","total","pageSize","hideOnSinglePage","layout","labelCol","span","wrapperCol","FieldifySchemaBuilderModal","visible","size","allTypes","Types","type","doc","formRef","createRef","newState","receiveHeadForm","onOk","onCancel","bind","FieldifySchemaBuilder","modal","modalUser","schemaDataSource","updateDataSource","title","handlingAdd","fireOnChange","itemChanged","arg","itemRemove","removeLineup","$_path","notification","success","lineup","getLineup","handlingEdit","modalContent","self","fieldify2antDataTable","wire","current","composite","ObjectIcon","ptr","ArrayIcon","EditIcon","data","tree","sds","defaultExpandAllRows","FieldifySchemaRender","Schema"],"mappings":"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"}