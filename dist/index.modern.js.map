{"version":3,"file":"index.modern.js","sources":["../src/lib/TypeForm.js","../src/lib/TypeInfo.js","../src/lib/TypeBuilder.js","../src/Types/String.js","../src/Types/Name.js","../src/Types/Email.js","../src/Types/Checkbox.js","../src/Types/Select.js","../src/Types/FieldName.js","../src/Types.js","../src/Schema/Schema.js","../src/Schema/Form.js","../src/Schema/BuilderModal.js","../src/Schema/Builder.js","../src/Schema.js","../src/index.js"],"sourcesContent":["import React, { Component } from 'react';\nimport {\n  Col,\n  Row,\n  Form\n} from \"antd\";\n\nexport default class FieldifyTypeForm extends Component {\n  constructor(props) {\n    super(props)\n    this.state = this.cycle(props)\n\n    if (props.verify === true) {\n      this.verify(props.value, (ret) => {\n        this.state = { ...this.state, ...ret }\n      })\n    }\n  }\n\n\n  componentDidUpdate(props, state) {\n    if (this.props !== props) {\n      const cycle = this.cycle(this.props);\n      this.setState(cycle)\n    }\n  }\n\n  cycle(props) {\n    this.schema = props.schema;\n\n    const state = {\n      value: props.value,\n      // verify: props.verify,\n      // feedback: false,\n      // status: null,\n      // help: this.schema.$help\n    }\n\n    this.isInjected = props.isInjected;\n\n    this.onChange = props.onChange ? props.onChange : () => { };\n    this.onError = props.onError ? props.onError : () => { };\n\n    if (!this.schema) return (state)\n\n    state.options = this.schema.$options || {};\n    this.handler = this.schema.$_type;\n\n    return (state)\n  }\n\n  timedChange(cb, speed) {\n    if (this._changeTimer) {\n      this._changeTimerQueue++;\n      this._changeTimerCb = cb;\n      return;\n    }\n\n    cb = cb || this._changeTimerCb;\n    if (!cb) return;\n\n    delete this._changeTimerCb;\n    this._changeTimerQueue = 0;\n    this._changeTimer = setTimeout(() => {\n      cb(() => {\n        delete this._changeTimer;\n\n        // update in queue ?\n        if (this._changeTimerQueue > 0) {\n          this.timedChange(cb, speed);\n        }\n      })\n    }, speed)\n  }\n\n  changeValue(value, speed) {\n    speed = speed || 500;\n\n    this.setState({\n      value: value\n    })\n\n    this._lastValue = value;\n\n    this.timedChange((end) => {\n      this.verify(this._lastValue, (ret) => {\n        this.setState(ret);\n        if (ret.status !== \"success\") {\n          end();\n          return;\n        }\n        \n        this.onChange(this.schema, this._lastValue);\n        end();\n      })\n    }, speed)\n  }\n\n  verify(value, cb) {\n    this.handler.verify(value, (error, message) => {\n      if (error === false) {\n        this.onError(false);\n        return (cb({\n          status: \"success\",\n          feedback: true,\n          help: null\n        }));\n      }\n\n      \n      this.onError(true, message);\n      return (cb({\n        status: \"error\",\n        feedback: true,\n        help: message\n      }))\n    })\n  }\n\n\n  render(children) {\n    // return(children)\n\n    if (!this.schema || this.isInjected === true) return (\n      <Form.Item\n        label={this.schema.$doc}\n        required={this.schema.$required}\n        validateStatus={this.state.status}\n        hasFeedback={this.state.feedback}\n        help={this.state.help}\n        style={{ marginBottom: \"0px\" }}\n        wrapperCol={{ sm: 24 }}\n      >\n        {children}\n      </Form.Item>\n    )\n\n    return (\n      <Form.Item\n        label={this.schema.$doc}\n        required={this.schema.$required}\n        validateStatus={this.state.status}\n        hasFeedback={this.state.feedback}\n        help={this.state.help}\n        style={{ marginBottom: \"8px\" }}\n        wrapperCol={{ sm: 24 }}\n      >\n        {children}\n      </Form.Item>\n    )\n  }\n}\n\n","import { Component } from 'react';\n\nexport default class SignderivaTypeInfo extends Component {\n  constructor(props) {\n    super(props)\n    this.props = props;\n    if (props.match) this.path = props.match.path;\n    this.state = {}\n  }\n\n\n  componentDidUpdate(prevProps, prevState) {\n    const pNew = this.props.schema || {};\n    const pOld = prevProps.schema || {};\n    // console.log(\"SignderivaTypeInfo.update\", pOld, pNew)\n  }\n\n}\n\n","import { Component } from 'react';\n\nexport default class SignderivaTypeBuilder extends Component {\n  constructor(props) {\n    super(props);\n    this.props = props;\n    this.onChange = props.onChange ? props.onChange : () => { };\n\n    if (props.match) this.path = props.match.path;\n\n    this.state = { ...props.options };\n\n    this.default = {};\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const pNew = this.props.options || {};\n    const pOld = prevProps.options || {};\n    \n    var changed = 0;\n    for (var key in this.default) {\n      const o = pOld[key];\n      const n = pNew[key];\n      if (o !== n)\n        changed++;\n    }\n\n    // console.log(\"TypeBuilder.update\", changed, pOld, pNew)\n    if (changed > 0) {\n      this.setState(pNew);\n      this.onChange({...pNew});\n    }\n    \n  }\n\n  setup(prev) {\n    // console.log(\"setup\")\n    const state = { ...prev };\n\n    // clean non valid field\n    for (var a in state) {\n      const p = this.default[a];\n      if (!p) delete state[a]\n    }\n\n    // setup default\n    for (var a in this.default) {\n      if (!(a in state))\n        state[a] = this.default[a];\n    }\n    return (state);\n  }\n\n  configure() {\n    this.state = this.setup(this.state);\n    this.onChange({ ...this.state });\n  }\n\n  changeIt(key, value) {\n    const change = Object.assign({}, this.state);\n    change[key] = value;\n\n    // console.log(\"TypeBuilder\", change)\n    this.setState(change);\n    this.onChange({...change});\n  }\n\n}\n","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { FieldStringOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass StringForm extends TypeForm {\n  render() {\n    return (super.render(\n      <Input \n      value={this.state.value} \n      placeholder={this.state.options.placeholder} \n      onChange={({ target }) => this.changeValue(target.value)} \n      style={{width: \"100%\"}}\n      />\n    ));\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass StringInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#fadb14\" style={{ color: \"#555555\" }}><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass StringBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"String min/max size\">\n          <Space>\n            <InputNumber min={0} value={this.state.minSize} onChange={(value) => this.changeIt(\"minSize\", value)} />\n\n            <InputNumber min={0} value={this.state.maxSize} onChange={(value) => this.changeIt(\"maxSize\", value)} />\n          </Space>\n        </Form.Item>\n\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.String.code,\n  description: types.String.description,\n  class: types.String.class,\n\n  Info: StringInfo,\n  Builder: StringBuilder,\n  Form: StringForm\n}\n\n\n","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { UserSwitchOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\nimport TString from './String';\n\nconst StringForm = TString.Form\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NameForm extends TypeForm {\n  constructor(props) {\n    super(props)\n\n  }\n\n  cycle(props) {\n    const ret = super.cycle(props)\n    if (!ret.value) ret.value = {}\n    \n    this.result = {...ret.value}\n    return (ret)\n  }\n\n  error(from, error, message) {\n    // this.setState({\n    //   help: \"Please fill the form\"\n    // })\n  }\n\n  setField(key, schema, value) {\n    this.result[key] = value;\n    this.onChange(this.schema, this.result);\n  }\n\n  render() {\n\n    return (super.render(\n      <Row gutter={16}>\n        <Col className=\"gutter-row\" span={12}>\n          <StringForm\n            schema={this.schema.first}\n            verify={this.state.verify}\n            value={this.state.value.first}\n            onChange={(schema, value) => this.setField(\"first\", schema, value)}\n            // onError={(error, message) => this.error(\"first\", error, message)}\n            isInjected={true}\n          />\n        </Col>\n        <Col className=\"gutter-row\" span={12}>\n          <StringForm\n            schema={this.schema.last}\n            verify={this.state.verify}\n            value={this.state.value.last}\n            onChange={(schema, value) => this.setField(\"last\", schema, value)}\n            // onError={(error, message) => this.error(\"last\", error, message)}\n            isInjected={true}\n          />\n        </Col>\n      </Row>\n    ))\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NameInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#36cfc9\" style={{ color: \"#555555\" }}><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NameBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"Name min/max size\">\n          <Space>\n            <InputNumber min={0} value={this.state.minSize} onChange={(value) => this.changeIt(\"minSize\", value)} />\n\n            <InputNumber min={0} value={this.state.maxSize} onChange={(value) => this.changeIt(\"maxSize\", value)} />\n          </Space>\n        </Form.Item>\n\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.Name.code,\n  description: types.Name.description,\n  class: types.Name.class,\n\n  Info: NameInfo,\n  Builder: NameBuilder,\n  Form: NameForm,\n\n  noFormItem: true\n}\n\n\n","import { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  Checkbox,\n  Form,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { MailOutlined } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass EmailForm extends TypeForm {\n  render() {\n    return (super.render(\n      <Input value={this.state.value} placeholder={this.state.options.placeholder} onChange={({ target }) => this.changeValue(target.value)} />\n    ));\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass EmailInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#1890ff\"><MailOutlined /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Complement builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass EmailBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      subAddressing: true\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"Sub-addressing\">\n          <Checkbox checked={this.state.subAddressing} onChange={({ target }) => this.changeIt(\"subAddressing\", target.checked)}>Allowed</Checkbox>\n        </Form.Item>\n      </div>\n    )\n  }\n}\n\n\nexport default {\n  code: types.Email.code,\n  description: types.Email.description,\n  class: types.Email.class,\n\n  Info: EmailInfo,\n  Builder: EmailBuilder,\n  Form: EmailForm\n}","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { FieldStringOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass CheckboxForm extends TypeForm {\n  render() {\n    return (super.render(\n      <Input placeholder=\"Checkbox of characters\" />\n    ))\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass CheckboxInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#fadb14\" style={{ color: \"#555555\" }}><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass CheckboxBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"Checkbox min/max size\">\n          <Space>\n            <InputNumber min={0} value={this.state.minSize} onChange={(value) => this.changeIt(\"minSize\", value)} />\n\n            <InputNumber min={0} value={this.state.maxSize} onChange={(value) => this.changeIt(\"maxSize\", value)} />\n          </Space>\n        </Form.Item>\n\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.Checkbox.code,\n  description: types.Checkbox.description,\n  class: types.Checkbox.class,\n\n  Info: CheckboxInfo,\n  Builder: CheckboxBuilder,\n  Form: CheckboxForm\n}\n\n\n","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Select,\n  Col,\n  Row\n} from \"antd\";\n\nimport { FieldStringOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass SelectForm extends TypeForm {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      value: props.value,\n      options: {}\n    }\n\n    if (props.schema.$options) this.state.options = props.schema.$options\n\n    this.state.items = this.updateItems()\n  }\n\n  updateItems() {\n    if (!this.state.options.items) return ([])\n\n    const options = []\n    for (var key in this.state.options.items) {\n      const value = this.state.options.items[key];\n      options.push(<Select.Option value={key} key={key}>{value}</Select.Option>)\n    }\n\n    return (options)\n  }\n\n  render() {\n    return (super.render(\n      <Select value={this.state.value} onChange={(value) => this.changeValue(value)}>\n        {this.state.items}\n      </Select>\n    ))\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass SelectInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#fadb14\" style={{ color: \"#555555\" }}><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass SelectBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"Select min/max size\">\n          <Space>\n            <InputNumber min={0} value={this.state.minSize} onChange={(value) => this.changeIt(\"minSize\", value)} />\n\n            <InputNumber min={0} value={this.state.maxSize} onChange={(value) => this.changeIt(\"maxSize\", value)} />\n          </Space>\n        </Form.Item>\n\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.Select.code,\n  description: types.Select.description,\n  class: types.Select.class,\n\n  Info: SelectInfo,\n  Builder: SelectBuilder,\n  Form: SelectForm\n}\n\n\n","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { FieldStringOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\nimport String from './String'\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass FieldNameForm extends String.Form { \n  constructor(props){\n    super(props)\n  }\n\n  verify(input, cb) {\n    super.verify(input, (ret)=>{\n      if(ret.status !== \"success\") {\n        return(cb(ret))\n      }\n\n      // check if the key is already used\n      if(this.props.user && input in this.props.user) {\n        const msg = `Field name already used`\n        \n        this.onError(true, msg);\n        return (cb({\n          status: \"error\",\n          feedback: true,\n          help: msg\n        }))\n      }\n\n      cb(ret)\n    })\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass FieldNameInfo extends String.Info { }\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass FieldNameBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    // this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"FieldName min/max size\">\n          {/* <Space>\n            <InputNumber min={0} value={this.state.minSize} onChange={(value) => this.changeIt(\"minSize\", value)} />\n\n            <InputNumber min={0} value={this.state.maxSize} onChange={(value) => this.changeIt(\"maxSize\", value)} />\n          </Space> */}\n        </Form.Item>\n\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.FieldName.code,\n  description: types.FieldName.description,\n  class: types.FieldName.class,\n\n  Info: FieldNameInfo,\n  Builder: FieldNameBuilder,\n  Form: FieldNameForm\n}\n\n\n","import Name from \"./Types/Name\"\nimport Email from \"./Types/Email\"\nimport String from \"./Types/String\"\nimport Checkbox from \"./Types/Checkbox\"\nimport Select from \"./Types/Select\"\nimport FieldName from \"./Types/FieldName\"\n\n\nexport default {\n  Name,\n  Email,\n  String,\n  Select,\n  Checkbox,\n  FieldName\n}\n","import { schema } from \"fieldify\";\n\nexport class FieldifySchema extends schema {\n  constructor(name, options) {\n    super(name, options);\n  }\n\n  compile(schema) {\n    // process normal compilation\n    super.compile(schema);\n  }\n}\n","import React from 'react';\nimport { utils, input as FieldifyInput } from \"fieldify\";\nimport { Form, Table, Button, Input, Card } from \"antd\";\nimport {\n  PlusOutlined as PlusIcon,\n  DeleteOutlined as DeleteIcon\n} from '@ant-design/icons';\n\nexport class FieldifySchemaForm extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = this.cycle(props, true);\n  }\n\n  componentDidUpdate(props, state) {\n    if (this.props !== props) {\n      const cycle = this.cycle(this.props);\n      this.setState(cycle)\n    }\n  }\n\n  cycle(props, first) {\n    this.schema = props.schema;\n    this.input = props.input;\n\n    if (!this.input || !(typeof props.input === \"object\")) {\n      this.input = new FieldifyInput(this.schema)\n    }\n\n    const state = {\n      input: this.input.getValue(),\n      // verify: props.verify\n    };\n\n    state.reactive = this.update(state.input, state.verify);\n\n    this.references = {};\n\n    this.onChange = props.onChange ? props.onChange : () => { };\n\n    return (state)\n  }\n\n  clickAddArray(line) {\n    this.input.set(line)\n    const _value = this.input.getValue();\n    this.onChange(_value)\n    this.setState({\n      input: _value,\n      reactive: this.update(_value, false)\n    })\n  }\n\n  clickRemoveArrayItem(line) {\n    this.input.remove(line)\n    const _value = this.input.getValue();\n    this.onChange(_value)\n    this.setState({\n      input: _value,\n      reactive: this.update(_value, false)\n    })\n  }\n\n  setValue(line, value) {\n    this.input.set(line, value)\n    const _value = this.input.getValue();\n    this.onChange(_value)\n    this.setState({\n      input: _value\n    })\n  }\n\n  input(input, verify) {\n    // const state = {\n    //   verify,\n    //   input\n    // }    \n    // state.reactive = this.update(input, verify)\n    // this.setState(state)\n  }\n\n  update(input, verify) {\n    const follower = (schema, input, ret, line) => {\n      line = line || \"\"\n\n      utils.orderedRead(schema, (index, item) => {\n        const inputPtr = input ? input[item.$_key] : null;\n        const lineKey = line+\".\"+item.$_key;\n        \n        // check if the item is hidden\n        if (item.hidden === true)\n          return;\n\n        // ARRAY\n        if (Array.isArray(item)) {\n          const source = { ...item[0] };\n          var inputPtr2 = inputPtr;\n          const options = source.$array || {};\n          const min = options.min ? options.min : (source.$required === true ? 1 : 0)\n\n          const columns = [\n            {\n              dataIndex: 'form',\n              key: 'form',\n              width: \"100%\"\n            },\n            {\n              dataIndex: 'actions',\n              key: 'actions',\n              align: \"right\"\n            },\n          ];\n          const dataSource = []\n\n          /*\n           * Is an array with non nested schema inside\n           */\n          if (source.$_array === true && source.$_nested !== true) {\n            \n            delete source.$doc; // source is cloned\n            const TypeForm = source.$type.Form;\n\n            // console.log(\"Array non nested\", min, inputPtr2)\n\n            if (verify === true) {\n              // console.log()\n            }\n\n            if (!Array.isArray(inputPtr)) {\n              input[item.$_key] = [];\n              inputPtr2 = input[item.$_key];\n            }\n\n            if (!inputPtr2) return (ret);\n\n            if (min - inputPtr2.length > 0) {\n              for (var a = 0; a <= min - inputPtr2.length; a++) {\n                inputPtr2.push(null)\n              }\n            }\n\n            for (var a = 0; a < inputPtr2.length; a++) {\n              const value = inputPtr2[a];\n              const key = lineKey + \".\" + a\n\n              dataSource.push({\n                key,\n                form: <TypeForm\n                  schema={source}\n                  value={value}\n                  // verify={verify}\n                  user={this.props.user}\n                  onChange={(schema, value) => this.setValue(key, value)}\n                  isInjected={true}\n                  // reference errors\n                  onError={(error, message) => {\n                    if (error === true) {\n                      this.references[key] = message;\n                    }\n                    else {\n                      const ref = this.references[key];\n                      if (ref) {\n                        delete this.references[key];\n                      }\n                    }\n                  }}\n                />,\n                actions: <Button size=\"small\" onClick={() => this.clickRemoveArrayItem(key)}>\n                  <span><DeleteIcon /></span>\n                </Button>\n              })\n            }\n\n          }\n          /*\n           * Is an array with nested schema inside\n           */\n          else if (source.$_array === true && source.$_nested === true) {\n            var inputPtr2 = input[item.$_key]\n\n            // console.log(\"Schema has nested array\", item.$_wire, item.$_key, verify, source, input[item.$_key], input)\n\n            if (!Array.isArray(inputPtr)) inputPtr2 = input[item.$_key] = [];\n\n            // console.log(\"Array nested\", min, min - inputPtr2.length, inputPtr2)\n\n            // force to create min form\n            if (min - inputPtr2.length > 0) {\n              for (var a = 0; a <= min - inputPtr2.length; a++) {\n                inputPtr2.push({})\n              }\n            }\n\n            // very special case for field where there is subfield\n            if (item[0].$_schematized === true) {\n              delete source.$doc; // source is cloned\n              const TypeForm = source.$type.Form;\n\n              for (var a = 0; a < inputPtr2.length; a++) {\n                const value = inputPtr2[a];\n                const key = lineKey + \".\" + a\n      \n                dataSource.push({\n                  key,\n                  form: <TypeForm\n                    schema={source}\n                    value={value}\n                    // verify={verify}\n                    user={this.props.user}\n                    onChange={(schema, value) => this.setValue(key, value)}\n                    isInjected={true}\n                    // reference errors\n                    onError={(error, message) => {\n                      if (error === true) {\n                        this.references[key] = message;\n                      }\n                      else {\n                        const ref = this.references[key];\n                        if (ref) {\n                          delete this.references[key];\n                        }\n                      }\n                    }}\n                  />,\n                  actions: <Button size=\"small\" onClick={() => this.clickRemoveArrayItem(key)}>\n                    <span><DeleteIcon /></span>\n                  </Button>\n                })\n              }\n            }\n            else {\n              for (var a = 0; a < inputPtr2.length; a++) {\n                const value = inputPtr2[a];\n                const key = lineKey + \".\" + a\n\n                const child = [];\n                follower(item.$_ptr[0], value, child, key);\n\n                dataSource.push({\n                  key,\n                  form: child,\n                  actions: <Button size=\"small\" onClick={() => this.clickRemoveArrayItem(key)}>\n                    <span><DeleteIcon /></span>\n                  </Button>\n                })\n              }\n            }\n\n          }\n\n          ret.push(<Form.Item key={item.$_wire} noStyle={true}>\n            <div className=\"ant-form-item\">\n              <Card size=\"small\" title={source.$_access.$doc} extra={<div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n                <span className=\"ant-radio-button-wrapper\" onClick={() => this.clickAddArray(lineKey+\".\"+inputPtr2.length)}>\n                  <span><PlusIcon /></span>\n                </span>\n              </div>}>\n                <Table\n                  size=\"small\"\n                  dataSource={dataSource}\n                  columns={columns}\n                  verticalAlign='middle'\n                  showHeader={false}\n                  pagination={{\n                    total: dataSource.length,\n                    pageSize: dataSource.length,\n                    hideOnSinglePage: true\n                  }}\n                  bordered\n                />\n              </Card>\n            </div>\n          </Form.Item>);\n        }\n        // OBJECT\n        else if (typeof item === \"object\" && !item.$type) {\n          const child = [];\n          follower(item.$_ptr, inputPtr, child, lineKey);\n          ret.push(<div key={item.$_wire} className=\"ant-form-item\">\n            <Card size=\"small\" title={item.$doc}>\n              {child}\n            </Card>\n          </div>);\n        }\n        // LEAF\n        else {\n          const TypeForm = item.$type.Form;\n\n          ret.push(<TypeForm\n            schema={item}\n            value={inputPtr}\n            key={item.$_wire}\n            // verify={verify}\n            user={this.props.user}\n            onChange={(schema, value) => this.setValue(lineKey, value)}\n\n            // reference errors\n            onError={(error, message) => {\n              if (error === true) {\n                this.references[item.$_key] = message;\n              }\n              else {\n                const ref = this.references[item.$_key];\n                if (ref) {\n                  delete this.references[item.$_key];\n                }\n              }\n            }}\n          />);\n        }\n      });\n      return (ret);\n    };\n\n\n    const ret = [];\n    follower(this.schema.handler.schema, input, ret);\n    return (ret);\n  }\n\n  render() {\n\n    const layout = {\n      labelCol: { span: 8 },\n      wrapperCol: { span: 16 },\n    };\n\n    return (<Form {...layout} name=\"basic\">\n      {this.state.reactive}\n    </Form>);\n  }\n}\n","import React from 'react';\nimport Types from '../Types';\nimport { Modal, Form, Input, Select, Checkbox } from \"antd\";\nimport { FieldifySchema } from \"../Schema/Schema\";\nimport { FieldifySchemaForm } from './Form'\n\n\nexport class FieldifySchemaBuilderModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: props.visible,\n      user: props.user,\n      size: 1\n    };\n\n    this.allTypes = {}\n    for (var a in Types) {\n      this.allTypes[a] = Types[a].description\n    }\n    // create the base of the schema\n    this.schema = new FieldifySchema(\"modal\");\n    this.schema.compile({\n      key: {\n        $doc: \"Name of the field\",\n        $type: Types.FieldName,\n        $required: true\n      },\n      type: {\n        $doc: \"Field type\",\n        $type: Types.Select,\n        $required: true,\n        $options: {\n          items: this.allTypes\n        }\n      },\n      doc: {\n        $doc: \"Description\",\n        $required: true,\n        $type: Types.String\n      },\n      // options: {\n      //   $doc: \"Options\",\n      //   $type: Types.Checkbox,\n      //   $options: {\n      //     required: \"Field is required\",\n      //     readOnly: \"Field is read only\",\n      //   }\n      // },\n    });\n\n    this.formRef = React.createRef()\n\n    // setTimeout(()=>{\n    //   if(this.formRef.current) {\n    //     this.formRef.current.input({\n    //       key: \"yes cda\"\n    //     })\n    //   }\n    // }, 3000)\n  \n  }\n\n  componentDidUpdate(props, state) {\n    const newState = { ...this.state };\n    var changed = false;\n\n    if (this.state.visible !== this.props.visible) {\n      newState.visible = this.props.visible;\n      changed = true;\n    }\n\n    if (this.state.user !== this.props.user) {\n      newState.user = this.props.user;\n      changed = true;\n    }\n\n    if (changed === true)\n      this.setState(newState);\n  }\n\n  // updateOptions(opts) {\n  //   this.setState({\n  //     ...this.state,\n  //     $options: { ...opts }\n  //   });\n  // }\n\n  // getTypeState(value, state) {\n  //   const type = Types[value];\n  //   if (type) {\n  //     return ({\n  //       ...this.state,\n  //       ...state,\n  //       $type: value,\n  //       builder: null\n  //     });\n  //   }\n  //   return ({ ...this.state, ...state, $type: value, builder: null });\n  // }\n  // updateType(value, state) {\n  //   this.setState(this.getTypeState(value, state));\n  // }\n\n  receiveHeadForm() {\n    console.log(\"receiveHeadForm\")\n  }\n\n\n  render() {\n    const onOk = () => {\n      // this.onOk(this.state);\n    };\n    const onCancel = () => {\n      // this.setState({ visible: false });\n      this.props.onCancel(this.state);\n    };\n    const $name = ({ target }) => {\n      this.setState({ $key: target.value });\n    };\n    const $required = ({ target }) => {\n      this.setState({ $required: target.checked });\n    };\n    const $doc = ({ target }) => {\n      this.setState({ $doc: target.value });\n    };\n    const layout = {\n      labelCol: { span: 8 },\n      wrapperCol: { span: 16 },\n    };\n    return (<Modal title=\"Add New Field To Your Schema\" width={this.state.size * 520} centered visible={this.state.visible} onOk={onOk} onCancel={onCancel}>\n\n      <FieldifySchemaForm ref={this.formRef} schema={this.schema} user={this.props.user} onChange={this.receiveHeadForm.bind(this)} />\n\n    </Modal>);\n  }\n}\n","import React from 'react';\nimport {\n  schema,\n  iterator,\n  assign,\n  fusion,\n  utils\n} from \"fieldify\"\n\nimport {\n  notification,\n  Table,\n  Tag,\n  Popconfirm,\n  Tooltip\n} from 'antd';\n\nimport {\n  EditOutlined as EditIcon,\n  DeleteOutlined as DeleteIcon,\n  UnorderedListOutlined as ObjectIcon,\n  PlusOutlined as PlusIcon,\n  CopyOutlined as ArrayIcon\n} from '@ant-design/icons';\n\nimport { FieldifySchemaBuilderModal } from './BuilderModal';\n\nimport String from \"../Types/String\";\n\nexport class FieldifySchemaBuilder extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      modal: false,\n      modalUser: null,\n      schemaDataSource: []\n    };\n\n    this.schema = props.schema;\n\n    this.state.schemaDataSource = this.updateDataSource()\n\n    this.columns = [\n      {\n        title: 'Key',\n        dataIndex: 'name',\n        key: 'key',\n      },\n      {\n        title: 'Description',\n        dataIndex: 'doc',\n        key: 'doc'\n      },\n      {\n        title: <div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n          <span className=\"ant-radio-button-wrapper\" onClick={() => this.handlingAdd()}>\n            <span>Add Field <PlusIcon /></span>\n          </span>\n        </div>,\n        dataIndex: 'actions',\n        key: 'actions',\n        align: \"right\"\n      },\n    ];\n\n  }\n\n  fireOnChange() {\n\n  }\n\n  itemChanged(arg) {\n    console.log(\"itemChanged\", arg);\n  }\n\n  itemRemove(item) {\n    this.props.schema.removeLineup(item.$_path);\n\n    this.fireOnChange();\n\n    this.setState({\n      schemaDataSource: this.updateDataSource()\n    });\n\n    notification.success({\n      message: \"Field removed\",\n      description: `Field at ${item.$_path} has been removed successfully`\n    })\n  }\n\n  handlingAdd(path) {\n    path = path || \".\";\n    const lineup = this.props.schema.getLineup(path) || this.schema.handler.schema;\n    console.log(\"handing add\", path, lineup);\n    this.setState({ modal: true, modalUser: lineup });\n  }\n\n  handlingEdit(item) {\n    console.log(\"handing edit\", item, Array.isArray(item));\n    this.setState({ modal: true, modalContent: item });\n  }\n\n  updateDataSource() {\n    const self = this;\n    function fieldify2antDataTable(schema, wire) {\n      if (!wire)\n        wire = \"\";\n      const current = [];\n      utils.orderedRead(schema, (index, item) => {\n        const path = wire + \".\" + item.$_key;\n        item.$_path = path;\n\n        // Is array\n        if (Array.isArray(item)) {\n          var composite = <Tooltip title=\"... of objects\">\n            <Tag color=\"#722ed1\"><ObjectIcon /></Tag>\n          </Tooltip>;\n          // for direct type assignation\n          if (\"$type\" in item[0]) {\n            const TypeInfo = item[0].$type.Info;\n            composite = <TypeInfo />;\n          }\n          current.push({\n            ptr: item,\n            key: path,\n            name: <div>\n              <Tooltip title=\"This field is an array ...\">\n                <Tag color=\"#eb2f96\"><ArrayIcon /></Tag>\n              </Tooltip>\n              {composite}\n              <strong>{item.$_key}</strong>\n            </div>,\n            doc: item.$doc,\n            children: !(\"$type\" in item[0]) ? fieldify2antDataTable(item[0], path) : null,\n            actions: <div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n              <Popconfirm title={<span>Are you sure to delete the Array <strong>{path}</strong></span>} onConfirm={() => self.itemRemove(item)} okText=\"Yes\" cancelText=\"No\">\n                <span className=\"ant-radio-button-wrapper\">\n                  <span><DeleteIcon /></span>\n                </span>\n              </Popconfirm>\n\n              <span className=\"ant-radio-button-wrapper\" onClick={() => self.handlingEdit(item)}>\n                <span><EditIcon /></span>\n              </span>\n\n              {!(\"$type\" in item[0]) ?\n                <span className=\"ant-radio-button-wrapper\" onClick={() => self.handlingAdd(path)}>\n                  <span><PlusIcon /></span>\n                </span>\n                : null}\n            </div>\n          });\n        }\n        // is object\n        else if (typeof item === \"object\" && !item.$type) {\n          current.push({\n            ptr: item,\n            key: path,\n            name: <div>\n              <Tooltip title=\"This field is an object\">\n                <Tag color=\"#722ed1\"><ObjectIcon /></Tag>\n              </Tooltip>\n              <strong>{item.$_key}</strong>\n            </div>,\n            doc: item.$doc,\n            children: fieldify2antDataTable(item, path),\n            actions: <div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n              <Popconfirm title={<span>Are you sure to delete Object <strong>{path}</strong></span>} onConfirm={() => self.itemRemove(item)} okText=\"Yes\" cancelText=\"No\">\n                <span className=\"ant-radio-button-wrapper\">\n                  <span><DeleteIcon /></span>\n                </span>\n              </Popconfirm>\n\n              <span className=\"ant-radio-button-wrapper\" onClick={() => self.handlingEdit(item)}>\n                <span><EditIcon /></span>\n              </span>\n\n              <span className=\"ant-radio-button-wrapper\" onClick={() => self.handlingAdd(path)}>\n                <span><PlusIcon /></span>\n              </span>\n            </div>\n          });\n        }\n        else if (item.$type) {\n          const TypeInfo = item.$type.Info;\n          current.push({\n            ptr: item,\n            key: path,\n            name: <div>\n              <TypeInfo /> {item.$_key}\n            </div>,\n            doc: item.$doc,\n            actions: <div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n              <Popconfirm title={<span>Are you sure to delete <strong>{path}</strong></span>} onConfirm={() => self.itemRemove(item)}\n                // onCancel={cancel}\n                okText=\"Yes\" cancelText=\"No\">\n                <span className=\"ant-radio-button-wrapper\">\n                  <span><DeleteIcon /></span>\n                </span>\n              </Popconfirm>\n\n              <span className=\"ant-radio-button-wrapper\" onClick={() => self.handlingEdit(item)}>\n                <span><EditIcon /></span>\n              </span>\n            </div>\n          });\n        }\n      });\n      return (current);\n    }\n\n    var data = null;\n    if (this.schema) {\n      data = fieldify2antDataTable(this.schema.tree);\n      return (data)\n    }\n\n    return ([])\n  }\n\n  render() {\n    const sds = this.state.schemaDataSource;\n\n    return (<div>\n      <FieldifySchemaBuilderModal\n        user={this.state.modalUser}\n        visible={this.state.modal}\n        onCancel={() => this.setState({ modal: false })}\n        onOk={this.itemChanged.bind(this)}\n      />\n\n      <Table columns={this.columns} dataSource={sds} size=\"small\" pagination={{\n        total: sds.length,\n        pageSize: sds.length,\n        hideOnSinglePage: true\n      }} expandable={{ defaultExpandAllRows: true }} />\n    </div>);\n  }\n}\n","\nimport React from 'react'\n\nimport { iterator, assign } from \"fieldify\"\n\n\nimport { Space, Radio, Button } from \"antd\";\n\n\nexport { FieldifySchemaBuilder } from \"./Schema/Builder\"\nexport { FieldifySchemaForm } from \"./Schema/Form\"\n\nexport { FieldifySchema } from \"./Schema/Schema\"\n\nexport class FieldifySchemaRender extends React.Component {\n\n  render() {\n    return (<div>test</div>)\n  }\n}\n\n\n\n","import { input } from \"fieldify\"\n\nimport React from 'react'\nimport styles from './styles.module.css'\n\nimport * as schema from './Schema'\nimport types from './Types'\n\n// just map the input class from fieldify\nexport class Input extends input {}\n\n// export the schema\nexport const Schema = schema;\n\n// export types\nexport const Types = types;\n\n\n"],"names":["FieldifyTypeForm","Component","constructor","props","state","cycle","verify","value","ret","componentDidUpdate","setState","schema","isInjected","onChange","onError","options","$options","handler","$_type","timedChange","cb","speed","_changeTimer","_changeTimerQueue","_changeTimerCb","setTimeout","changeValue","_lastValue","end","status","error","message","feedback","help","render","children","$doc","$required","marginBottom","sm","SignderivaTypeInfo","match","path","prevProps","prevState","SignderivaTypeBuilder","default","pNew","pOld","changed","key","o","n","setup","prev","a","p","configure","changeIt","change","Object","assign","StringForm","TypeForm","Input","placeholder","target","width","StringInfo","TypeInfo","color","Icon","StringBuilder","TypeBuilder","minSize","maxSize","code","types","String","description","class","Info","Builder","Form","TString","NameForm","result","from","setField","first","last","NameInfo","NameBuilder","Name","noFormItem","EmailForm","EmailInfo","EmailBuilder","subAddressing","Checkbox","checked","Email","CheckboxForm","CheckboxInfo","CheckboxBuilder","SelectForm","items","updateItems","push","Select","SelectInfo","SelectBuilder","FieldNameForm","input","user","msg","FieldNameInfo","FieldNameBuilder","FieldName","FieldifySchema","name","compile","FieldifySchemaForm","React","FieldifyInput","getValue","reactive","update","references","clickAddArray","line","set","_value","clickRemoveArrayItem","remove","setValue","follower","utils","orderedRead","index","item","inputPtr","$_key","lineKey","hidden","Array","isArray","source","inputPtr2","$array","min","columns","dataIndex","align","dataSource","$_array","$_nested","$type","length","form","ref","actions","DeleteIcon","$_schematized","child","$_ptr","$_wire","$_access","PlusIcon","total","pageSize","hideOnSinglePage","layout","labelCol","span","wrapperCol","FieldifySchemaBuilderModal","visible","size","allTypes","Types","type","doc","formRef","createRef","newState","receiveHeadForm","console","log","onOk","onCancel","bind","FieldifySchemaBuilder","modal","modalUser","schemaDataSource","updateDataSource","title","handlingAdd","fireOnChange","itemChanged","arg","itemRemove","removeLineup","$_path","notification","success","lineup","getLineup","handlingEdit","modalContent","self","fieldify2antDataTable","wire","current","composite","ObjectIcon","ptr","ArrayIcon","EditIcon","data","tree","sds","defaultExpandAllRows","FieldifySchemaRender","Schema"],"mappings":"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"}