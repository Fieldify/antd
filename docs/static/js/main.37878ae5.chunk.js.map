{"version":3,"sources":["../../../core/lib/fusion.js","../../../core/lib/assign.js","../../../core/lib/iterator.js","../../../core/lib/compile.js","../../../core/lib/types/index.js","../../../core/lib/schema.js","../../../core/lib/types/type.js","../../../core/lib/types/String.js","../../../core/lib/types/Number.js","../../../core/lib/types/Select.js","../../../core/lib/types/Name.js","../../../core/lib/types/Email.js","../../../core/lib/types/Checkbox.js","../../../core/lib/types/Hash.js","../../../core/lib/types/URL.js","../../../core/lib/types/DatePicker.js","../../../core/lib/types/Slug.js","../../../core/lib/types/Color.js","../../../core/lib/types/FieldName.js","../../../core/lib/types/KV.js","../../../core/lib/input.js","../../../../react-recycling/index.js","../../src/lib/TypeForm.js","../../src/lib/TypeRender.js","../../src/lib/TypeInfo.js","../../src/lib/TypeBuilder.js","../../src/Types/String.js","../../src/Types/Name.js","../../src/Types/Email.js","../../src/Types/Number.js","../../src/Types/Checkbox.js","../../src/Types/Select.js","../../src/Types/Object.js","../../src/Types/Array.js","../../src/Types/FieldName.js","../../src/Types/KV.js","../../src/Types.js","../../src/Schema/Schema.js","../../src/lib/TypeDataset.js","../../src/Schema/Form.js","../../src/Schema/BuilderModal.js","../../src/Schema/Builder.js","../../src/Schema/Render.js","../../src/index.js","App.js","index.js","../../../core/index.js","../../../core/lib/utils.js"],"names":["_specialClone","dst","src","a","p","Array","isArray","constructor","name","module","exports","ret","utils","require","fieldifyAssignator","schema","leaf","user","lkey","first","nestedObject","getNO","key","value","save","Object","keys","length","ptr","fieldifyIteratorBuffer","options","this","handler","result","level","onAssign","current","next","input","onEnter","onLeave","onEnd","end","line","no","eachItem","index","oend","iterator","object","arrayResult","next2","arraySchema","$_nested","branch","useless","subResult","push","access","$_access","values","fib","fusion","fieldifyHandler","orgSchema","_access","_accessStack","tmpAccess","nestedOptions","ptrS","noIn","subLine","drive","$_array","pop","String","Number","Select","Name","Email","Checkbox","Hash","URL","DatePicker","Slug","Color","FieldName","KV","compile","assign","types","fieldifySchema","tree","policy","read","write","type","localAssigner","source","$_key","split","typeClass","$type","resolver","console","error","class","$_type","$options","undefined","$_wire","$_hidden","$read","$write","correctedOptions","sanatizeOptions","nonTypeSchematized","typeSchematized","schematizer","patch","extract","$_schematized","bind","handlerSchematized","pv","leafPrivate","test","code","opts","$required","fields","verify","message","output","_filterLine","flow","direction","lineup","beforeLast","shift","bLast","root","last","obj","getLineup","injection","oldLineup","newLineup","saved","newKey","filter","valid","cb","signderivaType","strictRegex","noUnicodeRegex","exported","description","signderivaTypeString","min","max","strict","match","unicode","placeholder","help","$doc","signderivaTypeNumber","isNaN","parseInt","acceptedTypes","default","items","both","integer","float","fieldifyTypeSelector","signderivaTypeName","regex","signderivaTypeEmailAddress","toLowerCase","fieldifyTypeCheckbox","_sha1","_sha256","_sha512","signderivaTypeHash","mode","sha1Verifier","sha256Verifier","sha512Verifier","signderivaTypeURL","maxLength","minLength","signderivaTypeDatePicker","range","signderivaTypeSlug","signderivaTypeColor","fieldifyType","fieldifyTypeFieldName","signderivaTypeKV","fieldifyInput","_value","verifying","data","node","get","create","schemaCur","inputCur","field","inArray","splice","RecycledComponent","props","context","updater","state","cycle","changed","setState","React","Component","FieldifyTypeForm","componentDidUpdate","feedback","status","timedChange","setTimeout","changeValue","speed","render","isInjected","label","required","validateStatus","hasFeedback","style","marginBottom","wrapperCol","sm","FieldifyTypeRender","injected","subRender","width","SignderivaTypeInfo","SignderivaTypeBuilder","pNew","pOld","prevProps","setup","configure","changeIt","change","StringForm","onChange","target","TypeForm","StringRender","TypeRender","StringInfo","color","TypeInfo","StringBuilder","minSize","maxSize","TypeBuilder","Info","Builder","Form","Render","TString","NameForm","setField","gutter","className","span","NameInfo","NameRender","getDerivedStateFromProps","final","NameBuilder","noFormItem","EmailForm","EmailInfo","EmailRender","EmailBuilder","subAddressing","checked","NumberForm","NumberInfo","NumberRender","NumberBuilder","CheckboxForm","CheckboxInfo","CheckboxBuilder","SelectForm","updateItems","SelectInfo","SelectRender","SelectBuilder","ObjectClass","ArrayClass","configuration","FieldNameForm","msg","FieldNameInfo","FieldNameBuilder","KVForm","computeDataSource","ds","actions","onClick","handleModalChange","modalCurrent","openModal","modalError","modalInitial","modal","removeKey","editedButton","mc","columns","title","dataIndex","align","layout","labelCol","centered","closable","visible","onOk","onCancel","size","dataSource","pagination","total","pageSize","hideOnSinglePage","KVInfo","KVRender","showHeader","KVBuilder","FieldifySchema","Types","TypeDataset","update","getValue","clickAddArray","inputValue","reactive","clickRemoveArrayItem","setValue","up","follower","schematized","item","schematizedSrc","sourceSchematized","inputPtr","lineKey","inputPtr2","child","toPush","form","onError","noStyle","extra","verticalAlign","bordered","formRef","FieldifySchemaForm","generator","allTypes","allTypesNoArray","baseSchema","$position","doc","position","$default","FieldifySchemaBuilderModal","edition","original","val","content","driveSchema","Type","currentSchema","formChanged","handleOK","nvalue","npath","oldPath","newPath","ref","modalUser","schemaDataSource","updateDataSource","fireOnChange","ex","itemChanged","arg","notification","modalContent","itemRemove","handlingAdd","path","handlingEdit","self","wire","composite","children","fieldify2antDataTable","onConfirm","okText","cancelText","sds","expandable","defaultExpandAllRows","Schema","FieldifySchemaBuilder","FieldifySchemaRender","TabPane","Tabs","App","initial","company","email","age","address","home","street","zip","country","nestedArray","$array","inputRender","json","JSON","stringify","builder","padding","xxl","defaultActiveKey","tab","builderChanged","Item","Group","Button","ReactDOM","document","getElementById","leafRegex","internal","$maxArray","isThereSubObject","hasOwnProperty","isThereObjectParams","eachObject","objs","executor","aObjects","process","nextTick","o","list","sync","finish","exec","substr","orderedRead","dup","ordered","sort","b"],"mappings":"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","file":"static/js/main.37878ae5.chunk.js","sourcesContent":["function _specialClone (dst, src) {\n  for (var a in src) {\n    const p = src[a]\n    if (Array.isArray(p)) {\n      if (!Array.isArray(dst[a])) dst[a] = [{}]\n      _specialClone(dst[a][0], p[0])\n    }\n    else if (p && typeof p === 'object') {\n      // here we only remap javascript Object\n      // all other object are pointed\n      if (p.constructor.name === 'Object') {\n        if (!dst[a]) dst[a] = {}\n        _specialClone(dst[a], p)\n      }\n      else {\n        dst[a] = src[a]\n      }\n    }\n    else {\n      dst[a] = src[a]\n    }\n  }\n}\n\n/**\n * Fusionning 2 objects schema, returning new one\n * @param  {Object} dst Destination object\n * @param  {Object} src Source object\n * @return {Object}     New object\n */\nfunction fieldifyFusion (dst, src) {\n  const ret = {}\n\n  _specialClone(ret, dst)\n  _specialClone(ret, src)\n\n  return (ret)\n}\n\nmodule.exports = fieldifyFusion\n","const utils = require('./utils')\n\n/**\n  * Generator deep iterator is a complex function to assign a\n  * new struture of a current schema\n  * @param  {Object} schema Source schema to follow\n  * @param  {fieldifyAssignator~callback} leaf Executed on each leaf\n  * @param  {Mixed} user User pointer\n  * @param  {lkey} lkey Internal use\n  */\nfunction fieldifyAssignator (schema, leaf, user, lkey, first) {\n  const { nestedObject } = utils.getNO(schema)\n\n  var ret = {}\n\n  if (first === false) {\n    const lret = leaf(user, ret, schema, lkey)\n    if (lret === false) return (ret)\n  }\n\n  // follow the rest of keys\n  for (var a in nestedObject) {\n    const key = nestedObject[a][0]\n    const value = schema[key]\n\n    const save = lkey\n    lkey = lkey ? lkey + '.' + key : key\n    if (Array.isArray(value)) {\n      ret[key] = [fieldifyAssignator(value[0], leaf, user, lkey, false)]\n\n      // prune branch\n      if (Object.keys(ret[key][0]).length === 0) delete ret[key]\n    }\n    else {\n      ret[key] = fieldifyAssignator(value, leaf, user, lkey, false)\n\n      // prune the branch\n      if (Object.keys(ret[key]).length === 0) delete ret[key]\n    }\n\n    // restore state\n    lkey = save\n  }\n\n  if (first !== false) {\n    for (var key in ret) {\n      const ptr = ret[key]\n\n      if (typeof ptr === 'object' && Object.keys(ptr) === 0) {\n        delete ret[key]\n      }\n    }\n  }\n  return (ret)\n}\n\n/**\n * This callback is displayed as part of the Requester class.\n * @callback fieldifyAssignator~callback\n * @param {number} responseCode\n * @param {string} responseMessage\n */\n\nmodule.exports = fieldifyAssignator\n","const utils = require('./utils')\n\nclass fieldifyIteratorBuffer {\n  constructor (options) {\n    this.options = options\n    this.handler = options.handler\n    this.result = {}\n    this.level = 0\n\n    // correct callbacks\n    options.onAssign = options.onAssign || ((current, next) => {\n      // generic assignation\n      current.result[current.key] = current.input\n      next()\n    })\n    options.onEnter = options.onEnter || ((current) => { })\n    options.onLeave = options.onLeave || ((current) => { })\n    options.onEnd = options.onEnd || ((result) => { })\n  }\n\n  branch (schema, input, end, line) {\n    line = line || '.'\n    const no = utils.getNO(schema)\n    const result = {}\n    this.level++\n\n    // when entering in a branch\n    this.options.onEnter(schema)\n\n    // follow each element of the current branch\n    utils.eachItem(no.nestedObject, (index, ptr, next, oend) => {\n      if (oend === true) {\n        this.level--\n\n        // when leaving in a branch\n        this.options.onLeave(schema)\n\n        // initial level\n        if (this.level === 0) {\n          this.result = result\n          end(this, result)\n        }\n        // level up\n        else {\n          end(this, result)\n        }\n\n        return\n      }\n\n      const key = ptr[0]\n\n      const current = {\n        iterator: this,\n        key: key,\n        object: ptr[1],\n        input: input ? input[ptr[0]] : null,\n        line: line + key,\n        result: result\n      }\n\n      if (Array.isArray(current.object)) {\n        // this is an input error\n        if (!Array.isArray(current.input)) {\n          // here we reset the input as we have\n          // to follow all the schema\n          current.input = null\n\n          // here is a problem. the schema must\n          // be followed at least one time in\n          // order to reveal assignation errors\n          // and notabely required fields.\n          this.branch(\n            current.object[0],\n            null,\n            (useless, subResult) => {\n              next()\n            },\n            key\n          )\n        }\n        else {\n          // ok at this step we can follow the input\n          // as we are sure is it an array.\n          // Array is just a bridge between 2 branch.\n          const arrayResult = []\n          utils.eachItem(current.input, (index, ptr, next2, oend) => {\n            if (oend === true) {\n              // assign to result\n              if (arrayResult.length > 0) result[key] = arrayResult\n\n              // return to normal mode\n              next()\n\n              return\n            }\n\n            // management of array with direct and indirect assignment\n            const arraySchema = current.object[0]\n\n            if (arraySchema.$_nested === true) {\n              // this is an input error\n              if (typeof current.input !== 'object') {\n                // here we reset the input as we have\n                // to follow all the schema\n                ptr = null\n              }\n\n              // console.log(\"ARRAY NEST\", arraySchema, ptr)\n\n              // change branche because of nested branch\n              this.branch(\n                arraySchema,\n                ptr,\n                (useless, subResult) => {\n                  if (Object.keys(subResult).length > 0) arrayResult.push(subResult)\n                  next2()\n                },\n                key\n              )\n            }\n            // here we can get and compare values\n            else {\n              current.input = ptr\n\n              // console.log(\"ARRAY DIRECT\");\n\n              // creation of a shortcut on the access fields\n              current.access = arraySchema.$_access\n              current.result = {}\n\n              // execution of user assignment\n              this.options.onAssign(current, () => {\n                // store as array if there is result\n                const values = Object.values(current.result)\n                if (values.length > 0) {\n                  arrayResult.push(values[0])\n                }\n\n                next2()\n              })\n            }\n          })\n        }\n      }\n      // here the input must be an object\n      else if (current.object.$_nested === true) {\n        // this is an input error\n        if (typeof current.input !== 'object') {\n          // here we reset the input as we have\n          // to follow all the schema\n          current.input = null\n        }\n\n        this.branch(\n          current.object,\n          current.input,\n          (useless, subResult) => {\n            if (Object.keys(subResult).length > 0) result[key] = subResult\n            next()\n          },\n          key\n        )\n      }\n      // here we can get and compare values\n      else {\n        // put a shortcut\n        current.access = current.object.$_access\n\n        // execution of user assignment\n        this.options.onAssign(current, next)\n      }\n    })\n  }\n}\n\nfunction fieldifyIterator (options) {\n  const fib = new fieldifyIteratorBuffer(options)\n\n  fib.branch(options.handler.schema, options.input, () => {\n    // end user execution\n    fib.options.onEnd(fib)\n  })\n}\n\nmodule.exports = fieldifyIterator\n","const utils = require('./utils')\nconst fusion = require('./fusion')\n\nclass fieldifyHandler {\n  constructor (schema) {\n    this.orgSchema = schema\n    this.schema = fusion({}, schema)\n\n    this._access = {}\n    this._accessStack = []\n  }\n\n  branch (schema, line) {\n    line = line || ''\n    const no = utils.getNO(schema)\n\n    // construct options of the current branch\n    const tmpAccess = {}\n    for (var a in no.nestedOptions) {\n      const ptr = no.nestedOptions[a]\n      tmpAccess[ptr[0]] = ptr[1]\n    }\n\n    this._access = fusion(this._access, tmpAccess)\n\n    if (no.nestedObject.length > 0) schema.$_nested = true\n\n    for (var key in no.nestedObject) {\n      const ptrS = no.nestedObject[key]\n      const noIn = utils.getNO(ptrS[1])\n      const subLine = line.length > 0 ? line + '.' + ptrS[0] : ptrS[0]\n      var drive = ptrS[1]\n\n      // current key is an array\n      if (Array.isArray(ptrS[1])) {\n        drive = ptrS[1][0]\n        drive.$_array = true\n      }\n      // the current key is nested\n      else if (noIn.nestedObject.length > 0) {\n        drive.$_nested = true\n      }\n\n      // push on the stack current accesses\n      this._accessStack.push(this._access)\n\n      // remove useless private info\n      delete this._access.$_nested\n      delete this._access.$_array\n\n      // enter in the branch\n      this.branch(drive, subLine)\n\n      // set the current access\n      drive.$_access = this._access\n\n      // restore the state of access\n      this._access = this._accessStack.pop()\n    }\n  }\n}\n\nfunction fieldifyCompiler (schema) {\n  const fib = new fieldifyHandler(schema)\n\n  // process nested object\n  fib.branch(fib.schema)\n\n  //    console.log(JSON.stringify(fib.schema, null, \"\\t\"))\n\n  return (fib)\n}\n\nmodule.exports = fieldifyCompiler\n","const String = require('./String')\nconst Number = require('./Number')\nconst Select = require('./Select')\nconst Name = require('./Name')\nconst Email = require('./Email')\nconst Checkbox = require('./Checkbox')\nconst Hash = require('./Hash')\nconst URL = require('./URL')\nconst DatePicker = require('./DatePicker')\nconst Slug = require('./Slug')\nconst Color = require('./Color')\nconst FieldName = require('./FieldName')\nconst KV = require('./KV')\n\nmodule.exports = {\n  String,\n  Number,\n  Select,\n  Name,\n  Email,\n  Checkbox,\n  Hash,\n  URL,\n  DatePicker,\n  Slug,\n  Color,\n  FieldName,\n  KV\n}\n","\nconst fusion = require('./fusion')\nconst compile = require('./compile')\nconst iterator = require('./iterator')\nconst assign = require('./assign')\nconst utils = require('./utils')\nconst types = require('./types')\n\nclass fieldifySchema {\n  constructor (name, options) {\n    if (!options) options = {}\n\n    this.tree = options.tree || {}\n    this.policy = options.policy || {\n      read: true,\n      write: true\n    }\n  }\n\n  resolver (type) {\n    return (types[type])\n  }\n\n  fusion (schema) {\n    this.tree = fusion(this.tree, schema)\n  }\n\n  /**\n   * Compile the targetted schema\n   * @param {Object} schema The schema\n   */\n  compile (schema) {\n    if (schema) this.tree = schema\n\n    const localAssigner = (user, dst, object, source) => {\n      dst.$_key = ('.' + source).split('.').pop()\n\n      for (var a in object) dst[a] = object[a]\n\n      var typeClass = null\n\n      // the type is a string, use the resolver to retrieve\n      // the good object control\n      if (typeof object.$type === 'string') {\n        dst.$type = this.resolver(object.$type)\n        if (!dst.$type) {\n          console.error('Can not resolv type ' + object.$type)\n          return (true)\n        }\n        typeClass = dst.$type.class\n      }\n      else if (object.$type) {\n        typeClass = object.$type.class\n      }\n\n      // create the type with the desired options\n\n      dst.$_type = typeClass ? new typeClass(object.$options) : undefined\n      dst.$_wire = '.' + source\n\n      // apply default policy\n      // use with caution\n      if (user) {\n        dst.$_hidden = true\n        dst.$_wire = user + dst.$_wire\n      }\n\n      dst.$read = '$read' in dst ? dst.$read : this.policy.read\n      dst.$write = '$write' in dst ? dst.$write : this.policy.write\n\n      // sanatize options\n      if (!user && dst.$_type && object.$options) {\n        const correctedOptions = dst.$_type.sanatizeOptions(object.$options || {})\n        dst.$options = correctedOptions\n      }\n\n      return (true)\n    }\n\n    // here we store the \"original\" non type schematized use\n    // to work with lineup and to drive the flow of displaying\n    const nonTypeSchematized = assign(this.tree, localAssigner)\n\n    // extract the schematized types\n    // this will be use in background for verification\n    // and filtering\n    const typeSchematized = assign(nonTypeSchematized, (user, dst, object, source) => {\n      if (object.$_type && object.$_type.schematizer) {\n        const patch = object.$_type.schematizer(object)\n        if (patch !== null) {\n          for (var a in object) dst[a] = object[a]\n\n          // extract sub fields\n          const extract = assign(patch, localAssigner, object.$_wire)\n          for (var a in extract) dst[a] = extract[a]\n\n          dst.$_schematized = true\n        }\n        else for (var a in object) dst[a] = object[a]\n      }\n      else for (var a in object) dst[a] = object[a]\n\n      return (true)\n    })\n\n    // we will finally based the search on the assigned extraction\n    this.handler = compile(nonTypeSchematized, this.resolver.bind(this))\n    this.handlerSchematized = compile(typeSchematized, this.resolver.bind(this))\n  }\n\n  /**\n   * Export the current working schema\n   */\n  export (pv) {\n    const localAssigner = (user, dst, object, source) => {\n      if (object.$_hidden === true) return (true)\n\n      for (var a in object) {\n        if (utils.leafPrivate.test(a) && pv === true) {\n          dst[a] = object[a]\n        }\n        else if (utils.leaf.test(a) && utils.leafPrivate.test(a) === false && pv !== true) {\n          dst[a] = object[a]\n        }\n      }\n\n      if (typeof dst.$type !== 'string' && dst.$type) dst.$type = dst.$type.code\n\n      return (true)\n    }\n\n    //  prune and return\n    return (assign(this.handler.schema, localAssigner))\n  }\n\n  /**\n   * Verify User Input following Schema Definition\n   * @param {*} input User input\n   * @param {*} onEnd Function is async, fired when verification is done\n   */\n  verify (input, onEnd) {\n    const ret = {\n      error: false\n    }\n\n    const opts = {\n      handler: this.handlerSchematized,\n      input: input,\n\n      onAssign: (current, next) => {\n        // get different pointer we need\n        const { access, input } = current\n\n        // check if access schema has right to write\n        if (access.$write !== true) {\n          // do not response to avoid field discovery\n          // just ignore the field\n          // if user set required without then it\n          // will have logic conflict\n          return (next())\n        }\n\n        // check if the field is required\n        if (access.$required === true && input === undefined) {\n          ret.error = true\n          if (!ret.fields) ret.fields = {}\n          ret.fields[current.line] = 'Required Field'\n          return (next())\n        }\n        // in opposite, if the field is not required\n        // then we should not run the verifier\n        if (access.$required !== true && input === undefined) {\n          // just a pass through\n          return (next())\n        }\n\n        // run the type dependant verifier\n        if (access.$_type) {\n          access.$_type.verify(input, (error, message) => {\n            // there is error during verification\n            if (error === true) {\n              ret.error = true\n              if (!ret.fields) ret.fields = {}\n              ret.fields[current.line] = message\n              return (next())\n            }\n\n            // just assign value\n            current.result[current.key] = input\n            next()\n          })\n        }\n        else {\n          ret.error = true\n          if (!ret.fields) ret.fields = {}\n          ret.fields[current.line] = 'Need field interpretor'\n          return (next())\n        }\n      },\n\n      onEnd: (iterator) => {\n        ret.result = iterator.result\n        onEnd(ret)\n      }\n    }\n    iterator(opts)\n  }\n\n  /**\n   * Filter Database Output following Schema Definition\n   * @param {*} output\n   * @param {*} onEnd\n   */\n  filter (output, onEnd) {\n    if (Array.isArray(output)) {\n      const ret = {\n        error: false,\n        result: []\n      }\n      utils.eachItem(output, (index, ptr, next, oend) => {\n        if (oend === true) return (onEnd(ret))\n\n        // apply filter on each entry\n        this._filterLine(ptr, ({ result }) => {\n          ret.result.push(result)\n          next()\n        })\n      })\n    }\n    else {\n      this._filterLine(output, onEnd)\n    }\n  }\n\n  /**\n   * Encode the input data following fieldify schema\n   * @param {*} input\n   * @param {*} onEnd When operation is done\n   */\n  encode (input, onEnd) {\n    this.flow('encode', input, onEnd)\n  }\n\n  /**\n   * Decode the input data following fieldify schema\n   * @param {*} input\n   * @param {*} onEnd When operation is done\n   */\n  decode (input, onEnd) {\n    this.flow('decode', input, onEnd)\n  }\n\n  /**\n   * Execute type callback following the flow of the schema\n   * @param {String} direction The executed callback inside the type\n   * @param {*} input Input data\n   * @param {*} onEnd Called when finish to read\n   */\n  flow (direction, input, onEnd) {\n    const ret = {\n      error: false\n    }\n\n    const opts = {\n      handler: this.handlerSchematized,\n      input: input,\n\n      onAssign: (current, next) => {\n        // get different pointer we need\n        const { access, result, input } = current\n\n        // run the type dependant verifier\n        access.$_type[direction](input, (output) => {\n          // just assign value\n          result[current.key] = output\n          next()\n        })\n      },\n\n      onEnd: (iterator) => {\n        ret.result = iterator.result\n        onEnd(ret)\n      }\n    }\n    iterator(opts)\n  }\n\n  /**\n   * Get lineup allow to read the schema following a string\n   * @param {String} lineup String, field separate by points\n   * @param {Boolean} beforeLast Return the before last instead of the last one\n   * @returns {Object}\n   *\n   * The string must start with a point:\n   * getLineup(\".\") = get the root schema\n   * getLineup(\".fieldA.fieldB\")\n   */\n  getLineup (lineup, beforeLast) {\n    const fields = lineup.split('.')\n    fields.shift()\n\n    var bLast = this.handler.schema\n    var root = this.handler.schema\n    for (var a = 0; a < fields.length; a++) {\n      const field = fields[a]\n      var ptr = root[field]\n      bLast = root\n\n      if (Array.isArray(ptr)) ptr = ptr[0]\n\n      if (!ptr) return (beforeLast === true ? { beforeLast: bLast, last: null, fields } : null)\n      root = ptr\n    }\n\n    return (beforeLast === true ? { beforeLast: bLast, last: root, fields } : root)\n  }\n\n  /**\n   * Set an object in the schema following the lineup string\n   * @param {String} lineup\n   * @param {Object} obj\n   *\n   * The string must start with a point:\n   * setLineup(\".fieldA.fieldB\", {$type: Types.String})\n   */\n  setLineup (lineup, obj) {\n    const root = this.getLineup(lineup, true)\n    const injection = root.beforeLast\n    const key = root.fields[root.fields.length - 1]\n\n    if (!injection) return (false)\n\n    // inject the field as it into the schema\n    injection[key] = obj\n\n    // during the injection and to avoid recompilation\n    // we will dynamically resolv the type\n    if (obj.$type && typeof obj.$type === 'string') {\n      obj.$type = this.resolver(obj.$type)\n    }\n\n    return (true)\n  }\n\n  /**\n   * Rename a line up\n   * @param {String} oldLineup\n   * @param {String} newLineup\n   */\n  renameLineup (oldLineup, newLineup) {\n    // get old lineup info\n    const root = this.getLineup(oldLineup, true)\n    const injection = root.beforeLast\n    const key = root.fields[root.fields.length - 1]\n    const saved = injection[key]\n\n    if (!injection || !saved) return (false)\n\n    // prepare new lineup\n    const fields = newLineup.split('.')\n    fields.shift()\n    const newKey = fields[fields.length - 1]\n\n    if (!newKey) return (false)\n\n    // restore on the new place\n    injection[newKey] = saved\n\n    return (true)\n  }\n\n  /**\n   * Remove object (and everything else) following the lineup String\n   * @param {String} lineup\n   */\n  removeLineup (lineup) {\n    const root = this.getLineup(lineup, true)\n    const injection = root.beforeLast\n    const key = root.fields[root.fields.length - 1]\n\n    if (!injection) return (false)\n\n    // inject the field as it into the schema\n    delete injection[key]\n\n    return (true)\n  }\n\n  _filterLine (input, onEnd) {\n    const ret = {\n      error: false\n    }\n\n    const opts = {\n      handler: this.handlerSchematized,\n      input: input,\n\n      onAssign: (current, next) => {\n        // get different pointer we need\n        const { access, result, input } = current\n\n        // check if access schema has right to write\n        if (access.$read !== true) {\n          // do not response to avoid field discovery\n          // just ignore the field\n          // if user set required without then it\n          // will have logic conflict\n          return (next())\n        }\n\n        // run the type dependant verifier\n        access.$_type.filter(input, (valid, message) => {\n          if (valid !== true) {\n            return (next())\n          }\n\n          // just assign value\n          result[current.key] = input\n          next()\n        })\n      },\n\n      onEnd: (iterator) => {\n        ret.result = iterator.result\n        onEnd(ret)\n      }\n    }\n    iterator(opts)\n  }\n}\n\nmodule.exports = fieldifySchema\n","module.exports = class fieldifyType {\n  constructor (options) {\n    this.options = options || {}\n  }\n\n  encode (input, cb) {\n    if (cb) cb(input)\n    return (input)\n  }\n\n  decode (input, cb) {\n    if (cb) cb(input)\n    return (input)\n  }\n\n  verify (input, cb) {\n    if (cb) cb(false)\n    return (false)\n  }\n\n  filter (input, cb) {\n    if (cb) cb(true)\n    return (true)\n  }\n\n  schematizer () {\n    return (null)\n  }\n\n  configuration () {\n    return (null)\n  }\n\n  // will be auto generate from configuration\n  sanatizeOptions (input) {\n    const output = {}\n    return (output)\n  }\n}\n","const signderivaType = require('./type')\n\nconst strictRegex = /`|~|!|@|#|\\$|%|\\^|&|\\*|\\(|\\)|\\+|=|\\[|\\{|\\]|\\}|\\||\\\\|'|<|,|\\.|>|\\?|\\/|\"|;|:/gm\n\nconst noUnicodeRegex = /^[a-z0-9\\-_\\s]+$/i\n\nconst exported = {\n  code: 'String',\n  description: 'String of characters'\n}\n\nclass signderivaTypeString extends signderivaType {\n  verify (input, cb) {\n    if (typeof input !== 'string') {\n      return (cb(true, 'Not a string'))\n    }\n\n    if ('min' in this.options && input.length < this.options.min) {\n      return (cb(true, `String is too short (min: ${this.options.min})`))\n    }\n\n    if ('max' in this.options && input.length > this.options.max) {\n      return (cb(true, `String is too long (max: ${this.options.max})`))\n    }\n\n    if (this.options.strict === true && input.match(strictRegex)) {\n      return (cb(true, 'Forbidden special chars'))\n    }\n\n    if (this.options.unicode === false && !noUnicodeRegex.test(input)) {\n      return (cb(true, 'Unicode is forbidden'))\n    }\n\n    cb(false)\n  }\n\n  sanatizeOptions (input) {\n    const output = {\n      placeholder: typeof input.placeholder === 'string' ? input.placeholder : undefined,\n      help: typeof input.help === 'string' ? input.help : undefined,\n      min: typeof input.min === 'number' ? input.min : undefined,\n      max: typeof input.max === 'number' ? input.max : undefined,\n      strict: typeof input.strict === 'boolean' ? input.strict : undefined,\n      unicode: typeof input.unicode === 'boolean' ? input.unicode : undefined\n    }\n    return (output)\n  }\n\n  configuration () {\n    return ({\n      placeholder: {\n        $doc: 'Field placeholder',\n        $required: false,\n        $type: 'String'\n      },\n      help: {\n        $doc: 'Help / Bottom message',\n        $required: false,\n        $type: 'String'\n      }\n    })\n  }\n}\n\nexported.class = signderivaTypeString\nmodule.exports = exported\n","const signderivaType = require('./type')\n\n// const noUnicodeRegex = /^[0-9]+$/i\n\nconst exported = {\n  code: 'Number',\n  description: 'Various Numbers'\n}\n\nfunction isInt (n) {\n  return n % 1 === 0\n}\n\nclass signderivaTypeNumber extends signderivaType {\n  verify (input, cb) {\n    if (isNaN(input)) return (cb(true, 'Not a number'))\n\n    if (typeof input === 'string') input = parseInt(input)\n\n    const integer = isInt(input)\n\n    // if (this.options.unicode === false && !noUnicodeRegex.test(input)) {\n    //   return (cb(true, 'Unicode is forbidden'))\n    // }\n\n    cb(false)\n  }\n\n  sanatizeOptions (input) {\n    const output = {\n      // placeholder: typeof input.placeholder === 'string' ? input.placeholder : undefined,\n      // help: typeof input.help === 'string' ? input.help : undefined,\n      // min: typeof input.min === 'number' ? input.min : undefined,\n      // max: typeof input.max === 'number' ? input.max : undefined,\n      // strict: typeof input.strict === 'boolean' ? input.strict : undefined,\n      // unicode: typeof input.unicode === 'boolean' ? input.unicode : undefined\n    }\n    return (output)\n  }\n\n  configuration () {\n    return ({\n      acceptedTypes: {\n        $doc: 'What kind of number to accept',\n        $required: true,\n        $type: 'Select',\n        $options: {\n          default: 'both',\n          items: {\n            both: 'Both Integer & Float',\n            integer: 'Only Integer',\n            float: 'Only Float'\n          }\n        }\n      }\n    })\n  }\n}\n\nexported.class = signderivaTypeNumber\nmodule.exports = exported\n","const fieldifyType = require('./type')\n\nclass fieldifyTypeSelector extends fieldifyType {\n  sanatizeOptions (input) {\n    const output = {\n      placeholder: typeof input.placeholder === 'string' ? input.placeholder : undefined,\n      help: typeof input.help === 'string' ? input.help : undefined,\n      default: typeof input.default === 'string' ? input.default : undefined,\n      items: typeof input.items === 'object' ? input.items : undefined\n    }\n    return (output)\n  }\n\n  configuration () {\n    return ({\n      default: {\n        $doc: 'Default selection (key)',\n        $required: false,\n        $type: 'String'\n      },\n      items: {\n        $doc: 'Items in selector',\n        $required: true,\n        $type: 'KV'\n      }\n    })\n  }\n\n}\n\nmodule.exports = {\n  code: 'Select',\n  description: 'Selector',\n  class: fieldifyTypeSelector\n}\n","const signderivaType = require('./type')\n\nclass signderivaTypeName extends signderivaType {\n  schematizer () {\n    return ({\n      first: {\n        $type: 'String',\n        $options: {\n          strict: true,\n          min: 2,\n          max: 128,\n          unicode: false\n        }\n      },\n      last: {\n        $type: 'String',\n        $options: {\n          strict: true,\n          min: 2,\n          max: 128,\n          unicode: true\n        }\n      }\n    })\n  }\n}\n\nmodule.exports = {\n  code: 'Name',\n  description: 'Name (first and last name)',\n  class: signderivaTypeName\n}\n","const signderivaType = require('./type')\n\n// eslint-disable-next-line no-control-regex\nconst regex = /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/\n\nclass signderivaTypeEmailAddress extends signderivaType {\n  verify (input, cb) {\n    if (typeof input !== 'string') {\n      return (cb(true, 'Not an e-mail'))\n    }\n\n    const ret = regex.test(input)\n    if (ret !== true) return (cb(true, 'Invalid e-mail address'))\n\n    return (cb(false))\n  }\n\n  encode (input, cb) {\n    input = input.toLowerCase()\n    if (cb) cb(input)\n    return (input)\n  }\n}\n\nmodule.exports = {\n  code: 'Email',\n  description: 'E-mail address',\n  class: signderivaTypeEmailAddress\n}\n","const fieldifyType = require('./type')\n\nclass fieldifyTypeCheckbox extends fieldifyType {\n\n}\n\nmodule.exports = {\n  code: 'Checkbox',\n  description: 'Checkbox options',\n  class: fieldifyTypeCheckbox\n}\n","const signderivaType = require('./type')\n\n// Support\n// SHA1\n// SHA256 < default\n// SHA512\n\nconst _sha1 = /\\b[0-9a-f]{5,40}\\b/\nconst _sha256 = /\\b[A-Fa-f0-9]{64}\\b/\nconst _sha512 = /\\b[A-Fa-f0-9]{128}\\b/\n\nclass signderivaTypeHash extends signderivaType {\n  constructor (options) {\n    super(options)\n\n    switch (this.options.mode) {\n      case 'sha1':\n        this.verify = this.sha1Verifier.bind(this)\n        break\n\n      default:\n      case 'sha256':\n        this.verify = this.sha256Verifier.bind(this)\n        break\n\n      case 'sha512':\n        this.verify = this.sha512Verifier.bind(this)\n        break\n    }\n  }\n\n  sha1Verifier (input, cb) {\n    if (!input) {\n      if (cb) cb(false)\n      return (false)\n    }\n\n    const ret = _sha1.test(input)\n    if (cb) cb(ret)\n    return (ret)\n  }\n\n  sha256Verifier (input, cb) {\n    if (!input) {\n      if (cb) cb(false)\n      return (false)\n    }\n    const ret = _sha256.test(input)\n    if (cb) cb(ret)\n    return (ret)\n  }\n\n  sha512Verifier (input, cb) {\n    if (!input) {\n      if (cb) cb(false)\n      return (false)\n    }\n    const ret = _sha512.test(input)\n    if (cb) cb(ret)\n    return (ret)\n  }\n}\n\nmodule.exports = {\n  code: 'Hash',\n  description: 'Computer Hash',\n  class: signderivaTypeHash\n}\n","const signderivaType = require('./type')\n\n// Support\n// SHA1\n// SHA256 < default\n// SHA512\n\n// eslint-disable-next-line no-useless-escape\nconst regex = /^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$/g\n\nclass signderivaTypeURL extends signderivaType {\n  constructor (options) {\n    super(options)\n\n    if (!this.options.maxLength) this.options.maxLength = 256\n    if (!this.options.minLength) this.options.minLength = 8\n  }\n\n  verifier (input, cb) {\n    if (!input) {\n      if (cb) cb(false)\n      return (false)\n    }\n\n    if (typeof input !== 'string') {\n      if (cb) cb(false)\n      return (false)\n    }\n\n    if (input.length <= 0 || input.length > this.options.maxLength) {\n      if (cb) cb(false)\n      return (false)\n    }\n\n    const ret = regex.test(input)\n    if (cb) cb(ret)\n    return (ret)\n  }\n}\n\nmodule.exports = {\n  code: 'URL',\n  description: 'URL',\n  class: signderivaTypeURL\n}\n","const signderivaType = require('./type')\n\n// const regex = /^((0x){0,1}|#{0,1})([0-9A-F]{8}|[0-9A-F]{6})$/ig\n\nclass signderivaTypeDatePicker extends signderivaType {\n  constructor (options) {\n    super(options)\n    if (!('range' in this.options)) this.options.range = false\n  }\n}\n\nmodule.exports = {\n  code: 'DatePicker',\n  description: 'Date Picker',\n  class: signderivaTypeDatePicker\n}\n","const signderivaType = require('./type')\n\nconst regex = /^[a-z0-9]+(?:-[a-z0-9]+)*$/g\n\nclass signderivaTypeSlug extends signderivaType {\n  verifier (input, cb) {\n    if (!input) {\n      if (cb) cb(false)\n      return (false)\n    }\n\n    if (typeof input !== 'string') {\n      if (cb) cb(false)\n      return (false)\n    }\n\n    const ret = regex.test(input)\n    if (cb) cb(ret)\n    return (ret)\n  }\n}\n\nmodule.exports = {\n  code: 'Slug',\n  description: 'Slug name',\n  class: signderivaTypeSlug\n}\n","const signderivaType = require('./type')\n\nconst regex = /^((0x){0,1}|#{0,1})([0-9A-F]{8}|[0-9A-F]{6})$/ig\n\nclass signderivaTypeColor extends signderivaType {\n  verifier (input, cb) {\n    if (!input) {\n      if (cb) cb(false)\n      return (false)\n    }\n\n    if (typeof input !== 'string') {\n      if (cb) cb(false)\n      return (false)\n    }\n\n    const ret = regex.test(input)\n    if (cb) cb(ret)\n    return (ret)\n  }\n}\n\nmodule.exports = {\n  code: 'Color',\n  description: 'HTML Color',\n  class: signderivaTypeColor\n}\n","const fieldifyType = require('./type')\n\nconst regex = /^([a-z0-9]+)$/i\n\n\nclass fieldifyTypeFieldName extends fieldifyType {\n  verify (input, cb) {\n    if (!input) {\n      return (cb(true))\n    }\n\n    if (typeof input !== 'string') {\n      return (cb(true, 'Not a string'))\n    }\n\n    const ret = regex.test(input)\n    if (!ret) return (cb(true, 'Forbidden special chars'))\n\n    return (cb(false))\n  }\n}\n\nmodule.exports = {\n  code: 'FieldName',\n  description: 'Restricted Field Name',\n  class: fieldifyTypeFieldName\n}\n","const signderivaType = require('./type')\n\nconst regex = /^([a-z0-9]+)$/i\n\nclass signderivaTypeKV extends signderivaType {\n  verify (input, cb) {\n    if (!input || typeof input !== 'object' || input.constructor.name !== 'Object') {\n      return (cb(true, 'Not a KV'))\n    }\n\n    for (var key in input) {\n      // const value = input[key]\n\n      // verify the key\n      const ret = regex.test(key)\n      if (!ret) return (cb(true, 'Invalid key name ' + key))\n    }\n\n    cb(false)\n  }\n\n  // sanatizeOptions (input) {\n  //   const output = {\n  //     placeholder: typeof input.placeholder === 'string' ? input.placeholder : undefined,\n  //     help: typeof input.help === 'string' ? input.help : undefined,\n  //     min: typeof input.min === 'number' ? input.min : undefined,\n  //     max: typeof input.max === 'number' ? input.max : undefined,\n  //     strict: typeof input.strict === 'boolean' ? input.strict : undefined,\n  //     unicode: typeof input.unicode === 'boolean' ? input.unicode : undefined\n  //   }\n  //   return (output)\n  // }\n\n  configuration () {\n    return ({\n      min: {\n        $doc: 'Minimun of items',\n        $required: false,\n        $type: 'Number',\n        $options: {\n          acceptedTypes: 'integer'\n        }\n      },\n      max: {\n        $doc: 'Maximun of items',\n        $required: false,\n        $type: 'Number',\n        $options: {\n          acceptedTypes: 'integer'\n        }\n      }\n    })\n  }\n}\n\nmodule.exports = {\n  code: 'KV',\n  description: 'Object with single Key / Value',\n  class: signderivaTypeKV\n}\n","\n// const fusion = require('./fusion')\n// const compile = require('./compile')\n// const iterator = require('./iterator')\n// const assign = require('./assign')\n// const utils = require('./utils')\n\nclass fieldifyInput {\n  constructor (schema, value) {\n    this.schema = schema\n    this._value = value || {}\n    this.verifying = false\n  }\n\n  setValue (input) {\n    this._value = input\n  }\n\n  getValue () {\n    return (this._value)\n  }\n\n  verify (cb) {\n    this.schema.verify(this._value, cb)\n  }\n\n  reset () {\n    this._value = {}\n  }\n\n  set (line, data) {\n    const node = this.get(line, true)\n    if (node) node.input[node.fields[node.fields.length - 1]] = data\n  }\n\n  get (line, create) {\n    const fields = line.split('.')\n    fields.shift()\n\n    var schema = this.schema.handler.schema\n    var input = this._value\n    var schemaCur, inputCur\n\n    // align integers in field name\n    for (var a = 0; a < fields.length; a++) {\n      var field = fields[a]\n      if (!isNaN(field)) {\n        field = parseInt(field)\n        fields[a] = field\n      }\n    }\n\n    // horizontal read\n    var inArray = null\n    schemaCur = schema\n    for (var a = 0; a < fields.length - 1; a++) {\n      var field = fields[a]\n\n      schemaCur = schema[field]\n      inputCur = input[field]\n\n      if (Array.isArray(schemaCur)) {\n        inArray = schemaCur[0]\n\n        // check whether input is ready for array\n        if (!inputCur || !Array.isArray(inputCur)) {\n          // malformed input\n          if (create !== true) return (null)\n\n          // reconstruct the input\n          input[field] = []\n        }\n\n        // swap schema and input\n        inputCur = input[field]\n        schema = schemaCur\n        input = inputCur\n\n        // dont need to go away\n        continue\n      }\n\n      if (inArray) {\n        if (isNaN(field)) return (null)\n        field = parseInt(field)\n        schemaCur = inArray\n      }\n\n      if (!schemaCur) {\n        return (null)\n      }\n\n      // no input found for this entry\n      // initialize it\n      inputCur = input[field]\n\n      // awaiting nested in input\n      if (schemaCur.$_nested === true || (inArray && inArray.$_nested === true)) {\n        if (!inputCur || typeof inputCur !== 'object' || inputCur.constructor.name !== 'Object') {\n          if (create === true) input[field] = {}\n          else return (null)\n        }\n      }\n\n      inputCur = input[field]\n\n      if (!inputCur && create !== true) return (null)\n\n      // swap schema and input\n      schema = schemaCur\n      input = inputCur\n      inArray = null\n    }\n\n    // console.log(\"will write at\", input)\n\n    return ({ schema, input, fields })\n\n    // return (null)\n  }\n\n  remove (line) {\n    const node = this.get(line)\n    if (node) {\n      const key = node.fields[node.fields.length - 1]\n      if (Array.isArray(node.input)) node.input.splice(key, 1)\n      else delete node.input[node.fields[node.fields.length - 1]]\n    }\n  }\n}\n\nmodule.exports = fieldifyInput\n","import React from 'react';\n\n\nexport default class RecycledComponent extends React.Component {\n  constructor(props, context, updater) {\n    // parent\n    super(props, context, updater)\n\n    // setup state with the cycle returns\n    this.state = this.cycle(props, true)\n  }\n\n  componentDidUpdate(props, state) {\n    // execute parent\n    if(super.componentDidUpdate) super.componentDidUpdate(props, state)\n\n    // props have changed\n    var changed = false\n    for(var a in props) {\n      // all types are compared exept functions\n      // which changes at any round\n      if(typeof props[a] !== \"function\" && props[a] !== this.props[a]) {\n        changed = true\n        break\n      }\n    }\n\n    // something need to be updated inside this component\n    if (changed === true) {\n      // recycling the state of the component\n      const ret = this.cycle(this.props, false)\n      if(ret && typeof ret === \"object\") this.setState(ret)\n    }\n  }\n\n  // the famous cycling function\n  cycle(props, first) {\n    return({})\n  }\n}","import React, { Component } from 'react';\nimport {\n  Col,\n  Row,\n  Form\n} from \"antd\";\n\nexport default class FieldifyTypeForm extends Component {\n  constructor(props) {\n    super(props)\n    this.state = this.cycle(props)\n  }\n\n\n  componentDidUpdate(props, state) {\n    if (this.props.schema !== props.schema) {\n      const cycle = this.cycle(this.props);\n      this.setState(cycle)\n    }\n  }\n\n  cycle(props) {\n    this.schema = props.schema;\n    \n    const state = {\n      value: props.value,\n      verify: props.verify,\n      feedback: false,\n      status: null,\n      options: {}\n    }\n\n    this.isInjected = props.isInjected;\n\n    this.onChange = props.onChange ? props.onChange : () => { };\n    this.onError = props.onError ? props.onError : () => { };\n\n    if (!this.schema) {\n      this.schema = {}\n      return (state)\n    }\n\n    state.help = this.schema.$help;\n    state.options = this.schema.$options || {};\n    this.handler = this.schema.$_type;\n\n\n    // if (props.verify === true) {\n    //   this.verify(props.value, (ret) => {\n    //     this.state = { ...this.state, ...ret }\n    //   })\n    // }\n\n    return (state)\n  }\n\n  timedChange(cb, speed) {\n    if (this._changeTimer) {\n      this._changeTimerQueue++;\n      this._changeTimerCb = cb;\n      return;\n    }\n\n    cb = cb || this._changeTimerCb;\n    if (!cb) return;\n\n    delete this._changeTimerCb;\n    this._changeTimerQueue = 0;\n    this._changeTimer = setTimeout(() => {\n      cb(() => {\n        delete this._changeTimer;\n\n        // update in queue ?\n        if (this._changeTimerQueue > 0) {\n          this.timedChange(cb, speed);\n        }\n      })\n    }, speed)\n  }\n\n  changeValue(value, speed) {\n    speed = speed || 100;\n\n    this.setState({\n      value: value\n    })\n\n    this._lastValue = value;\n\n    this.timedChange((end) => {\n      this.verify(this._lastValue, (ret) => {\n        this.setState(ret);\n        if (ret.status !== \"success\") {\n          end();\n          return;\n        }\n        \n        this.onChange(this.schema, this._lastValue);\n        end();\n      })\n    }, speed)\n  }\n\n  verify(value, cb) {\n    if(!this.handler) {\n      return (cb({\n        status: \"error\",\n        feedback: true,\n        help: \"No Handler on verifier\"\n      }))\n    }\n    \n    this.handler.verify(value, (error, message) => {\n      if (error === false) {\n        this.onError(false);\n        return (cb({\n          status: \"success\",\n          feedback: true,\n          help: null\n        }));\n      }\n\n      \n      this.onError(true, message);\n      return (cb({\n        status: \"error\",\n        feedback: true,\n        help: message\n      }))\n    })\n  }\n\n\n  render(children) {\n    // return(children)\n\n    if (this.isInjected === true) return (\n      <Form.Item\n        label={this.schema.$doc}\n        required={this.schema.$required}\n        validateStatus={this.state.status}\n        hasFeedback={this.state.feedback}\n        help={this.state.help}\n        style={{ marginBottom: \"0px\" }}\n        wrapperCol={{ sm: 24 }}\n      >\n        {children}\n      </Form.Item>\n    )\n\n    return (\n      <Form.Item\n        label={this.schema.$doc}\n        required={this.schema.$required}\n        validateStatus={this.state.status}\n        hasFeedback={this.state.feedback}\n        help={this.state.help}\n        style={{ marginBottom: \"8px\" }}\n        wrapperCol={{ sm: 24 }}\n      >\n        {children}\n      </Form.Item>\n    )\n  }\n}\n\n","import React, { Component } from 'react';\nimport RecycledComponent from 'react-recycling';\n\nimport {\n  Col,\n  Row,\n  Form,\n  Input\n} from \"antd\";\n\nexport default class FieldifyTypeRender extends RecycledComponent {\n\n  cycle(props) {\n    const state = {\n      schema: props.schema,\n      value: props.value,\n      injected: props.injected\n    }\n\n    return (state)\n  }\n\n  subRender(children) {\n\n    if(this.state.injected === true) {\n      return (\n        <Form.Item\n          label={this.state.schema.$doc}\n          hasFeedback={true}\n          validateStatus=\"success\"\n          style={{ marginBottom: \"0px\" }}\n          wrapperCol={{ sm: 24 }}\n        >\n          {children}\n        </Form.Item>\n      )\n    }\n    return (\n      <Form.Item\n        label={this.state.schema.$doc}\n        hasFeedback={true}\n        validateStatus=\"success\"\n      >\n        {children}\n      </Form.Item>\n    )\n  }\n\n  render() {\n    return (this.subRender(\n      <div style={{ width: \"100%\" }}>\n        {this.state.value}\n      </div>\n    ));\n  }\n}\n\n","import { Component } from 'react';\n\nexport default class SignderivaTypeInfo extends Component {\n  constructor(props) {\n    super(props)\n    this.props = props;\n    if (props.match) this.path = props.match.path;\n    this.state = {}\n  }\n\n\n  componentDidUpdate(prevProps, prevState) {\n    const pNew = this.props.schema || {};\n    const pOld = prevProps.schema || {};\n    // console.log(\"SignderivaTypeInfo.update\", pOld, pNew)\n  }\n\n}\n\n","import { Component } from 'react';\n\nexport default class SignderivaTypeBuilder extends Component {\n  constructor(props) {\n    super(props);\n    this.props = props;\n    this.onChange = props.onChange ? props.onChange : () => { };\n\n    if (props.match) this.path = props.match.path;\n\n    this.state = { ...props.options };\n\n    this.default = {};\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const pNew = this.props.options || {};\n    const pOld = prevProps.options || {};\n    \n    var changed = 0;\n    for (var key in this.default) {\n      const o = pOld[key];\n      const n = pNew[key];\n      if (o !== n)\n        changed++;\n    }\n\n    // console.log(\"TypeBuilder.update\", changed, pOld, pNew)\n    if (changed > 0) {\n      this.setState(pNew);\n      this.onChange({...pNew});\n    }\n    \n  }\n\n  setup(prev) {\n    // console.log(\"setup\")\n    const state = { ...prev };\n\n    // clean non valid field\n    for (var a in state) {\n      const p = this.default[a];\n      if (!p) delete state[a]\n    }\n\n    // setup default\n    for (var a in this.default) {\n      if (!(a in state))\n        state[a] = this.default[a];\n    }\n    return (state);\n  }\n\n  configure() {\n    this.state = this.setup(this.state);\n    this.onChange({ ...this.state });\n  }\n\n  changeIt(key, value) {\n    const change = Object.assign({}, this.state);\n    change[key] = value;\n\n    // console.log(\"TypeBuilder\", change)\n    this.setState(change);\n    this.onChange({...change});\n  }\n\n}\n","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { FieldStringOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeRender from '../lib/TypeRender';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass StringForm extends TypeForm {\n  render() {\n    return (super.render(\n      <Input \n      value={this.state.value} \n      placeholder={this.state.options.placeholder} \n      onChange={({ target }) => this.changeValue(target.value)} \n      style={{width: \"100%\"}}\n      />\n    ));\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass StringRender extends TypeRender {\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass StringInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#fadb14\" style={{ color: \"#555555\" }}><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass StringBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"String min/max size\">\n          <Space>\n            <InputNumber min={0} value={this.state.minSize} onChange={(value) => this.changeIt(\"minSize\", value)} />\n\n            <InputNumber min={0} value={this.state.maxSize} onChange={(value) => this.changeIt(\"maxSize\", value)} />\n          </Space>\n        </Form.Item>\n\n      </div>\n    )\n  }\n}\n\n/* <div class=\"ant-form-item-control-input\">\n  <div class=\"ant-form-item-control-input-content\">\n    <input type=\"text\" class=\"ant-input\" value=\"vdvfsdvfdsvfds\" style=\"width: 100%;\">\n      </div><span class=\"ant-form-item-children-icon\">\n        <span role=\"img\" aria-label=\"check-circle\" class=\"anticon anticon-check-circle\">\n          <svg viewBox=\"64 64 896 896\" focusable=\"false\" class=\"\" data-icon=\"check-circle\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\">\n            <path d=\"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm193.5 301.7l-210.6 292a31.8 31.8 0 01-51.7 0L318.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.2 0 19.9 4.9 25.9 13.3l71.2 98.8 157.2-218c6-8.3 15.6-13.3 25.9-13.3H699c6.5 0 10.3 7.4 6.5 12.7z\">\n              </path>\n              </svg>\n              </span>\n              </span>\n              </div> */\n\n\n\nexport default {\n  code: types.String.code,\n  description: types.String.description,\n  class: types.String.class,\n\n  Info: StringInfo,\n  Builder: StringBuilder,\n  Form: StringForm,\n  Render: StringRender,\n}\n\n\n","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { UserSwitchOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeRender from '../lib/TypeRender';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\nimport TString from './String';\n\nconst StringForm = TString.Form\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NameForm extends TypeForm {\n  constructor(props) {\n    super(props)\n  }\n\n  cycle(props) {\n    const ret = super.cycle(props)\n    if (!ret.value) ret.value = {}\n    \n    this.result = {...ret.value}\n    return (ret)\n  }\n\n  error(from, error, message) {\n    // this.setState({\n    //   help: \"Please fill the form\"\n    // })\n  }\n\n  setField(key, schema, value) {\n    this.result[key] = value;\n    this.onChange(this.schema, this.result);\n  }\n\n  render() {\n\n    return (super.render(\n      <Row gutter={16}>\n        <Col className=\"gutter-row\" span={12}>\n          <StringForm\n            schema={this.schema.first}\n            verify={this.state.verify}\n            value={this.state.value.first}\n            onChange={(schema, value) => this.setField(\"first\", schema, value)}\n            // onError={(error, message) => this.error(\"first\", error, message)}\n            isInjected={true}\n          />\n        </Col>\n        <Col className=\"gutter-row\" span={12}>\n          <StringForm\n            schema={this.schema.last}\n            verify={this.state.verify}\n            value={this.state.value.last}\n            onChange={(schema, value) => this.setField(\"last\", schema, value)}\n            // onError={(error, message) => this.error(\"last\", error, message)}\n            isInjected={true}\n          />\n        </Col>\n      </Row>\n    ))\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NameInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#36cfc9\" style={{ color: \"#555555\" }}><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NameRender extends TypeRender {\n  static getDerivedStateFromProps(props, state) {\n    if(state.value && typeof state.value === \"object\") {\n      var final = \"\"\n\n      if(state.value.first) final += state.value.first\n      if(state.value.last) final += \" \"+state.value.last\n\n      state.value = final.trim()\n    }\n    return(state)\n  }\n}\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NameBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"Name min/max size\">\n          <Space>\n            <InputNumber min={0} value={this.state.minSize} onChange={(value) => this.changeIt(\"minSize\", value)} />\n\n            <InputNumber min={0} value={this.state.maxSize} onChange={(value) => this.changeIt(\"maxSize\", value)} />\n          </Space>\n        </Form.Item>\n\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.Name.code,\n  description: types.Name.description,\n  class: types.Name.class,\n\n  Info: NameInfo,\n  Builder: NameBuilder,\n  Form: NameForm,\n  Render: NameRender,\n\n  noFormItem: true\n}\n\n\n","import { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  Checkbox,\n  Form,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { MailOutlined } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeRender from '../lib/TypeRender';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass EmailForm extends TypeForm {\n  render() {\n    return (super.render(\n      <Input value={this.state.value} placeholder={this.state.options.placeholder} onChange={({ target }) => this.changeValue(target.value)} />\n    ));\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass EmailInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#1890ff\"><MailOutlined /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass EmailRender extends TypeRender {\n}\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Complement builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass EmailBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      subAddressing: true\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"Sub-addressing\">\n          <Checkbox checked={this.state.subAddressing} onChange={({ target }) => this.changeIt(\"subAddressing\", target.checked)}>Allowed</Checkbox>\n        </Form.Item>\n      </div>\n    )\n  }\n}\n\n\nexport default {\n  code: types.Email.code,\n  description: types.Email.description,\n  class: types.Email.class,\n\n  Info: EmailInfo,\n  Builder: EmailBuilder,\n  Form: EmailForm,\n  Render: EmailRender\n}","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { NumberOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeRender from '../lib/TypeRender';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NumberForm extends TypeForm {\n  render() {\n    return (super.render(\n      <InputNumber \n      value={this.state.value} \n      placeholder={this.state.options.placeholder} \n      onChange={(value) => this.changeValue(value)} \n      style={{width: \"100%\"}}\n      />\n    ));\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NumberInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#ff7a45\"><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NumberRender extends TypeRender {\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NumberBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.Number.code,\n  description: types.Number.description,\n  class: types.Number.class,\n\n  Info: NumberInfo,\n  Builder: NumberBuilder,\n  Form: NumberForm,\n  Render: NumberRender\n}\n\n\n","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { FieldStringOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass CheckboxForm extends TypeForm {\n  render() {\n    return (super.render(\n      <Input placeholder=\"Checkbox of characters\" />\n    ))\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass CheckboxInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#fadb14\" style={{ color: \"#555555\" }}><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass CheckboxBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"Checkbox min/max size\">\n          <Space>\n            <InputNumber min={0} value={this.state.minSize} onChange={(value) => this.changeIt(\"minSize\", value)} />\n\n            <InputNumber min={0} value={this.state.maxSize} onChange={(value) => this.changeIt(\"maxSize\", value)} />\n          </Space>\n        </Form.Item>\n\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.Checkbox.code,\n  description: types.Checkbox.description,\n  class: types.Checkbox.class,\n\n  Info: CheckboxInfo,\n  Builder: CheckboxBuilder,\n  Form: CheckboxForm\n}\n\n\n","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Select,\n  Col,\n  Row\n} from \"antd\";\n\nimport { SelectOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeRender from '../lib/TypeRender';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass SelectForm extends TypeForm {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      value: props.value,\n      options: {}\n    }\n\n    if (props.schema.$options) this.state.options = props.schema.$options\n\n    if(!this.state.value && this.state.options.default) {\n      this.state.value = this.state.options.default\n      // inform the change\n      this.onChange(this.schema, this.state.value);\n    }\n\n    this.state.items = this.updateItems()\n  }\n\n  updateItems() {\n    if (!this.state.options.items) return ([])\n\n    const options = []\n    for (var key in this.state.options.items) {\n      const value = this.state.options.items[key];\n      options.push(<Select.Option value={key} key={key}>{value}</Select.Option>)\n    }\n\n    return (options)\n  }\n\n  render() {\n    return (super.render(\n      <Select value={this.state.value} onChange={(value)  => this.changeValue(value)}>\n        {this.state.items}\n      </Select>\n    ))\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass SelectInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#52c41a\" style={{ color: \"white\" }}><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass SelectRender extends TypeRender {\n  static getDerivedStateFromProps(props, state) {\n    if(typeof state.value === \"string\") {\n\n      if(props.schema.$options && props.schema.$options.items) {\n        const ptr = props.schema.$options.items\n        if(ptr[state.value]) state.value = ptr[state.value]\n      }\n    }\n    return(state)\n  }\n\n}\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass SelectBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"Select min/max size\">\n          <Space>\n            <InputNumber min={0} value={this.state.minSize} onChange={(value) => this.changeIt(\"minSize\", value)} />\n\n            <InputNumber min={0} value={this.state.maxSize} onChange={(value) => this.changeIt(\"maxSize\", value)} />\n          </Space>\n        </Form.Item>\n\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.Select.code,\n  description: types.Select.description,\n  class: types.Select.class,\n\n  Info: SelectInfo,\n  Builder: SelectBuilder,\n  Form: SelectForm,\n  Render: SelectRender\n}\n\n\n","// this is a hidden type\n// to manage nested object\nimport { types,  fieldifyType } from 'fieldify'\n\n\nclass ObjectClass extends fieldifyType {\n}\n\n\nexport default {\n  code: \"Object\",\n  description: \"Nested Sub Object\",\n  class: ObjectClass\n}\n","// this is a hidden type\n// to manage nested object\nimport { types,  fieldifyType } from 'fieldify'\n\nclass ArrayClass extends fieldifyType {\n  configuration () {\n    return ({\n      min: {\n        $doc: 'Minimum of items',\n        $required: false,\n        $type: 'Number'\n      },\n      max: {\n        $doc: 'Maximun of items',\n        $required: false,\n        $type: 'Number'\n      }\n    })\n  }\n}\n\nexport default {\n  code: \"Array\",\n  description: \"Array\",\n  class: ArrayClass\n}\n","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { FieldStringOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\nimport String from './String'\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass FieldNameForm extends String.Form { \n  constructor(props){\n    super(props)\n  }\n\n  verify(input, cb) {\n    super.verify(input, (ret)=>{\n      if(ret.status !== \"success\") {\n        return(cb(ret))\n      }\n\n      // check if the key is already used\n      if(this.props.user && input in this.props.user) {\n        const msg = `Field name already used`\n        \n        this.onError(true, msg);\n        return (cb({\n          status: \"error\",\n          feedback: true,\n          help: msg\n        }))\n      }\n\n      cb(ret)\n    })\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass FieldNameInfo extends String.Info { }\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass FieldNameBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    // this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"FieldName min/max size\">\n          {/* <Space>\n            <InputNumber min={0} value={this.state.minSize} onChange={(value) => this.changeIt(\"minSize\", value)} />\n\n            <InputNumber min={0} value={this.state.maxSize} onChange={(value) => this.changeIt(\"maxSize\", value)} />\n          </Space> */}\n        </Form.Item>\n\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.FieldName.code,\n  description: types.FieldName.description,\n  class: types.FieldName.class,\n\n  Info: FieldNameInfo,\n  Builder: FieldNameBuilder,\n  Form: FieldNameForm\n}\n\n\n","\nimport { types, input as FieldifyInput } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  Table,\n  Form,\n  Input,\n  Tag,\n  Modal,\n  Alert,\n  Row\n} from \"antd\";\n\nimport {\n  SmallDashOutlined as Icon,\n  EditOutlined as EditIcon,\n  DeleteOutlined as DeleteIcon,\n  UnorderedListOutlined as ObjectIcon,\n  PlusOutlined as PlusIcon,\n  CopyOutlined as ArrayIcon\n} from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeRender from '../lib/TypeRender';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass KVForm extends TypeForm {\n\n  constructor(props) {\n    super(props)\n  }\n\n  cycle(props) {\n    const ret = super.cycle(props)\n\n    if (!ret.value) ret.value = {}\n\n    this.result = { ...ret.value }\n\n    ret.modal = false\n    ret.modalCurrent = {\n      key: \"\",\n      value: \"\"\n    }\n    ret.dataTree = { ...ret.value }\n    ret.dataSource = this.computeDataSource(ret.dataTree);\n\n    return (ret)\n  }\n\n  computeDataSource(tree) {\n    const ds = []\n    for (let key in tree) {\n      const value = tree[key]\n      ds.push({\n        key: key,\n        value: value,\n        actions: <div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n          <span className=\"ant-radio-button-wrapper\" onClick={() => this.removeKey(key)}>\n            <span><DeleteIcon /></span>\n          </span>\n          <span className=\"ant-radio-button-wrapper\" onClick={() => this.openModal({ key, value })}>\n            <span><EditIcon /></span>\n          </span>\n        </div>\n      })\n    }\n    return (ds)\n  }\n\n  handleModalChange(key, value) {\n    const modalCurrent = { ...this.state.modalCurrent }\n    modalCurrent[key] = value;\n    this.setState({ modalCurrent })\n  }\n\n  openModal(data) {\n    const state = {\n      modalError: false,\n      modalInitial: null,\n      modalCurrent: data || {\n        key: \"\",\n        value: \"\"\n      },\n      modal: true\n    }\n\n    if (data) state.modalInitial = { ...state.modalCurrent }\n\n    this.setState(state)\n  }\n\n  removeKey(key) {\n    const state = { ...this.state }\n    delete state.dataTree[key]\n    state.dataSource = this.computeDataSource(state.dataTree);\n    this.setState(state)\n\n    this.changeValue(state.dataTree)\n  }\n\n  editedButton() {\n    const state = { ...this.state }\n\n    const mc = this.state.modalCurrent;\n\n    // check the key input\n    const type = this.schema.$_type;\n\n    // verify the input\n    const data = {}\n    data[mc.key] = mc.value;\n    type.verify(data, (error, message) => {\n      state.modalError = error;\n      state.modalErrorMessage = message;\n\n      if (error === false) {\n        // remove old entry and add new one\n        if (state.modalInitial) {\n          delete state.dataTree[state.modalInitial.key];\n        }\n        state.dataTree[state.modalCurrent.key] = state.modalCurrent.value\n\n        state.dataSource = this.computeDataSource(state.dataTree);\n\n        state.modal = false;\n      }\n\n      this.setState(state)\n      this.changeValue(state.dataTree)\n    })\n\n  }\n\n  render() {\n    const onCancel = () => {\n      this.setState({ modal: false });\n    };\n\n    const columns = [\n      {\n        title: 'Key',\n        dataIndex: 'key',\n        key: 'key',\n      },\n      {\n        title: 'Value',\n        dataIndex: 'value',\n        key: 'value',\n      },\n      {\n        title: <div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n          <span className=\"ant-radio-button-wrapper\" onClick={() => this.openModal()}>\n            <span>Add <PlusIcon /></span>\n          </span>\n        </div>,\n        dataIndex: 'actions',\n        key: 'actions',\n        align: \"right\"\n      },\n    ];\n\n    const layout = {\n      labelCol: { span: 8 },\n      wrapperCol: { span: 16 },\n    };\n\n    return (super.render(<div>\n      <Modal\n        centered\n        closable={false}\n        visible={this.state.modal}\n        width={300}\n        onOk={this.editedButton.bind(this)}\n        onCancel={onCancel}\n      >\n        {this.state.modalError === true ?\n          <div style={{ marginBottom: 8 }}>\n            <Alert size=\"small\" message={this.state.modalErrorMessage} type=\"error\" />\n          </div>\n\n          : null}\n\n        <Form\n          {...layout}\n        >\n          <Form.Item label=\"Key\">\n            <Input value={this.state.modalCurrent.key} onChange={({ target }) => this.handleModalChange(\"key\", target.value)} />\n          </Form.Item>\n\n          <Form.Item label=\"Value\">\n            <Input value={this.state.modalCurrent.value} onChange={({ target }) => this.handleModalChange(\"value\", target.value)} />\n          </Form.Item>\n\n        </Form>\n\n\n      </Modal>\n      <Table\n        size=\"small\"\n        dataSource={this.state.dataSource}\n        columns={columns}\n        pagination={{\n          total: this.state.dataSource.length,\n          pageSize: this.state.dataSource.length,\n          hideOnSinglePage: true\n        }}\n      />\n    </div>));\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass KVInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#22075e\"><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass KVRender extends TypeRender {\n\n  cycle(props) {\n    const ret = super.cycle(props)\n\n    if (!ret.value) ret.value = {}\n\n    this.result = { ...ret.value }\n\n    ret.dataTree = { ...ret.value }\n    ret.dataSource = this.computeDataSource(ret.dataTree);\n\n    return (ret)\n  }\n\n  computeDataSource(tree) {\n    const ds = []\n    for (let key in tree) {\n      const value = tree[key]\n      ds.push({\n        key: key,\n        value: value\n      })\n    }\n    return (ds)\n  }\n\n\n  render() {\n    const columns = [\n      {\n        dataIndex: 'key',\n        key: 'key',\n      },\n      {\n        dataIndex: 'value',\n        key: 'value',\n      }\n    ];\n\n    const layout = {\n      labelCol: { span: 8 },\n      wrapperCol: { span: 16 },\n    };\n\n    return (super.subRender(<div>\n      <Table\n        showHeader={false}\n        size=\"small\"\n        dataSource={this.state.dataSource}\n        columns={columns}\n        pagination={{\n          total: this.state.dataSource.length,\n          pageSize: this.state.dataSource.length,\n          hideOnSinglePage: true\n        }}\n      />\n    </div>));\n  }\n\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass KVBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.KV.code,\n  description: types.KV.description,\n  class: types.KV.class,\n\n  Info: KVInfo,\n  Builder: KVBuilder,\n  Form: KVForm,\n  Render: KVRender\n}\n\n\n","import Name from \"./Types/Name\"\nimport Email from \"./Types/Email\"\nimport String from \"./Types/String\"\nimport Number from \"./Types/Number\"\nimport Checkbox from \"./Types/Checkbox\"\nimport Select from \"./Types/Select\"\nimport Object from \"./Types/Object\"\nimport Array from \"./Types/Array\"\nimport FieldName from \"./Types/FieldName\"\nimport KV from \"./Types/KV\"\n\nexport default {\n  Name,\n  Email,\n  String,\n  Number,\n  Select,\n  Checkbox,\n  Object,\n  Array,\n  FieldName,\n  KV\n}\n","import { schema } from \"fieldify\";\nimport Types from \"../Types\"\n\nexport class FieldifySchema extends schema {\n  constructor(name, options) {\n    super(name, options);\n  }\n\n  resolver(type) {\n    return (Types[type])\n  }\n\n  compile(schema) {\n    // process normal compilation\n    super.compile(schema);\n  }\n}\n","import { utils, input as FieldifyInput } from \"fieldify\";\nimport React from 'react';\nimport RecycledComponent from 'react-recycling';\n\nimport { Form, Table, Button, Input, Card } from \"antd\";\nimport {\n  PlusOutlined as PlusIcon,\n  DeleteOutlined as DeleteIcon\n} from '@ant-design/icons';\n\nimport { FieldifySchema } from \"../Schema/Schema\";\n\n\nexport class TypeDataset extends RecycledComponent {\n  constructor(props) {\n    super(props)\n\n    this.formRef = React.createRef()\n\n  }\n\n  cycle(props, first) {\n\n    const state = {\n      layout: props.layout ? props.layout : \"horizontal\"\n    }\n\n    // compile the schema\n    state.rawSchema = props.schema\n    state.schema = new FieldifySchema(\"form\")\n    state.schema.compile(state.rawSchema)\n\n    // create an input instance\n    // console.log(\"rawInput\", state.rawInput === props.rawInput)\n    state.rawInput = props.input\n    state.input = new FieldifyInput(state.schema)\n    state.input.setValue(props.input)\n\n    state.inputValue = state.input.getValue()\n    state.verify = props.verify || false\n\n    state.actions = props.actions;\n    state.generator = props.generator;\n\n    this.references = {};\n\n    this.onChange = props.onChange ? props.onChange : () => { };\n\n    // state.reactive = this.update(state.schema, state.inputValue, state.verify);\n    state.reactive = this.update({\n      state,\n      root: state.schema,\n      input: state.inputValue,\n      verify: state.verify\n    })\n    return (state)\n  }\n\n  getValue() {\n    return (this.state.input.getValue())\n  }\n\n  clickAddArray(line) {\n    this.state.input.set(line)\n    const _value = this.state.input.getValue();\n    this.onChange(this.state.input, _value)\n    this.setState({\n      inputValue: _value,\n      // reactive: this.update(this.state.schema, _value, false)\n      reactive: this.update({\n        state: this.state,\n        root: this.state.schema,\n        input: _value,\n        verify: false,\n      })\n    })\n  }\n\n  clickRemoveArrayItem(line) {\n    this.state.input.remove(line)\n    const _value = this.state.input.getValue();\n    this.onChange(this.state.input, _value)\n    this.setState({\n      inputValue: _value,\n      // reactive: this.update(this.state.schema, _value, false)\n\n      reactive: this.update({\n        state: this.state,\n        root: this.state.schema,\n        input: _value,\n        verify: false,\n      })\n\n    })\n  }\n\n\n  setValue(line, value) {\n    if (!this.state.input) return;\n\n    this.state.input.set(line, value)\n    const _value = this.state.input.getValue();\n    this.onChange(this.state.input, _value)\n    this.setState({\n      inputValue: _value\n    })\n  }\n\n  update(up) {\n\n    var { root, input, verify, state } = up;\n\n    const follower = (schema, schematized, input, ret, line) => {\n      line = line || \"\"\n\n      if (!input) input = {}\n\n      utils.orderedRead(schema, (index, item) => {\n\n        const source = { ...Array.isArray(item) ? item[0] : item };\n        const schematizedSrc = schematized[source.$_key];\n        const sourceSchematized = { ...Array.isArray(schematizedSrc) ? schematizedSrc[0] : schematizedSrc };\n\n        const inputPtr = input ? input[source.$_key] : null;\n        const lineKey = line + \".\" + source.$_key;\n\n        if (source.$_array === true) {\n          const columns = [\n            {\n              dataIndex: 'form',\n              key: 'form',\n              width: \"100%\"\n            }\n          ];\n\n          if (state.actions === true) {\n            columns.push({\n              dataIndex: 'actions',\n              key: 'actions',\n              align: \"right\"\n            })\n          }\n\n          const dataSource = []\n\n          var inputPtr2 = inputPtr;\n          const options = source.$array || {};\n          const min = options.min ? options.min : (source.$required === true ? 1 : 0)\n\n          if (source.$_nested === true) {\n            var inputPtr2 = input[source.$_key]\n\n            if (!Array.isArray(inputPtr)) inputPtr2 = input[source.$_key] = [];\n\n            // force to create min form\n            if (min - inputPtr2.length > 0) {\n              for (var a = 0; a <= min - inputPtr2.length; a++) {\n                inputPtr2.push({})\n              }\n            }\n\n            for (var a = 0; a < inputPtr2.length; a++) {\n              const value = inputPtr2[a];\n              const key = lineKey + \".\" + a\n\n              const child = [];\n              follower(source, sourceSchematized, value, child, key);\n\n              const toPush = { key, form: child }\n              if (state.actions === true) {\n                toPush.actions = <Button size=\"small\" onClick={() => this.clickRemoveArrayItem(key)}>\n                  <span><DeleteIcon /></span>\n                </Button>\n              }\n              dataSource.push(toPush)\n            }\n          }\n          else if (source.$type) {\n            delete sourceSchematized.$doc; // source is cloned\n            const TypeForm = source.$type[state.generator];\n\n            // console.log(\"Array non nested\", min, inputPtr2)\n\n            if (verify === true) {\n              // console.log()\n            }\n\n            if (!Array.isArray(inputPtr)) {\n              input[source.$_key] = [];\n              inputPtr2 = input[source.$_key];\n            }\n\n            if (!inputPtr2) return (ret);\n\n            if (min - inputPtr2.length > 0) {\n              for (var a = 0; a <= min - inputPtr2.length; a++) {\n                inputPtr2.push(null)\n              }\n            }\n\n            for (var a = 0; a < inputPtr2.length; a++) {\n              const value = inputPtr2[a];\n              const key = lineKey + \".\" + a\n\n              const toPush = {\n                key,\n                form: <TypeForm\n                  schema={sourceSchematized}\n                  value={value}\n                  verify={verify}\n                  user={this.props.user}\n                  onChange={(schema, value) => this.setValue(key, value)}\n                  isInjected={true}\n\n                  // reference errors\n                  onError={(error, message) => {\n                    if (error === true) {\n                      this.references[key] = message;\n                    }\n                    else {\n                      const ref = this.references[key];\n                      if (ref) {\n                        delete this.references[key];\n                      }\n                    }\n                  }}\n                />\n              }\n              if (state.actions === true) {\n                toPush.actions = <Button size=\"small\" onClick={() => this.clickRemoveArrayItem(key)}>\n                  <span><DeleteIcon /></span>\n                </Button>\n              }\n              dataSource.push(toPush)\n            }\n          }\n\n          ret.push(<Form.Item key={source.$_wire} noStyle={true}>\n            <div className=\"ant-form-item\">\n              <Card size=\"small\" title={source.$_access.$doc} extra={<div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n                {inputPtr2 && state.actions === true ?\n                  <span className=\"ant-radio-button-wrapper\" onClick={() => this.clickAddArray(lineKey + \".\" + inputPtr2.length)}>\n                    <span><PlusIcon /></span>\n                  </span>\n                  : null}\n              </div>}>\n                <Table\n                  size=\"small\"\n                  dataSource={dataSource}\n                  columns={columns}\n                  verticalAlign='middle'\n                  showHeader={false}\n                  pagination={{\n                    total: dataSource.length,\n                    pageSize: dataSource.length,\n                    hideOnSinglePage: true\n                  }}\n                  bordered\n                />\n              </Card>\n            </div>\n          </Form.Item>);\n\n        }\n        else {\n          if (source.$_nested === true) {\n            const child = [];\n\n            follower(source, sourceSchematized, inputPtr, child, lineKey);\n\n            ret.push(<div key={source.$_wire} className=\"ant-form-item\">\n              <Card size=\"small\" title={source.$doc}>\n                {child}\n              </Card>\n            </div>);\n          }\n          else if (item.$type) {\n            const TypeForm = item.$type[state.generator];\n\n            ret.push(<TypeForm\n              schema={sourceSchematized}\n              value={inputPtr}\n              key={source.$_wire}\n              verify={verify}\n              user={this.props.user}\n              onChange={(schema, value) => this.setValue(lineKey, value)}\n\n              // reference errors\n              onError={(error, message) => {\n                if (error === true) {\n                  this.references[source.$_wire] = message;\n                }\n                else {\n                  const ref = this.references[source.$_wire];\n                  if (ref) {\n                    delete this.references[source.$_wire];\n                  }\n                }\n              }}\n            />);\n          }\n        }\n      });\n      return (ret);\n    };\n\n    const ret = [];\n    follower(\n      root.handler.schema,\n      root.handlerSchematized.schema,\n      input,\n      ret\n    );\n    return (ret);\n  }\n\n  render() {\n    var layout = {};\n\n    if (this.state.layout === 'horizontal') {\n      layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n      }\n    }\n    return (<Form\n      layout={this.state.layout}\n      key={this.formRef}\n      {...layout}\n      name=\"basic\" >\n      {this.state.reactive}\n    </Form>);\n  }\n}\n","import { utils, input as FieldifyInput } from \"fieldify\";\nimport React from 'react';\nimport RecycledComponent from 'react-recycling';\n\nimport { Form, Table, Button, Input, Card } from \"antd\";\nimport {\n  PlusOutlined as PlusIcon,\n  DeleteOutlined as DeleteIcon\n} from '@ant-design/icons';\n\nimport { FieldifySchema } from \"../Schema/Schema\";\nimport { TypeDataset } from \"../lib/TypeDataset\";\n\nexport class FieldifySchemaForm extends RecycledComponent {\n  cycle(props) {\n    const state = {\n      layout: props.layout,\n      schema: props.schema,\n      input: props.input,\n      onChange: props.onChange,\n    }\n\n    return(state)\n  }\n\n  render() {\n    return (<TypeDataset\n      schema={this.state.schema}\n      input={this.state.input}\n      onChange={this.state.onChange}\n      actions={true}\n      layout={this.state.layout}\n      generator=\"Form\"\n    />);\n  }\n}\n","import { utils, input as FieldifyInput } from \"fieldify\";\n\nimport React from 'react';\nimport Types from '../Types';\nimport { Modal, Form, Input, Select, Checkbox, Tag } from \"antd\";\nimport { FieldifySchema } from \"../Schema/Schema\";\nimport { FieldifySchemaForm } from './Form'\nimport { ConsoleSqlOutlined } from \"@ant-design/icons\";\n\n// build all available types\nconst allTypes = {}\nconst allTypesNoArray = {}\nfor (var a in Types) {\n  allTypes[a] = Types[a].description\n  if (a !== \"Array\") {\n    allTypesNoArray[a] = Types[a].description\n  }\n}\n\n// set the very basic schema for the modal\nconst baseSchema = {\n  key: {\n    $doc: \"Name of the field\",\n    $type: Types.FieldName,\n    $required: true,\n    $position: 10\n  },\n  type: {\n    $doc: \"Field type\",\n    $type: \"Select\",\n    $required: true,\n    $options: {\n      items: allTypes\n    },\n    $position: 11\n  },\n  doc: {\n    $doc: \"Description\",\n    $required: false,\n    $type: \"String\",\n    $position: 22\n  },\n  position: {\n    $doc: \"Position in the serie\",\n    $required: false,\n    $type: \"Number\",\n    $default: 0,\n    $options: {\n      acceptedTypes: \"integer\"\n    },\n    $position: 23\n  },\n  // options: {\n  //   $doc: \"Options\",\n  //   $type: Types.Checkbox,\n  //   $options: {\n  //     required: \"Field is required\",\n  //     readOnly: \"Field is read only\",\n  //   }\n  // },\n}\n\nexport class FieldifySchemaBuilderModal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.formRef = React.createRef()\n    this.state = this.cycle(props, true)\n    this.currentSchema = baseSchema\n  }\n\n  componentDidUpdate(props) {\n    var changed = false\n    var state = { ...this.state }\n\n    if (this.props.visible !== props.visible) {\n      this.currentSchema = baseSchema\n      state = this.cycle(this.props)\n      changed = true;\n    }\n\n    if (changed === true) this.setState(state)\n  }\n\n  cycle(props, first) {\n\n    // here we have 3 cases\n    // normal case = $_array !== true && $_nested !== true\n    // nested in array = $_array === true && $_nested === true\n    // normal in array = $_array === true && $_nested !== true\n    // single nested = $_array !== true && $_nested === true\n\n    const state = {\n      edition: false,\n      original: props.value,\n      form: {\n        state: \"Filling\",\n        color: \"blue\"\n      },\n      value: {},\n      visible: props.visible,\n      user: props.user,\n      verify: false\n    };\n   \n    if (state.user && state.user.$_wire) {\n      state.initialPath = state.user.$_wire;\n    }\n    else state.initialPath = '';\n\n    if (props.value) {\n      const val = props.value;\n\n      state.edition = true;\n\n      // normal case\n      if (val.$_array !== true && val.$_nested !== true) {\n        state.value = {\n          key: val.$_key,\n          type: val.$type.code,\n          doc: val.$doc,\n          required: val.$required,\n          read: val.$read,\n          write: val.$write,\n          options: val.$options,\n          position: val.$position,\n        }\n      }\n      // nested in array\n      else if (val.$_array === true && val.$_nested === true) {\n        state.value = {\n          key: val.$_key,\n          type: \"Array\",\n          content: \"Object\",\n          doc: val.$doc,\n          required: val.$required,\n          read: val.$read,\n          write: val.$write,\n          options: val.$options,\n          position: val.$position,\n        }\n      }\n      // normal in array\n      else if (val.$_array === true && val.$_nested !== true) {\n        state.value = {\n          key: val.$_key,\n          type: \"Array\",\n          content: typeof val.$type === \"string\" ? val.$type : val.$type.code,\n          doc: val.$doc,\n          required: val.$required,\n          read: val.$read,\n          write: val.$write,\n          options: val.$options,\n          position: val.$position,\n        }\n      }\n      // special handle for objects\n      else if (val.$_array !== true && val.$_nested === true) {\n        state.value = {\n          key: val.$_key,\n          type: \"Object\",\n          doc: val.$doc,\n          required: val.$required,\n          read: val.$read,\n          write: val.$write,\n          options: val.$options,\n          position: val.$position,\n        }\n      }\n    }\n    // single addition\n    else {\n      // nothing to set\n      state.value = {}\n    }\n\n    this.driveSchema(state)\n    state.input.setValue(state.value)\n    return (state)\n  }\n\n  driveSchema(state, force) {\n    const value = state.value;\n\n    const Type = Types[value.type]\n    if (Type && Type !== this.currentType) {\n      // create a fake tmp type\n      const TypeObject = new Type.class\n\n      const configuration = TypeObject.configuration()\n\n      this.currentSchema = { ...baseSchema }\n\n      // special cases for array \n      if (value.type === \"Array\") {\n        this.currentSchema.content = {\n          $doc: \"Item content type\",\n          $type: \"Select\",\n          $required: true,\n          $options: {\n            default: value.content || \"Object\",\n            items: allTypesNoArray\n          },\n          $position: 12\n        }\n      }\n\n      if (configuration) this.currentSchema.options = {\n        ...configuration,\n        $doc: \"Type configuration\"\n      };\n\n      // const upSchema = Type.\n      state.currentType = Type;\n\n      state.schema = new FieldifySchema(\"modal\");\n      state.schema.compile(this.currentSchema);\n      state.input = new FieldifyInput(state.schema)\n\n    }\n    else {\n      state.schema = new FieldifySchema(\"modal\");\n      state.schema.compile(this.currentSchema);\n      state.input = new FieldifyInput(state.schema)\n    }\n  }\n\n\n  formChanged(value) {\n\n    const state = {\n      schema: this.state.schema,\n      input: this.state.input,\n      value: { ...this.state.value, ...value }\n    }\n\n    this.driveSchema(state)\n    state.input.setValue(state.value)\n    this.setState(state)\n\n    state.input.verify((result) => {\n      const state = { form: {} }\n      state.verify = true;\n\n      state.error = result.error\n\n      if (result.error === true) {\n        state.form.color = \"blue\"\n        state.form.state = \"Filling\"\n      }\n      else {\n        state.form.color = \"green\"\n        state.form.state = \"Passed\"\n      }\n\n      this.setState(state)\n    })\n\n  }\n\n  handleOK() {\n    this.state.input.verify((result) => {\n      const state = { form: {} }\n      state.verify = true;\n\n      state.error = result.error\n\n      if (result.error === true) {\n        state.form.color = \"red\"\n        state.form.state = \"Error\"\n      }\n      else {\n        state.form.color = \"green\"\n        state.form.state = \"Passed\"\n\n        this.setState(state)\n\n        // get the current input values \n        const value = result.result\n        // const value = this.state.input.getValue()\n        var nvalue = {}\n\n        // rename all root value with $\n        for (var key in value) nvalue['$' + key] = value[key]\n\n        // we will save the last path in order to reconstruct the field name\n        const source = this.state.initialPath.split('.')\n        source.pop()\n        source.push(value.key)\n        const npath = source.join('.')\n        delete nvalue.$key;\n\n        // because object and array are virtualized in the builder \n        // then we need to remap the item with the correct schema underlining\n\n        if (nvalue.$type === \"Array\" && nvalue.$content === \"Object\") {\n\n          if (this.state.edition === true) {\n            // recopy nestedObjects if exists\n            // avoid root copy\n            if (this.props.user.$_wire) {\n              const no = utils.getNO(this.props.user)\n              for (var a in no.nestedObject) {\n                const p = no.nestedObject[a]\n                nvalue[p[0]] = p[1]\n              }\n            }\n          }\n          else if(!nvalue.$doc) nvalue.$doc = \"\"\n\n          delete nvalue.$type;\n          delete nvalue.$content;\n          nvalue = [nvalue]\n        }\n        // normal in array\n        else if (nvalue.$type === \"Array\" && nvalue.$content !== \"Object\") {\n          nvalue.$type = nvalue.$content;\n          delete nvalue.$content;\n          nvalue = [nvalue]\n        }\n        // special handle for objects\n        else if (nvalue.$type === \"Object\") {\n\n          if (this.state.edition === true) {\n            // recopy nestedObjects if exists\n            // avoid root copy\n            if (this.props.user.$_wire) {\n              const no = utils.getNO(this.props.user)\n              for (var a in no.nestedObject) {\n                const p = no.nestedObject[a]\n                nvalue[p[0]] = p[1]\n              }\n            }\n          }\n          else if(!nvalue.$doc) nvalue.$doc = \"\"\n\n          delete nvalue.$type;\n        }\n\n        if (this.state.edition === true) {\n          this.props.onOk(({\n            edition: true,\n            oldPath: this.state.initialPath,\n            newPath: npath,\n            key: value.key,\n            value: nvalue\n          }))\n        }\n        else {\n          this.props.onOk(({\n            edition: false,\n            newPath: this.state.initialPath + \".\" + value.key,\n            key: value.key,\n            value: nvalue\n          }))\n        }\n      }\n    })\n\n  }\n\n  render() {\n    const onOk = () => {\n      // this.onOk(this.state);\n    };\n    const onCancel = () => {\n      // this.setState({ visible: false });\n      this.props.onCancel(this.state);\n    };\n    const layout = {\n      labelCol: { span: 8 },\n      wrapperCol: { span: 16 },\n    };\n\n    return (<Modal\n      title={<span>Add New Field To Your Schema <Tag color={this.state.form.color}>{this.state.form.state}</Tag></span>}\n      centered\n      visible={this.state.visible}\n      width={600}\n      onOk={this.handleOK.bind(this)}\n      onCancel={onCancel}\n    >\n      <FieldifySchemaForm\n        ref={this.formRef}\n        schema={this.currentSchema}\n        input={this.state.value}\n        user={this.props.user}\n        verify={this.state.verify}\n        onChange={this.formChanged.bind(this)}\n      />\n\n    </Modal>);\n  }\n}\n","import React from 'react';\n\nimport RecycledComponent from 'react-recycling';\n\nimport {\n  schema,\n  iterator,\n  assign,\n  fusion,\n  utils\n} from \"fieldify\"\n\nimport {\n  notification,\n  Table,\n  Tag,\n  Popconfirm,\n  Tooltip\n} from 'antd';\n\nimport {\n  EditOutlined as EditIcon,\n  DeleteOutlined as DeleteIcon,\n  UnorderedListOutlined as ObjectIcon,\n  PlusOutlined as PlusIcon,\n  CopyOutlined as ArrayIcon\n} from '@ant-design/icons';\n\nimport { FieldifySchema } from \"../Schema/Schema\";\n\nimport { FieldifySchemaBuilderModal } from './BuilderModal';\n\nimport String from \"../Types/String\";\n\nexport class FieldifySchemaBuilder extends RecycledComponent {\n\n  cycle(props, first) {\n    const state = {\n      modal: false,\n      modalUser: null,\n      schemaDataSource: []\n    };\n\n    this.onChange = ()=>{}\n    if(props.onChange) this.onChange = props.onChange\n\n    // compile the schema\n    state.schema = new FieldifySchema(\"form\")\n    state.schema.compile(props.schema)\n\n    state.schemaDataSource = this.updateDataSource(state.schema)\n\n    this.columns = [\n      {\n        title: 'Key',\n        dataIndex: 'name',\n        key: 'key',\n      },\n      {\n        title: 'Description',\n        dataIndex: 'doc',\n        key: 'doc'\n      },\n      {\n        title: <div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n          <span className=\"ant-radio-button-wrapper\" onClick={() => this.handlingAdd()}>\n            <span>Add <PlusIcon /></span>\n          </span>\n        </div>,\n        dataIndex: 'actions',\n        key: 'actions',\n        align: \"right\"\n      },\n    ];\n\n    return(state)\n  }\n\n  fireOnChange() {\n    const ex = this.state.schema.export()\n    // this.state.schema.compile(ex)\n\n    // fire on change for exporting the new schema\n    this.onChange(ex)\n  }\n\n  itemChanged(arg) {\n\n    if (arg.edition === true) {\n      const lineup = this.state.schema.getLineup(arg.oldPath);\n\n      // delete org\n      this.state.schema.removeLineup(arg.oldPath)\n\n      // put new\n      this.state.schema.setLineup(arg.newPath, arg.value)\n\n      notification.success({\n        message: \"Field updated\",\n        description: `Field at ${arg.oldPath} has been successfully updated`\n      })\n    }\n\n    // manage addition\n    else {\n      // just put the new one\n      this.state.schema.setLineup(arg.newPath, arg.value)\n\n      notification.success({\n        message: \"Field added\",\n        description: `Field at ${arg.newPath} has been successfully added`\n      })\n    }\n\n    this.fireOnChange();\n\n    this.setState({\n      modal: false,\n      modalContent: null,\n      modalUser: null,\n      schemaDataSource: this.updateDataSource(this.state.schema)\n    });\n  }\n\n  itemRemove(item) {\n    this.state.schema.removeLineup(item.$_wire);\n\n    this.fireOnChange();\n\n    this.setState({\n      schemaDataSource: this.updateDataSource(this.state.schema)\n    });\n\n    notification.success({\n      message: \"Field removed\",\n      description: `Field at ${item.$_wire} has been successfully removed`\n    })\n  }\n\n  handlingAdd(path) {\n    path = path || \".\";\n\n    const lineup = this.state.schema.getLineup(path) || this.state.schema.handler.schema;\n\n    const state = {\n      modal: true, \n      modalContent: null, \n      modalUser: lineup\n    }\n\n    this.setState(state);\n  }\n\n  handlingEdit(item) {\n    const path = item.$_wire || \".\";\n\n    const lineup = this.state.schema.getLineup(path) || this.state.schema.handler.schema;\n\n    const state = {\n      modal: true, \n      modalContent: item, \n      modalUser: lineup\n    }\n\n    this.setState(state);\n  }\n\n  updateDataSource(root) {\n    const self = this;\n    function fieldify2antDataTable(schema, wire) {\n      if (!wire)\n        wire = \"\";\n      const current = [];\n      utils.orderedRead(schema, (index, item) => {\n        var path = wire + \".\" + item.$_key;\n        item.$_path = path;\n\n        // Is array\n        if (Array.isArray(item)) {\n          path = wire + \".\" + item[0].$_key;\n          item[0].$_path = path;\n          item[0].$_array = true;\n\n          var composite = <Tooltip title=\"... of objects\">\n            <Tag color=\"#722ed1\"><ObjectIcon /></Tag>\n          </Tooltip>;\n          // for direct type assignation\n          if (\"$type\" in item[0]) {\n            const TypeInfo = item[0].$type.Info;\n            composite = <TypeInfo />;\n          }\n          else {\n            item[0].$_nested = true;\n          }\n\n          current.push({\n            ptr: item[0],\n            key: path,\n            name: <div>\n              <Tooltip title=\"This field is an array ...\">\n                <Tag color=\"#eb2f96\"><ArrayIcon /></Tag>\n              </Tooltip>\n              {composite}\n              <strong>{item[0].$_key}</strong>\n            </div>,\n            doc: item[0].$doc,\n            children: !(\"$type\" in item[0]) ? fieldify2antDataTable(item[0], path) : null,\n            actions: <div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n              <Popconfirm title={<span>Are you sure to delete the Array <strong>{path}</strong></span>} onConfirm={() => self.itemRemove(item[0])} okText=\"Yes\" cancelText=\"No\">\n                <span className=\"ant-radio-button-wrapper\">\n                  <span><DeleteIcon /></span>\n                </span>\n              </Popconfirm>\n\n              <span className=\"ant-radio-button-wrapper\" onClick={() => self.handlingEdit(item[0])}>\n                <span><EditIcon /></span>\n              </span>\n\n              {!(\"$type\" in item[0]) ?\n                <span className=\"ant-radio-button-wrapper\" onClick={() => self.handlingAdd(path)}>\n                  <span><PlusIcon /></span>\n                </span>\n                : null}\n            </div>\n          });\n        }\n        // is object\n        else if (typeof item === \"object\" && !item.$type) {\n          item.$_nested = true;\n          current.push({\n            ptr: item,\n            key: path,\n            name: <div>\n              <Tooltip title=\"This field is an object\">\n                <Tag color=\"#722ed1\"><ObjectIcon /></Tag>\n              </Tooltip>\n              <strong>{item.$_key}</strong>\n            </div>,\n            doc: item.$doc,\n            children: fieldify2antDataTable(item, path),\n            actions: <div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n              <Popconfirm title={<span>Are you sure to delete Object <strong>{path}</strong></span>} onConfirm={() => self.itemRemove(item)} okText=\"Yes\" cancelText=\"No\">\n                <span className=\"ant-radio-button-wrapper\">\n                  <span><DeleteIcon /></span>\n                </span>\n              </Popconfirm>\n\n              <span className=\"ant-radio-button-wrapper\" onClick={() => self.handlingEdit(item)}>\n                <span><EditIcon /></span>\n              </span>\n\n              <span className=\"ant-radio-button-wrapper\" onClick={() => self.handlingAdd(path)}>\n                <span><PlusIcon /></span>\n              </span>\n            </div>\n          });\n        }\n        else {\n          const TypeInfo = item.$type.Info;\n          current.push({\n            ptr: item,\n            key: path,\n            name: <div>\n              <TypeInfo /> {item.$_key}\n            </div>,\n            doc: item.$doc,\n            actions: <div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n              <Popconfirm title={<span>Are you sure to delete <strong>{path}</strong></span>} onConfirm={() => self.itemRemove(item)}\n                // onCancel={cancel}\n                okText=\"Yes\" cancelText=\"No\">\n                <span className=\"ant-radio-button-wrapper\">\n                  <span><DeleteIcon /></span>\n                </span>\n              </Popconfirm>\n\n              <span className=\"ant-radio-button-wrapper\" onClick={() => self.handlingEdit(item)}>\n                <span><EditIcon /></span>\n              </span>\n            </div>\n          });\n        }\n      });\n      return (current);\n    }\n\n    var data = null;\n    if (root) {\n      data = fieldify2antDataTable(root.handler.schema);\n      return (data)\n    }\n\n    return ([])\n  }\n\n  render() {\n    const sds = this.state.schemaDataSource;\n\n    return (<div>\n      <FieldifySchemaBuilderModal\n        user={this.state.modalUser}\n        visible={this.state.modal}\n        value={this.state.modalContent}\n        onCancel={() => this.setState({ modal: false })}\n        onOk={this.itemChanged.bind(this)}\n      />\n\n      <Table columns={this.columns} dataSource={sds} size=\"small\" pagination={{\n        total: sds.length,\n        pageSize: sds.length,\n        hideOnSinglePage: true\n      }} expandable={{ defaultExpandAllRows: true }} />\n    </div>);\n  }\n}","import { utils, input as FieldifyInput } from \"fieldify\";\nimport React from 'react';\nimport RecycledComponent from 'react-recycling';\n\nimport { Form, Table, Button, Input, Card } from \"antd\";\nimport {\n  PlusOutlined as PlusIcon,\n  DeleteOutlined as DeleteIcon\n} from '@ant-design/icons';\n\nimport { FieldifySchema } from \"../Schema/Schema\";\nimport { TypeDataset } from \"../lib/TypeDataset\";\n\nexport class FieldifySchemaRender extends RecycledComponent {\n  cycle(props) {\n    const state = {\n      layout: props.layout,\n      schema: props.schema,\n      input: props.input,\n    }\n\n    return(state)\n  }\n\n  render() {\n    return (<TypeDataset\n      schema={this.state.schema}\n      input={this.state.input}\n      actions={false}\n      layout={this.state.layout}\n      generator=\"Render\"\n    />);\n  }\n}\n","import { input } from \"fieldify\"\n\nimport React from 'react'\nimport styles from './styles.module.css'\n\nimport * as schema from './Schema'\nimport types from './Types'\n\n// just map the input class from fieldify\nexport class Input extends input {}\n\n// export the schema\nexport const Schema = schema;\n\n// export types\nexport const Types = types;\n\n\n","import React from 'react'\n\nimport { Schema, Types, Input } from '@fieldify/antd'\n\nimport { Row, Col, Card, Tabs, Tag, Form, Radio, Divider } from 'antd';\n\nimport '@fieldify/antd/dist/index.css'\nimport \"antd/dist/antd.css\";\n\nconst {\n  FieldifySchemaBuilder,\n  FieldifySchema,\n  FieldifySchemaForm,\n  FieldifySchemaRender\n} = Schema\n\nconst { TabPane } = Tabs\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    const initial = {\n\n      company: {\n        $doc: \"Your company name\",\n        $type: \"String\",\n        $position: 0\n      },\n      name: {\n        $doc: \"Civility\",\n        $type: \"Name\",\n        $position: 1\n      },\n\n      email: {\n        $doc: \"Votre e-mail\",\n        $type: Types.Email,\n        $position: 2\n      },\n\n      age: {\n        $doc: \"Age\",\n        $type: Types.Number,\n        $position: 3\n      },\n\n      KV: {\n        $doc: \"Key and Value\",\n        $type: Types.KV,\n        $position: 4\n      },\n\n      types: {\n        $doc: 'What kind of number to accept',\n        $required: true,\n        $type: 'Select',\n        $options: {\n          default: 'both',\n          items: {\n            both: 'Both Integer & Float',\n            integer: 'Only Integer',\n            float: 'Only Float'\n          }\n        }\n      },\n\n      address: {\n        $doc: \"Address\",\n        home: {\n          $doc: \"Home\",\n          street: { $doc: \"Street\", $type: Types.String, $options: { min: 2, placeholder: \"Your street\" } },\n          zip: { $doc: \"ZIP\", $type: Types.String },\n          country: { $doc: \"Country\", $type: Types.String },\n        },\n      },\n\n      nestedArray: [{\n        $doc: \"Array of Objects (nested)\",\n        // name: {\n        //   $doc: \"Civility\",\n        //   $type: Types.Name,\n        //   $position: 1\n        // },\n        // description: { $doc: \"Description\", $type: Types.String, $options: { strict: true } },\n        // price: { $doc: \"Price\", $type: Types.String },\n        $array: {\n          min: 2\n        }\n      }],\n\n      // inlinedArray: [{\n      //   $required: true,\n      //   $doc: \"Array of User Defined types (non-nested)\",\n      //   $type: Types.Name,\n      //   $options: { min: 2 },\n      //   $array: {\n      //     min: 2,\n      //     max: 100\n      //   }\n      // }],\n\n      // inlinedArrayString: [{\n      //   $required: true,\n      //   $doc: \"Array of String type (non-nested)\",\n      //   $type: \"String\",\n      //   $array: {\n      //     min: 1,\n      //     max: 100\n      //   }\n      // }]\n    }\n\n    this.state = this.cycle({\n      schema: initial,\n      input: {\n        // V: {},\n        // surface: [\"cds\"]\n        // company: \"Test of the test\",\n        // name: {\n        //   first: \"Michael\",\n        //   last: \"Vergoz\"\n        // },\n        // email: \"mvcdsa@cdas.com\",\n        // KV: {\n        //   \"testcas\": \"Awesome\"\n        // },\n\n        // nestedArray: [{\n        //   name: {\n        //     first: \"Michael\",\n        //     last: \"Vergoz\"\n        //   },\n        //   description: \"This is a description\"\n        // }],\n        // inlinedArray: [{ first: \"Michael\" }],\n\n        // inlinedArrayString: ['michael', 'vergoz', 'did', 'it', 'well']\n      }\n    }, true)\n  }\n\n  cycle(props, first) {\n\n    const state = {\n      schema: props.schema,\n      input: props.input,\n      inputRender: { ...props.input },\n\n      form: {\n        layout: \"horizontal\",\n        json: JSON.stringify(props.input, null, \"  \"),\n        state: \"Filling\",\n        color: \"blue\"\n      },\n      builder: {\n        json: JSON.stringify(props.schema, null, \"  \")\n      },\n      render: {\n        layout: \"horizontal\"\n      }\n    }\n\n    return (state)\n  }\n\n\n  builderChanged(schema) {\n    const state = {\n      schema: schema,\n      builder: {\n        json: JSON.stringify(schema, null, \"  \")\n      }\n    }\n\n    this.setState(state)\n  }\n\n  formChanged(input, value) {\n    // run the verifier on each change to \n    // get the status into the title\n\n    input.verify((result) => {\n\n      const state = {\n        inputRender: { ...result.result },\n        form: {\n          layout: this.state.form.layout,\n          data: result.result,\n          json: JSON.stringify(value, null, \"  \")\n        }\n      }\n\n      if (result.error === true) {\n        state.form.color = \"orange\"\n        state.form.state = \"Verify Failed\"\n      }\n      else {\n        state.form.color = \"green\"\n        state.form.state = \"Passed\"\n      }\n\n      this.setState(state)\n    })\n  }\n\n  render() {\n    const style = { padding: '8px' };\n\n    return <div style={{ width: \"100%\" }}>\n      <h1>Welcome in @fieldify/antd</h1>\n      <h2>Schema Builder</h2>\n\n      <Row>\n        <Col sm={12} xxl={8}>\n          <div style={style}>\n            <Card size=\"small\" title=\"Pass #1 - Building\">\n              <Tabs defaultActiveKey=\"1\">\n                <TabPane tab=\"Visual Editor\" key=\"1\">\n                  <FieldifySchemaBuilder schema={this.state.schema} onChange={this.builderChanged.bind(this)} />\n                </TabPane>\n                <TabPane tab=\"JSON Schema\" key=\"2\">\n                  <pre>\n                    {this.state.builder.json}\n                  </pre>\n                </TabPane>\n              </Tabs>\n            </Card>\n          </div>\n        </Col>\n        <Col sm={12} xxl={8}>\n          <div style={style}>\n            <Card size=\"small\" title={<>Pass #2 - Filling Form <Tag color={this.state.form.color}>{this.state.form.state}</Tag></>}>\n              <Tabs defaultActiveKey=\"1\">\n                <TabPane tab=\"Visual Rendering\" key=\"1\">\n                  <Form>\n                    <Form.Item label=\"Form Layout\" name=\"layout\">\n                      <Radio.Group\n                        value={this.state.form.layout}\n                        onChange={({ target }) => this.setState({ form: { ...this.state.form, layout: target.value } })}\n                      >\n                        <Radio.Button value=\"horizontal\">Horizontal</Radio.Button>\n                        <Radio.Button value=\"vertical\">Vertical</Radio.Button>\n                        <Radio.Button value=\"inline\">Inline</Radio.Button>\n                      </Radio.Group>\n                    </Form.Item>\n                  </Form>\n                  <Divider />\n\n                  <FieldifySchemaForm schema={this.state.schema} input={this.state.input} layout={this.state.form.layout} onChange={this.formChanged.bind(this)} />\n                </TabPane>\n                <TabPane tab=\"Sanatized JSON Input\" key=\"2\">\n                  <pre>\n                    {this.state.form.json}\n                  </pre>\n                </TabPane>\n              </Tabs>\n            </Card>\n          </div>\n        </Col>\n        <Col sm={12} xxl={8}>\n          <div style={style}>\n            <Card size=\"small\" title=\"Pass #3 - Final Result\">\n              <Form>\n                <Form.Item label=\"Form Layout\" name=\"layout\">\n                  <Radio.Group\n                    value={this.state.render.layout}\n                    onChange={({ target }) => this.setState({ render: { layout: target.value } })}\n                  >\n                    <Radio.Button value=\"horizontal\">Horizontal</Radio.Button>\n                    <Radio.Button value=\"vertical\">Vertical</Radio.Button>\n                    <Radio.Button value=\"inline\">Inline</Radio.Button>\n                  </Radio.Group>\n                </Form.Item>\n              </Form>\n              <Divider />\n              <FieldifySchemaRender schema={this.state.schema} input={this.state.inputRender} layout={this.state.render.layout} />\n            </Card>\n          </div>\n        </Col>\n      </Row>\n    </div>\n  }\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","const utils = require('./lib/utils')\nconst fusion = require('./lib/fusion')\nconst assign = require('./lib/assign')\nconst iterator = require('./lib/iterator')\nconst compile = require('./lib/compile')\nconst schema = require('./lib/schema')\nconst input = require('./lib/input')\nconst types = require('./lib/types')\nconst fieldifyType = require('./lib/types/type')\n\nmodule.exports = {\n  schema,\n  input,\n  types,\n  fusion,\n  assign,\n  iterator,\n  compile,\n  utils,\n\n  // this is a shortcut to retrieve the root object for types\n  fieldifyType\n}\n","const leafRegex = /^\\$/\nconst leafPrivateRegex = /^\\$_/\n\nconst internal = {\n  $required: true,\n  $maxArray: 100\n}\n\nmodule.exports = {\n  leaf: leafRegex,\n  leafPrivate: leafPrivateRegex,\n\n  /**\n   * Determine if there is a defined field in the current object stage\n   * @param  {Object}  schema Current stage\n   * @return {Boolean}      true there is reference, false it's free\n   */\n  isThereSubObject: (schema) => {\n    for (var key in schema) {\n      if (internal.hasOwnProperty(key)) continue\n      if (!leafRegex.test(key)) {\n        return (true)\n      }\n    }\n    return (false)\n  },\n\n  /**\n   * Determine if there an object parameter\n   * @param  {Object}  schema Current stage\n   * @return {Boolean}      true there is reference, false it's free\n   */\n  isThereObjectParams: (schema) => {\n    for (var key in schema) {\n      if (internal.hasOwnProperty(key)) continue\n      if (leafRegex.test(key)) {\n        return (true)\n      }\n    }\n    return (false)\n  },\n\n  /**\n   * Async object follower\n   * @param  {[type]} objs       Object to follow\n   * @param  {Function} executor Per item execution\n   */\n  eachObject: (objs, executor) => {\n    var aObjects = []\n\n    // transpose objets to array\n    for (var a in objs) { aObjects.push([a, objs[a]]) }\n\n    function next () {\n      var o = aObjects.shift()\n      if (o === undefined) {\n        executor(null, null, next, true)\n        return\n      }\n      executor(o[0], o[1], () => {\n        process.nextTick(next)\n      }, false)\n    }\n\n    process.nextTick(next)\n  },\n\n  /**\n   * Async array follower\n   * @param  {[type]} list     List of object\n   * @param  {[type]} executor Per item execution\n   */\n  eachItem: (list, executor) => {\n    var index = 0\n    if (!Array.isArray(list)) { return (executor(null, null, null, true)) }\n    function next () {\n      var o = list[index]\n      if (o === undefined) {\n        executor(null, null, null, true)\n        return\n      }\n      executor(index, o, () => {\n        index++\n        process.nextTick(next)\n      }, false)\n    }\n    process.nextTick(next)\n  },\n\n  /**\n   * Read async a list of callback\n   * @param  {Array}    list   Array of callback\n   * @param  {Function} finish Triggered when list is completed\n   */\n  sync: (list, finish) => {\n    function next (index) {\n      var exec = list[index]\n      if (!exec) {\n        if (finish) finish()\n        return\n      }\n      exec(() => {\n        index++\n        process.nextTick(next, index)\n      })\n    }\n    process.nextTick(next, 0)\n  },\n\n  getNO: (schema) => {\n    const nestedObject = []\n    const nestedOptions = []\n\n    for (var key in schema) {\n      const ptr = schema[key]\n      const fc = key.substr(0, 1)\n      if (fc === '$') nestedOptions.push([key, ptr])\n      else nestedObject.push([key, ptr])\n    }\n\n    return ({ nestedObject, nestedOptions })\n  },\n\n  orderedRead: (schema, cb, wire) => {\n    wire = wire || ''\n\n    const dup = { ...schema }\n\n    // remap keys\n    for (var key in dup) {\n      if (leafRegex.test(key)) {\n        delete dup[key]\n        continue\n      }\n    }\n\n    // ordering the line\n    const ordered = Object.values(dup).sort((a, b) => {\n      if (Array.isArray(a)) a = a[0]\n      if (Array.isArray(b)) b = b[0]\n\n      return (a.$position - b.$position)\n    })\n\n    // this pass is use to reduce displacement on positions\n    for (var index = 0; index < ordered.length; index++) {\n      var ptr = ordered[index]\n      if (Array.isArray(ptr)) ptr = ptr[0]\n      ptr.$position = index\n    }\n\n    // follow and update the line\n    for (var index = 0; index < ordered.length; index++) {\n      const item = ordered[index]\n      cb(index, item)\n    }\n  }\n}\n"],"sourceRoot":""}