{"version":3,"file":"index.js","sources":["../src/lib/TypeForm.js","../src/lib/TypeInfo.js","../src/lib/TypeBuilder.js","../src/Types/String.js","../src/Types/Name.js","../src/Types/Email.js","../src/Types/Checkbox.js","../src/Types/Select.js","../src/Types/FieldName.js","../src/Types.js","../src/Schema/Schema.js","../src/Schema/Form.js","../src/Schema/BuilderModal.js","../src/Schema/Builder.js","../src/Schema.js","../src/index.js"],"sourcesContent":["import React, { Component } from 'react';\nimport {\n  Col,\n  Row,\n  Form\n} from \"antd\";\n\nexport default class FieldifyTypeForm extends Component {\n  constructor(props) {\n    super(props)\n    this.state = this.cycle(props)\n\n    if (props.verify === true) {\n      this.verify(props.value, (ret) => {\n        this.state = { ...this.state, ...ret }\n      })\n    }\n  }\n\n\n  componentDidUpdate(props, state) {\n    if (this.props !== props) {\n      const cycle = this.cycle(this.props);\n      this.setState(cycle)\n    }\n  }\n\n  cycle(props) {\n    this.schema = props.schema;\n\n    const state = {\n      value: props.value,\n      // verify: props.verify,\n      // feedback: false,\n      // status: null,\n      // help: this.schema.$help\n    }\n\n    this.isInjected = props.isInjected;\n\n    this.onChange = props.onChange ? props.onChange : () => { };\n    this.onError = props.onError ? props.onError : () => { };\n\n    if (!this.schema) return (state)\n\n    state.options = this.schema.$options || {};\n    this.handler = this.schema.$_type;\n\n    return (state)\n  }\n\n  timedChange(cb, speed) {\n    if (this._changeTimer) {\n      this._changeTimerQueue++;\n      this._changeTimerCb = cb;\n      return;\n    }\n\n    cb = cb || this._changeTimerCb;\n    if (!cb) return;\n\n    delete this._changeTimerCb;\n    this._changeTimerQueue = 0;\n    this._changeTimer = setTimeout(() => {\n      cb(() => {\n        delete this._changeTimer;\n\n        // update in queue ?\n        if (this._changeTimerQueue > 0) {\n          this.timedChange(cb, speed);\n        }\n      })\n    }, speed)\n  }\n\n  changeValue(value, speed) {\n    speed = speed || 500;\n\n    this.setState({\n      value: value\n    })\n\n    this._lastValue = value;\n\n    this.timedChange((end) => {\n      this.verify(this._lastValue, (ret) => {\n        this.setState(ret);\n        if (ret.status !== \"success\") {\n          end();\n          return;\n        }\n        \n        this.onChange(this.schema, this._lastValue);\n        end();\n      })\n    }, speed)\n  }\n\n  verify(value, cb) {\n    this.handler.verify(value, (error, message) => {\n      if (error === false) {\n        this.onError(false);\n        return (cb({\n          status: \"success\",\n          feedback: true,\n          help: null\n        }));\n      }\n\n      \n      this.onError(true, message);\n      return (cb({\n        status: \"error\",\n        feedback: true,\n        help: message\n      }))\n    })\n  }\n\n\n  render(children) {\n    // return(children)\n\n    if (!this.schema || this.isInjected === true) return (\n      <Form.Item\n        label={this.schema.$doc}\n        required={this.schema.$required}\n        validateStatus={this.state.status}\n        hasFeedback={this.state.feedback}\n        help={this.state.help}\n        style={{ marginBottom: \"0px\" }}\n        wrapperCol={{ sm: 24 }}\n      >\n        {children}\n      </Form.Item>\n    )\n\n    return (\n      <Form.Item\n        label={this.schema.$doc}\n        required={this.schema.$required}\n        validateStatus={this.state.status}\n        hasFeedback={this.state.feedback}\n        help={this.state.help}\n        style={{ marginBottom: \"8px\" }}\n        wrapperCol={{ sm: 24 }}\n      >\n        {children}\n      </Form.Item>\n    )\n  }\n}\n\n","import { Component } from 'react';\n\nexport default class SignderivaTypeInfo extends Component {\n  constructor(props) {\n    super(props)\n    this.props = props;\n    if (props.match) this.path = props.match.path;\n    this.state = {}\n  }\n\n\n  componentDidUpdate(prevProps, prevState) {\n    const pNew = this.props.schema || {};\n    const pOld = prevProps.schema || {};\n    // console.log(\"SignderivaTypeInfo.update\", pOld, pNew)\n  }\n\n}\n\n","import { Component } from 'react';\n\nexport default class SignderivaTypeBuilder extends Component {\n  constructor(props) {\n    super(props);\n    this.props = props;\n    this.onChange = props.onChange ? props.onChange : () => { };\n\n    if (props.match) this.path = props.match.path;\n\n    this.state = { ...props.options };\n\n    this.default = {};\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const pNew = this.props.options || {};\n    const pOld = prevProps.options || {};\n    \n    var changed = 0;\n    for (var key in this.default) {\n      const o = pOld[key];\n      const n = pNew[key];\n      if (o !== n)\n        changed++;\n    }\n\n    // console.log(\"TypeBuilder.update\", changed, pOld, pNew)\n    if (changed > 0) {\n      this.setState(pNew);\n      this.onChange({...pNew});\n    }\n    \n  }\n\n  setup(prev) {\n    // console.log(\"setup\")\n    const state = { ...prev };\n\n    // clean non valid field\n    for (var a in state) {\n      const p = this.default[a];\n      if (!p) delete state[a]\n    }\n\n    // setup default\n    for (var a in this.default) {\n      if (!(a in state))\n        state[a] = this.default[a];\n    }\n    return (state);\n  }\n\n  configure() {\n    this.state = this.setup(this.state);\n    this.onChange({ ...this.state });\n  }\n\n  changeIt(key, value) {\n    const change = Object.assign({}, this.state);\n    change[key] = value;\n\n    // console.log(\"TypeBuilder\", change)\n    this.setState(change);\n    this.onChange({...change});\n  }\n\n}\n","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { FieldStringOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass StringForm extends TypeForm {\n  render() {\n    return (super.render(\n      <Input \n      value={this.state.value} \n      placeholder={this.state.options.placeholder} \n      onChange={({ target }) => this.changeValue(target.value)} \n      style={{width: \"100%\"}}\n      />\n    ));\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass StringInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#fadb14\" style={{ color: \"#555555\" }}><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass StringBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"String min/max size\">\n          <Space>\n            <InputNumber min={0} value={this.state.minSize} onChange={(value) => this.changeIt(\"minSize\", value)} />\n\n            <InputNumber min={0} value={this.state.maxSize} onChange={(value) => this.changeIt(\"maxSize\", value)} />\n          </Space>\n        </Form.Item>\n\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.String.code,\n  description: types.String.description,\n  class: types.String.class,\n\n  Info: StringInfo,\n  Builder: StringBuilder,\n  Form: StringForm\n}\n\n\n","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { UserSwitchOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\nimport TString from './String';\n\nconst StringForm = TString.Form\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NameForm extends TypeForm {\n  constructor(props) {\n    super(props)\n\n  }\n\n  cycle(props) {\n    const ret = super.cycle(props)\n    if (!ret.value) ret.value = {}\n    \n    this.result = {...ret.value}\n    return (ret)\n  }\n\n  error(from, error, message) {\n    // this.setState({\n    //   help: \"Please fill the form\"\n    // })\n  }\n\n  setField(key, schema, value) {\n    this.result[key] = value;\n    this.onChange(this.schema, this.result);\n  }\n\n  render() {\n\n    return (super.render(\n      <Row gutter={16}>\n        <Col className=\"gutter-row\" span={12}>\n          <StringForm\n            schema={this.schema.first}\n            verify={this.state.verify}\n            value={this.state.value.first}\n            onChange={(schema, value) => this.setField(\"first\", schema, value)}\n            // onError={(error, message) => this.error(\"first\", error, message)}\n            isInjected={true}\n          />\n        </Col>\n        <Col className=\"gutter-row\" span={12}>\n          <StringForm\n            schema={this.schema.last}\n            verify={this.state.verify}\n            value={this.state.value.last}\n            onChange={(schema, value) => this.setField(\"last\", schema, value)}\n            // onError={(error, message) => this.error(\"last\", error, message)}\n            isInjected={true}\n          />\n        </Col>\n      </Row>\n    ))\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NameInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#36cfc9\" style={{ color: \"#555555\" }}><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NameBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"Name min/max size\">\n          <Space>\n            <InputNumber min={0} value={this.state.minSize} onChange={(value) => this.changeIt(\"minSize\", value)} />\n\n            <InputNumber min={0} value={this.state.maxSize} onChange={(value) => this.changeIt(\"maxSize\", value)} />\n          </Space>\n        </Form.Item>\n\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.Name.code,\n  description: types.Name.description,\n  class: types.Name.class,\n\n  Info: NameInfo,\n  Builder: NameBuilder,\n  Form: NameForm,\n\n  noFormItem: true\n}\n\n\n","import { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  Checkbox,\n  Form,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { MailOutlined } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass EmailForm extends TypeForm {\n  render() {\n    return (super.render(\n      <Input value={this.state.value} placeholder={this.state.options.placeholder} onChange={({ target }) => this.changeValue(target.value)} />\n    ));\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass EmailInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#1890ff\"><MailOutlined /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Complement builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass EmailBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      subAddressing: true\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"Sub-addressing\">\n          <Checkbox checked={this.state.subAddressing} onChange={({ target }) => this.changeIt(\"subAddressing\", target.checked)}>Allowed</Checkbox>\n        </Form.Item>\n      </div>\n    )\n  }\n}\n\n\nexport default {\n  code: types.Email.code,\n  description: types.Email.description,\n  class: types.Email.class,\n\n  Info: EmailInfo,\n  Builder: EmailBuilder,\n  Form: EmailForm\n}","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { FieldStringOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass CheckboxForm extends TypeForm {\n  render() {\n    return (super.render(\n      <Input placeholder=\"Checkbox of characters\" />\n    ))\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass CheckboxInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#fadb14\" style={{ color: \"#555555\" }}><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass CheckboxBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"Checkbox min/max size\">\n          <Space>\n            <InputNumber min={0} value={this.state.minSize} onChange={(value) => this.changeIt(\"minSize\", value)} />\n\n            <InputNumber min={0} value={this.state.maxSize} onChange={(value) => this.changeIt(\"maxSize\", value)} />\n          </Space>\n        </Form.Item>\n\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.Checkbox.code,\n  description: types.Checkbox.description,\n  class: types.Checkbox.class,\n\n  Info: CheckboxInfo,\n  Builder: CheckboxBuilder,\n  Form: CheckboxForm\n}\n\n\n","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Select,\n  Col,\n  Row\n} from \"antd\";\n\nimport { FieldStringOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass SelectForm extends TypeForm {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      value: props.value,\n      options: {}\n    }\n\n    if (props.schema.$options) this.state.options = props.schema.$options\n\n    this.state.items = this.updateItems()\n  }\n\n  updateItems() {\n    if (!this.state.options.items) return ([])\n\n    const options = []\n    for (var key in this.state.options.items) {\n      const value = this.state.options.items[key];\n      options.push(<Select.Option value={key} key={key}>{value}</Select.Option>)\n    }\n\n    return (options)\n  }\n\n  render() {\n    return (super.render(\n      <Select value={this.state.value} onChange={(value) => this.changeValue(value)}>\n        {this.state.items}\n      </Select>\n    ))\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass SelectInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#fadb14\" style={{ color: \"#555555\" }}><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass SelectBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"Select min/max size\">\n          <Space>\n            <InputNumber min={0} value={this.state.minSize} onChange={(value) => this.changeIt(\"minSize\", value)} />\n\n            <InputNumber min={0} value={this.state.maxSize} onChange={(value) => this.changeIt(\"maxSize\", value)} />\n          </Space>\n        </Form.Item>\n\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.Select.code,\n  description: types.Select.description,\n  class: types.Select.class,\n\n  Info: SelectInfo,\n  Builder: SelectBuilder,\n  Form: SelectForm\n}\n\n\n","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { FieldStringOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\nimport String from './String'\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass FieldNameForm extends String.Form { \n  constructor(props){\n    super(props)\n  }\n\n  verify(input, cb) {\n    super.verify(input, (ret)=>{\n      if(ret.status !== \"success\") {\n        return(cb(ret))\n      }\n\n      // check if the key is already used\n      if(this.props.user && input in this.props.user) {\n        const msg = `Field name already used`\n        \n        this.onError(true, msg);\n        return (cb({\n          status: \"error\",\n          feedback: true,\n          help: msg\n        }))\n      }\n\n      cb(ret)\n    })\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass FieldNameInfo extends String.Info { }\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass FieldNameBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    // this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"FieldName min/max size\">\n          {/* <Space>\n            <InputNumber min={0} value={this.state.minSize} onChange={(value) => this.changeIt(\"minSize\", value)} />\n\n            <InputNumber min={0} value={this.state.maxSize} onChange={(value) => this.changeIt(\"maxSize\", value)} />\n          </Space> */}\n        </Form.Item>\n\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.FieldName.code,\n  description: types.FieldName.description,\n  class: types.FieldName.class,\n\n  Info: FieldNameInfo,\n  Builder: FieldNameBuilder,\n  Form: FieldNameForm\n}\n\n\n","import Name from \"./Types/Name\"\nimport Email from \"./Types/Email\"\nimport String from \"./Types/String\"\nimport Checkbox from \"./Types/Checkbox\"\nimport Select from \"./Types/Select\"\nimport FieldName from \"./Types/FieldName\"\n\n\nexport default {\n  Name,\n  Email,\n  String,\n  Select,\n  Checkbox,\n  FieldName\n}\n","import { schema } from \"fieldify\";\n\nexport class FieldifySchema extends schema {\n  constructor(name, options) {\n    super(name, options);\n  }\n\n  compile(schema) {\n    // process normal compilation\n    super.compile(schema);\n  }\n}\n","import React from 'react';\nimport { utils, input as FieldifyInput } from \"fieldify\";\nimport { Form, Table, Button, Input, Card } from \"antd\";\nimport {\n  PlusOutlined as PlusIcon,\n  DeleteOutlined as DeleteIcon\n} from '@ant-design/icons';\n\nexport class FieldifySchemaForm extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = this.cycle(props, true);\n  }\n\n  componentDidUpdate(props, state) {\n    if (this.props !== props) {\n      const cycle = this.cycle(this.props);\n      this.setState(cycle)\n    }\n  }\n\n  cycle(props, first) {\n    this.schema = props.schema;\n    this.input = props.input;\n\n    if (!this.input || !(typeof props.input === \"object\")) {\n      this.input = new FieldifyInput(this.schema)\n    }\n\n    const state = {\n      input: this.input.getValue(),\n      // verify: props.verify\n    };\n\n    state.reactive = this.update(state.input, state.verify);\n\n    this.references = {};\n\n    this.onChange = props.onChange ? props.onChange : () => { };\n\n    return (state)\n  }\n\n  clickAddArray(line) {\n    this.input.set(line)\n    const _value = this.input.getValue();\n    this.onChange(_value)\n    this.setState({\n      input: _value,\n      reactive: this.update(_value, false)\n    })\n  }\n\n  clickRemoveArrayItem(line) {\n    this.input.remove(line)\n    const _value = this.input.getValue();\n    this.onChange(_value)\n    this.setState({\n      input: _value,\n      reactive: this.update(_value, false)\n    })\n  }\n\n  setValue(line, value) {\n    this.input.set(line, value)\n    const _value = this.input.getValue();\n    this.onChange(_value)\n    this.setState({\n      input: _value\n    })\n  }\n\n  input(input, verify) {\n    // const state = {\n    //   verify,\n    //   input\n    // }    \n    // state.reactive = this.update(input, verify)\n    // this.setState(state)\n  }\n\n  update(input, verify) {\n    const follower = (schema, input, ret, line) => {\n      line = line || \"\"\n\n      utils.orderedRead(schema, (index, item) => {\n        const inputPtr = input ? input[item.$_key] : null;\n        const lineKey = line+\".\"+item.$_key;\n        \n        // check if the item is hidden\n        if (item.hidden === true)\n          return;\n\n        // ARRAY\n        if (Array.isArray(item)) {\n          const source = { ...item[0] };\n          var inputPtr2 = inputPtr;\n          const options = source.$array || {};\n          const min = options.min ? options.min : (source.$required === true ? 1 : 0)\n\n          const columns = [\n            {\n              dataIndex: 'form',\n              key: 'form',\n              width: \"100%\"\n            },\n            {\n              dataIndex: 'actions',\n              key: 'actions',\n              align: \"right\"\n            },\n          ];\n          const dataSource = []\n\n          /*\n           * Is an array with non nested schema inside\n           */\n          if (source.$_array === true && source.$_nested !== true) {\n            \n            delete source.$doc; // source is cloned\n            const TypeForm = source.$type.Form;\n\n            // console.log(\"Array non nested\", min, inputPtr2)\n\n            if (verify === true) {\n              // console.log()\n            }\n\n            if (!Array.isArray(inputPtr)) {\n              input[item.$_key] = [];\n              inputPtr2 = input[item.$_key];\n            }\n\n            if (!inputPtr2) return (ret);\n\n            if (min - inputPtr2.length > 0) {\n              for (var a = 0; a <= min - inputPtr2.length; a++) {\n                inputPtr2.push(null)\n              }\n            }\n\n            for (var a = 0; a < inputPtr2.length; a++) {\n              const value = inputPtr2[a];\n              const key = lineKey + \".\" + a\n\n              dataSource.push({\n                key,\n                form: <TypeForm\n                  schema={source}\n                  value={value}\n                  // verify={verify}\n                  user={this.props.user}\n                  onChange={(schema, value) => this.setValue(key, value)}\n                  isInjected={true}\n                  // reference errors\n                  onError={(error, message) => {\n                    if (error === true) {\n                      this.references[key] = message;\n                    }\n                    else {\n                      const ref = this.references[key];\n                      if (ref) {\n                        delete this.references[key];\n                      }\n                    }\n                  }}\n                />,\n                actions: <Button size=\"small\" onClick={() => this.clickRemoveArrayItem(key)}>\n                  <span><DeleteIcon /></span>\n                </Button>\n              })\n            }\n\n          }\n          /*\n           * Is an array with nested schema inside\n           */\n          else if (source.$_array === true && source.$_nested === true) {\n            var inputPtr2 = input[item.$_key]\n\n            // console.log(\"Schema has nested array\", item.$_wire, item.$_key, verify, source, input[item.$_key], input)\n\n            if (!Array.isArray(inputPtr)) inputPtr2 = input[item.$_key] = [];\n\n            // console.log(\"Array nested\", min, min - inputPtr2.length, inputPtr2)\n\n            // force to create min form\n            if (min - inputPtr2.length > 0) {\n              for (var a = 0; a <= min - inputPtr2.length; a++) {\n                inputPtr2.push({})\n              }\n            }\n\n            // very special case for field where there is subfield\n            if (item[0].$_schematized === true) {\n              delete source.$doc; // source is cloned\n              const TypeForm = source.$type.Form;\n\n              for (var a = 0; a < inputPtr2.length; a++) {\n                const value = inputPtr2[a];\n                const key = lineKey + \".\" + a\n      \n                dataSource.push({\n                  key,\n                  form: <TypeForm\n                    schema={source}\n                    value={value}\n                    // verify={verify}\n                    user={this.props.user}\n                    onChange={(schema, value) => this.setValue(key, value)}\n                    isInjected={true}\n                    // reference errors\n                    onError={(error, message) => {\n                      if (error === true) {\n                        this.references[key] = message;\n                      }\n                      else {\n                        const ref = this.references[key];\n                        if (ref) {\n                          delete this.references[key];\n                        }\n                      }\n                    }}\n                  />,\n                  actions: <Button size=\"small\" onClick={() => this.clickRemoveArrayItem(key)}>\n                    <span><DeleteIcon /></span>\n                  </Button>\n                })\n              }\n            }\n            else {\n              for (var a = 0; a < inputPtr2.length; a++) {\n                const value = inputPtr2[a];\n                const key = lineKey + \".\" + a\n\n                const child = [];\n                follower(item.$_ptr[0], value, child, key);\n\n                dataSource.push({\n                  key,\n                  form: child,\n                  actions: <Button size=\"small\" onClick={() => this.clickRemoveArrayItem(key)}>\n                    <span><DeleteIcon /></span>\n                  </Button>\n                })\n              }\n            }\n\n          }\n\n          ret.push(<Form.Item key={item.$_wire} noStyle={true}>\n            <div className=\"ant-form-item\">\n              <Card size=\"small\" title={source.$_access.$doc} extra={<div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n                <span className=\"ant-radio-button-wrapper\" onClick={() => this.clickAddArray(lineKey+\".\"+inputPtr2.length)}>\n                  <span><PlusIcon /></span>\n                </span>\n              </div>}>\n                <Table\n                  size=\"small\"\n                  dataSource={dataSource}\n                  columns={columns}\n                  verticalAlign='middle'\n                  showHeader={false}\n                  pagination={{\n                    total: dataSource.length,\n                    pageSize: dataSource.length,\n                    hideOnSinglePage: true\n                  }}\n                  bordered\n                />\n              </Card>\n            </div>\n          </Form.Item>);\n        }\n        // OBJECT\n        else if (typeof item === \"object\" && !item.$type) {\n          const child = [];\n          follower(item.$_ptr, inputPtr, child, lineKey);\n          ret.push(<div key={item.$_wire} className=\"ant-form-item\">\n            <Card size=\"small\" title={item.$doc}>\n              {child}\n            </Card>\n          </div>);\n        }\n        // LEAF\n        else {\n          const TypeForm = item.$type.Form;\n\n          ret.push(<TypeForm\n            schema={item}\n            value={inputPtr}\n            key={item.$_wire}\n            // verify={verify}\n            user={this.props.user}\n            onChange={(schema, value) => this.setValue(lineKey, value)}\n\n            // reference errors\n            onError={(error, message) => {\n              if (error === true) {\n                this.references[item.$_key] = message;\n              }\n              else {\n                const ref = this.references[item.$_key];\n                if (ref) {\n                  delete this.references[item.$_key];\n                }\n              }\n            }}\n          />);\n        }\n      });\n      return (ret);\n    };\n\n\n    const ret = [];\n    follower(this.schema.handler.schema, input, ret);\n    return (ret);\n  }\n\n  render() {\n\n    const layout = {\n      labelCol: { span: 8 },\n      wrapperCol: { span: 16 },\n    };\n\n    return (<Form {...layout} name=\"basic\">\n      {this.state.reactive}\n    </Form>);\n  }\n}\n","import React from 'react';\nimport Types from '../Types';\nimport { Modal, Form, Input, Select, Checkbox } from \"antd\";\nimport { FieldifySchema } from \"../Schema/Schema\";\nimport { FieldifySchemaForm } from './Form'\n\n\nexport class FieldifySchemaBuilderModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: props.visible,\n      user: props.user,\n      size: 1\n    };\n\n    this.allTypes = {}\n    for (var a in Types) {\n      this.allTypes[a] = Types[a].description\n    }\n    // create the base of the schema\n    this.schema = new FieldifySchema(\"modal\");\n    this.schema.compile({\n      key: {\n        $doc: \"Name of the field\",\n        $type: Types.FieldName,\n        $required: true\n      },\n      type: {\n        $doc: \"Field type\",\n        $type: Types.Select,\n        $required: true,\n        $options: {\n          items: this.allTypes\n        }\n      },\n      doc: {\n        $doc: \"Description\",\n        $required: true,\n        $type: Types.String\n      },\n      // options: {\n      //   $doc: \"Options\",\n      //   $type: Types.Checkbox,\n      //   $options: {\n      //     required: \"Field is required\",\n      //     readOnly: \"Field is read only\",\n      //   }\n      // },\n    });\n\n    this.formRef = React.createRef()\n\n    // setTimeout(()=>{\n    //   if(this.formRef.current) {\n    //     this.formRef.current.input({\n    //       key: \"yes cda\"\n    //     })\n    //   }\n    // }, 3000)\n  \n  }\n\n  componentDidUpdate(props, state) {\n    const newState = { ...this.state };\n    var changed = false;\n\n    if (this.state.visible !== this.props.visible) {\n      newState.visible = this.props.visible;\n      changed = true;\n    }\n\n    if (this.state.user !== this.props.user) {\n      newState.user = this.props.user;\n      changed = true;\n    }\n\n    if (changed === true)\n      this.setState(newState);\n  }\n\n  // updateOptions(opts) {\n  //   this.setState({\n  //     ...this.state,\n  //     $options: { ...opts }\n  //   });\n  // }\n\n  // getTypeState(value, state) {\n  //   const type = Types[value];\n  //   if (type) {\n  //     return ({\n  //       ...this.state,\n  //       ...state,\n  //       $type: value,\n  //       builder: null\n  //     });\n  //   }\n  //   return ({ ...this.state, ...state, $type: value, builder: null });\n  // }\n  // updateType(value, state) {\n  //   this.setState(this.getTypeState(value, state));\n  // }\n\n  receiveHeadForm() {\n    console.log(\"receiveHeadForm\")\n  }\n\n\n  render() {\n    const onOk = () => {\n      // this.onOk(this.state);\n    };\n    const onCancel = () => {\n      // this.setState({ visible: false });\n      this.props.onCancel(this.state);\n    };\n    const $name = ({ target }) => {\n      this.setState({ $key: target.value });\n    };\n    const $required = ({ target }) => {\n      this.setState({ $required: target.checked });\n    };\n    const $doc = ({ target }) => {\n      this.setState({ $doc: target.value });\n    };\n    const layout = {\n      labelCol: { span: 8 },\n      wrapperCol: { span: 16 },\n    };\n    return (<Modal title=\"Add New Field To Your Schema\" width={this.state.size * 520} centered visible={this.state.visible} onOk={onOk} onCancel={onCancel}>\n\n      <FieldifySchemaForm ref={this.formRef} schema={this.schema} user={this.props.user} onChange={this.receiveHeadForm.bind(this)} />\n\n    </Modal>);\n  }\n}\n","import React from 'react';\nimport {\n  schema,\n  iterator,\n  assign,\n  fusion,\n  utils\n} from \"fieldify\"\n\nimport {\n  notification,\n  Table,\n  Tag,\n  Popconfirm,\n  Tooltip\n} from 'antd';\n\nimport {\n  EditOutlined as EditIcon,\n  DeleteOutlined as DeleteIcon,\n  UnorderedListOutlined as ObjectIcon,\n  PlusOutlined as PlusIcon,\n  CopyOutlined as ArrayIcon\n} from '@ant-design/icons';\n\nimport { FieldifySchemaBuilderModal } from './BuilderModal';\n\nimport String from \"../Types/String\";\n\nexport class FieldifySchemaBuilder extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      modal: false,\n      modalUser: null,\n      schemaDataSource: []\n    };\n\n    this.schema = props.schema;\n\n    this.state.schemaDataSource = this.updateDataSource()\n\n    this.columns = [\n      {\n        title: 'Key',\n        dataIndex: 'name',\n        key: 'key',\n      },\n      {\n        title: 'Description',\n        dataIndex: 'doc',\n        key: 'doc'\n      },\n      {\n        title: <div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n          <span className=\"ant-radio-button-wrapper\" onClick={() => this.handlingAdd()}>\n            <span>Add Field <PlusIcon /></span>\n          </span>\n        </div>,\n        dataIndex: 'actions',\n        key: 'actions',\n        align: \"right\"\n      },\n    ];\n\n  }\n\n  fireOnChange() {\n\n  }\n\n  itemChanged(arg) {\n    console.log(\"itemChanged\", arg);\n  }\n\n  itemRemove(item) {\n    this.props.schema.removeLineup(item.$_path);\n\n    this.fireOnChange();\n\n    this.setState({\n      schemaDataSource: this.updateDataSource()\n    });\n\n    notification.success({\n      message: \"Field removed\",\n      description: `Field at ${item.$_path} has been removed successfully`\n    })\n  }\n\n  handlingAdd(path) {\n    path = path || \".\";\n    const lineup = this.props.schema.getLineup(path) || this.schema.handler.schema;\n    console.log(\"handing add\", path, lineup);\n    this.setState({ modal: true, modalUser: lineup });\n  }\n\n  handlingEdit(item) {\n    console.log(\"handing edit\", item, Array.isArray(item));\n    this.setState({ modal: true, modalContent: item });\n  }\n\n  updateDataSource() {\n    const self = this;\n    function fieldify2antDataTable(schema, wire) {\n      if (!wire)\n        wire = \"\";\n      const current = [];\n      utils.orderedRead(schema, (index, item) => {\n        const path = wire + \".\" + item.$_key;\n        item.$_path = path;\n\n        // Is array\n        if (Array.isArray(item)) {\n          var composite = <Tooltip title=\"... of objects\">\n            <Tag color=\"#722ed1\"><ObjectIcon /></Tag>\n          </Tooltip>;\n          // for direct type assignation\n          if (\"$type\" in item[0]) {\n            const TypeInfo = item[0].$type.Info;\n            composite = <TypeInfo />;\n          }\n          current.push({\n            ptr: item,\n            key: path,\n            name: <div>\n              <Tooltip title=\"This field is an array ...\">\n                <Tag color=\"#eb2f96\"><ArrayIcon /></Tag>\n              </Tooltip>\n              {composite}\n              <strong>{item.$_key}</strong>\n            </div>,\n            doc: item.$doc,\n            children: !(\"$type\" in item[0]) ? fieldify2antDataTable(item[0], path) : null,\n            actions: <div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n              <Popconfirm title={<span>Are you sure to delete the Array <strong>{path}</strong></span>} onConfirm={() => self.itemRemove(item)} okText=\"Yes\" cancelText=\"No\">\n                <span className=\"ant-radio-button-wrapper\">\n                  <span><DeleteIcon /></span>\n                </span>\n              </Popconfirm>\n\n              <span className=\"ant-radio-button-wrapper\" onClick={() => self.handlingEdit(item)}>\n                <span><EditIcon /></span>\n              </span>\n\n              {!(\"$type\" in item[0]) ?\n                <span className=\"ant-radio-button-wrapper\" onClick={() => self.handlingAdd(path)}>\n                  <span><PlusIcon /></span>\n                </span>\n                : null}\n            </div>\n          });\n        }\n        // is object\n        else if (typeof item === \"object\" && !item.$type) {\n          current.push({\n            ptr: item,\n            key: path,\n            name: <div>\n              <Tooltip title=\"This field is an object\">\n                <Tag color=\"#722ed1\"><ObjectIcon /></Tag>\n              </Tooltip>\n              <strong>{item.$_key}</strong>\n            </div>,\n            doc: item.$doc,\n            children: fieldify2antDataTable(item, path),\n            actions: <div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n              <Popconfirm title={<span>Are you sure to delete Object <strong>{path}</strong></span>} onConfirm={() => self.itemRemove(item)} okText=\"Yes\" cancelText=\"No\">\n                <span className=\"ant-radio-button-wrapper\">\n                  <span><DeleteIcon /></span>\n                </span>\n              </Popconfirm>\n\n              <span className=\"ant-radio-button-wrapper\" onClick={() => self.handlingEdit(item)}>\n                <span><EditIcon /></span>\n              </span>\n\n              <span className=\"ant-radio-button-wrapper\" onClick={() => self.handlingAdd(path)}>\n                <span><PlusIcon /></span>\n              </span>\n            </div>\n          });\n        }\n        else if (item.$type) {\n          const TypeInfo = item.$type.Info;\n          current.push({\n            ptr: item,\n            key: path,\n            name: <div>\n              <TypeInfo /> {item.$_key}\n            </div>,\n            doc: item.$doc,\n            actions: <div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n              <Popconfirm title={<span>Are you sure to delete <strong>{path}</strong></span>} onConfirm={() => self.itemRemove(item)}\n                // onCancel={cancel}\n                okText=\"Yes\" cancelText=\"No\">\n                <span className=\"ant-radio-button-wrapper\">\n                  <span><DeleteIcon /></span>\n                </span>\n              </Popconfirm>\n\n              <span className=\"ant-radio-button-wrapper\" onClick={() => self.handlingEdit(item)}>\n                <span><EditIcon /></span>\n              </span>\n            </div>\n          });\n        }\n      });\n      return (current);\n    }\n\n    var data = null;\n    if (this.schema) {\n      data = fieldify2antDataTable(this.schema.tree);\n      return (data)\n    }\n\n    return ([])\n  }\n\n  render() {\n    const sds = this.state.schemaDataSource;\n\n    return (<div>\n      <FieldifySchemaBuilderModal\n        user={this.state.modalUser}\n        visible={this.state.modal}\n        onCancel={() => this.setState({ modal: false })}\n        onOk={this.itemChanged.bind(this)}\n      />\n\n      <Table columns={this.columns} dataSource={sds} size=\"small\" pagination={{\n        total: sds.length,\n        pageSize: sds.length,\n        hideOnSinglePage: true\n      }} expandable={{ defaultExpandAllRows: true }} />\n    </div>);\n  }\n}\n","\nimport React from 'react'\n\nimport { iterator, assign } from \"fieldify\"\n\n\nimport { Space, Radio, Button } from \"antd\";\n\n\nexport { FieldifySchemaBuilder } from \"./Schema/Builder\"\nexport { FieldifySchemaForm } from \"./Schema/Form\"\n\nexport { FieldifySchema } from \"./Schema/Schema\"\n\nexport class FieldifySchemaRender extends React.Component {\n\n  render() {\n    return (<div>test</div>)\n  }\n}\n\n\n\n","import { input } from \"fieldify\"\n\nimport React from 'react'\nimport styles from './styles.module.css'\n\nimport * as schema from './Schema'\nimport types from './Types'\n\n// just map the input class from fieldify\nexport class Input extends input {}\n\n// export the schema\nexport const Schema = schema;\n\n// export types\nexport const Types = types;\n\n\n"],"names":["FieldifyTypeForm","props","state","cycle","verify","value","ret","componentDidUpdate","setState","schema","isInjected","onChange","onError","options","$options","handler","$_type","timedChange","cb","speed","_changeTimer","_changeTimerQueue","_changeTimerCb","setTimeout","changeValue","_lastValue","end","status","error","message","feedback","help","render","children","React","Form","$doc","$required","marginBottom","sm","Component","SignderivaTypeInfo","match","path","prevProps","prevState","SignderivaTypeBuilder","pNew","pOld","changed","key","o","n","setup","prev","a","p","configure","changeIt","change","Object","assign","StringForm","Input","placeholder","target","width","TypeForm","StringInfo","Tag","color","Icon","TypeInfo","StringBuilder","minSize","maxSize","Space","InputNumber","TypeBuilder","code","types","String","description","Info","Builder","TString","NameForm","result","from","setField","Row","Col","first","last","NameInfo","NameBuilder","Name","noFormItem","EmailForm","EmailInfo","MailOutlined","EmailBuilder","subAddressing","Checkbox","checked","Email","CheckboxForm","CheckboxInfo","CheckboxBuilder","SelectForm","items","updateItems","push","Select","SelectInfo","SelectBuilder","FieldNameForm","input","user","msg","FieldNameInfo","FieldNameBuilder","FieldName","FieldifySchema","name","compile","FieldifySchemaForm","FieldifyInput","getValue","reactive","update","references","clickAddArray","line","set","_value","clickRemoveArrayItem","remove","setValue","follower","utils","orderedRead","index","item","inputPtr","$_key","lineKey","hidden","Array","isArray","source","inputPtr2","$array","min","columns","dataIndex","align","dataSource","$_array","$_nested","$type","length","form","ref","actions","Button","DeleteIcon","$_schematized","child","$_ptr","$_wire","Card","$_access","PlusIcon","Table","total","pageSize","hideOnSinglePage","layout","labelCol","span","wrapperCol","FieldifySchemaBuilderModal","visible","size","allTypes","Types","type","doc","formRef","createRef","newState","receiveHeadForm","console","log","onOk","onCancel","Modal","bind","FieldifySchemaBuilder","modal","modalUser","schemaDataSource","updateDataSource","title","handlingAdd","fireOnChange","itemChanged","arg","itemRemove","removeLineup","$_path","notification","success","lineup","getLineup","handlingEdit","modalContent","self","fieldify2antDataTable","wire","current","composite","Tooltip","ObjectIcon","ptr","ArrayIcon","Popconfirm","EditIcon","data","tree","sds","defaultExpandAllRows","FieldifySchemaRender","Schema"],"mappings":"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"}