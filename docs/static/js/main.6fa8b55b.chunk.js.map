{"version":3,"sources":["../../../core/lib/fusion.js","../../../core/index.js","../../../core/lib/assign.js","../../../core/lib/iterator.js","../../../core/lib/compile.js","../../../core/lib/types/index.js","../../../core/lib/schema.js","../../../core/lib/types/String.js","../../../core/lib/types/Number.js","../../../core/lib/types/Select.js","../../../core/lib/types/Name.js","../../../core/lib/types/Email.js","../../../core/lib/types/Checkbox.js","../../../core/lib/types/Hash.js","../../../core/lib/types/URL.js","../../../core/lib/types/DatePicker.js","../../../core/lib/types/Slug.js","../../../core/lib/types/Color.js","../../../core/lib/types/FieldName.js","../../../core/lib/types/KV.js","../../../core/lib/input.js","../../../core/lib/types/type.js","../../../../react-recycling/index.js","../../src/lib/TypeForm.js","../../src/lib/TypeRender.js","../../src/lib/TypeInfo.js","../../src/lib/TypeBuilder.js","../../src/Types/String.js","../../src/Types/Name.js","../../src/Types/Email.js","../../src/Types/Number.js","../../src/Types/Checkbox.js","../../src/Types/Select.js","../../src/Types/Object.js","../../src/Types/Array.js","../../src/Types/FieldName.js","../../src/Types/KV.js","../../src/Types.js","../../src/Schema/Schema.js","../../src/Schema/Form.js","../../src/Schema/BuilderModal.js","../../src/Schema/Builder.js","../../src/Schema/Render.js","../../src/index.js","App.js","index.js","../../../core/lib/utils.js"],"names":["_specialClone","dst","src","a","p","Array","isArray","constructor","name","module","exports","ret","utils","require","fusion","assign","iterator","compile","schema","input","types","fieldifyType","fieldifyAssignator","leaf","user","lkey","first","nestedObject","getNO","key","value","save","Object","keys","length","ptr","fieldifyIteratorBuffer","options","this","handler","result","level","onAssign","current","next","onEnter","onLeave","onEnd","end","line","no","eachItem","index","oend","object","arrayResult","next2","arraySchema","$_nested","branch","useless","subResult","push","access","$_access","values","fib","fieldifyHandler","orgSchema","_access","_accessStack","tmpAccess","nestedOptions","ptrS","noIn","subLine","drive","$_array","pop","String","Number","Select","Name","Email","Checkbox","Hash","URL","DatePicker","Slug","Color","FieldName","KV","fieldifySchema","tree","policy","read","write","type","localAssigner","source","$_key","split","typeClass","$type","resolver","console","error","class","$_type","$options","undefined","$_wire","$_hidden","$read","$write","correctedOptions","sanatizeOptions","nonTypeSchematized","typeSchematized","schematizer","patch","extract","$_schematized","bind","handlerSchematized","pv","leafPrivate","test","code","opts","$required","fields","verify","message","output","_filterLine","flow","direction","lineup","beforeLast","shift","bLast","root","last","obj","getLineup","injection","oldLineup","newLineup","saved","newKey","filter","valid","signderivaType","strictRegex","noUnicodeRegex","exported","description","signderivaTypeString","cb","min","max","strict","match","unicode","placeholder","help","$doc","signderivaTypeNumber","isNaN","parseInt","acceptedTypes","default","items","both","integer","float","fieldifyTypeSelector","signderivaTypeName","regex","signderivaTypeEmailAddress","toLowerCase","fieldifyTypeCheckbox","_sha1","_sha256","_sha512","signderivaTypeHash","mode","sha1Verifier","sha256Verifier","sha512Verifier","signderivaTypeURL","maxLength","minLength","signderivaTypeDatePicker","range","signderivaTypeSlug","signderivaTypeColor","fieldifyTypeFieldName","signderivaTypeKV","fieldifyInput","_value","verifying","data","node","get","create","schemaCur","inputCur","field","splice","RecycledComponent","props","context","updater","state","cycle","changed","setState","React","Component","feedback","status","setTimeout","speed","isInjected","label","required","validateStatus","hasFeedback","style","marginBottom","wrapperCol","sm","injected","subRender","width","pNew","pOld","prevProps","prev","setup","change","onChange","target","color","minSize","maxSize","Info","Builder","Form","Render","StringRender","StringForm","TString","gutter","className","span","final","noFormItem","subAddressing","checked","EmailRender","NumberRender","CheckboxForm","SelectRender","msg","FieldNameForm","computeDataSource","ds","actions","onClick","modalCurrent","modalError","modalInitial","modal","mc","columns","title","dataIndex","align","layout","labelCol","centered","closable","visible","onOk","editedButton","onCancel","size","dataSource","pagination","total","pageSize","hideOnSinglePage","showHeader","KVRender","Types","update","inputValue","reactive","follower","schematized","item","schematizedSrc","sourceSchematized","inputPtr","lineKey","inputPtr2","child","form","TypeForm","onError","noStyle","extra","verticalAlign","bordered","formRef","allTypes","allTypesNoArray","baseSchema","$position","doc","position","$default","edition","original","val","content","Type","configuration","currentSchema","nvalue","npath","oldPath","newPath","handleOK","ref","formChanged","modalUser","schemaDataSource","updateDataSource","ex","arg","notification","modalContent","path","self","wire","composite","TypeInfo","children","fieldify2antDataTable","onConfirm","okText","cancelText","sds","itemChanged","expandable","defaultExpandAllRows","TypeRender","Schema","FieldifySchemaBuilder","FieldifySchemaForm","FieldifySchemaRender","TabPane","Tabs","App","initial","company","email","age","address","home","street","zip","country","work","nestedArray","$array","inlinedArray","inlinedArrayString","inputRender","json","JSON","stringify","builder","render","padding","xxl","defaultActiveKey","tab","builderChanged","Item","Group","Button","ReactDOM","document","getElementById","leafRegex","internal","$maxArray","isThereSubObject","hasOwnProperty","isThereObjectParams","eachObject","objs","executor","aObjects","process","nextTick","o","list","sync","finish","exec","substr","orderedRead","dup","ordered","sort","b"],"mappings":"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","file":"static/js/main.6fa8b55b.chunk.js","sourcesContent":["function _specialClone (dst, src) {\n  for (var a in src) {\n    const p = src[a]\n    if (Array.isArray(p)) {\n      if (!Array.isArray(dst[a])) dst[a] = [{}]\n      _specialClone(dst[a][0], p[0])\n    }\n    else if (p && typeof p === 'object') {\n      // here we only remap javascript Object\n      // all other object are pointed\n      if (p.constructor.name === 'Object') {\n        if (!dst[a]) dst[a] = {}\n        _specialClone(dst[a], p)\n      }\n      else {\n        dst[a] = src[a]\n      }\n    }\n    else {\n      dst[a] = src[a]\n    }\n  }\n}\n\n/**\n * Fusionning 2 objects schema, returning new one\n * @param  {Object} dst Destination object\n * @param  {Object} src Source object\n * @return {Object}     New object\n */\nfunction fieldifyFusion (dst, src) {\n  const ret = {}\n\n  _specialClone(ret, dst)\n  _specialClone(ret, src)\n\n  return (ret)\n}\n\nmodule.exports = fieldifyFusion\n","const utils = require('./lib/utils')\nconst fusion = require('./lib/fusion')\nconst assign = require('./lib/assign')\nconst iterator = require('./lib/iterator')\nconst compile = require('./lib/compile')\nconst schema = require('./lib/schema')\nconst input = require('./lib/input')\nconst types = require('./lib/types')\nconst fieldifyType = require('./lib/types/type')\n\nmodule.exports = {\n  schema,\n  input,\n  types,\n  fusion,\n  assign,\n  iterator,\n  compile,\n  utils,\n\n  // this is a shortcut to retrieve the root object for types\n  fieldifyType\n}\n","const utils = require('./utils')\n\n/**\n  * Generator deep iterator is a complex function to assign a\n  * new struture of a current schema\n  * @param  {Object} schema Source schema to follow\n  * @param  {fieldifyAssignator~callback} leaf Executed on each leaf\n  * @param  {Mixed} user User pointer\n  * @param  {lkey} lkey Internal use\n  */\nfunction fieldifyAssignator (schema, leaf, user, lkey, first) {\n  const { nestedObject } = utils.getNO(schema)\n\n  var ret = {}\n\n  if (first === false) {\n    const lret = leaf(user, ret, schema, lkey)\n    if (lret === false) return (ret)\n  }\n\n  // follow the rest of keys\n  for (var a in nestedObject) {\n    const key = nestedObject[a][0]\n    const value = schema[key]\n\n    const save = lkey\n    lkey = lkey ? lkey + '.' + key : key\n    if (Array.isArray(value)) {\n      ret[key] = [fieldifyAssignator(value[0], leaf, user, lkey, false)]\n\n      // prune branch\n      if (Object.keys(ret[key][0]).length === 0) delete ret[key]\n    }\n    else {\n      ret[key] = fieldifyAssignator(value, leaf, user, lkey, false)\n\n      // prune the branch\n      if (Object.keys(ret[key]).length === 0) delete ret[key]\n    }\n\n    // restore state\n    lkey = save\n  }\n\n  if (first !== false) {\n    for (var key in ret) {\n      const ptr = ret[key]\n\n      if (typeof ptr === 'object' && Object.keys(ptr) === 0) {\n        delete ret[key]\n      }\n    }\n  }\n  return (ret)\n}\n\n/**\n * This callback is displayed as part of the Requester class.\n * @callback fieldifyAssignator~callback\n * @param {number} responseCode\n * @param {string} responseMessage\n */\n\nmodule.exports = fieldifyAssignator\n","const utils = require('./utils')\n\nclass fieldifyIteratorBuffer {\n  constructor (options) {\n    this.options = options\n    this.handler = options.handler\n    this.result = {}\n    this.level = 0\n\n    // correct callbacks\n    options.onAssign = options.onAssign || ((current, next) => {\n      // generic assignation\n      current.result[current.key] = current.input\n      next()\n    })\n    options.onEnter = options.onEnter || ((current) => { })\n    options.onLeave = options.onLeave || ((current) => { })\n    options.onEnd = options.onEnd || ((result) => { })\n  }\n\n  branch (schema, input, end, line) {\n    line = line || '.'\n    const no = utils.getNO(schema)\n    const result = {}\n    this.level++\n\n    // when entering in a branch\n    this.options.onEnter(schema)\n\n    // follow each element of the current branch\n    utils.eachItem(no.nestedObject, (index, ptr, next, oend) => {\n      if (oend === true) {\n        this.level--\n\n        // when leaving in a branch\n        this.options.onLeave(schema)\n\n        // initial level\n        if (this.level === 0) {\n          this.result = result\n          end(this, result)\n        }\n        // level up\n        else {\n          end(this, result)\n        }\n\n        return\n      }\n\n      const key = ptr[0]\n\n      const current = {\n        iterator: this,\n        key: key,\n        object: ptr[1],\n        input: input ? input[ptr[0]] : null,\n        line: line + key,\n        result: result\n      }\n\n      if (Array.isArray(current.object)) {\n        // this is an input error\n        if (!Array.isArray(current.input)) {\n          // here we reset the input as we have\n          // to follow all the schema\n          current.input = null\n\n          // here is a problem. the schema must\n          // be followed at least one time in\n          // order to reveal assignation errors\n          // and notabely required fields.\n          this.branch(\n            current.object[0],\n            null,\n            (useless, subResult) => {\n              next()\n            },\n            key\n          )\n        }\n        else {\n          // ok at this step we can follow the input\n          // as we are sure is it an array.\n          // Array is just a bridge between 2 branch.\n          const arrayResult = []\n          utils.eachItem(current.input, (index, ptr, next2, oend) => {\n            if (oend === true) {\n              // assign to result\n              if (arrayResult.length > 0) result[key] = arrayResult\n\n              // return to normal mode\n              next()\n\n              return\n            }\n\n            // management of array with direct and indirect assignment\n            const arraySchema = current.object[0]\n\n            if (arraySchema.$_nested === true) {\n              // this is an input error\n              if (typeof current.input !== 'object') {\n                // here we reset the input as we have\n                // to follow all the schema\n                ptr = null\n              }\n\n              // console.log(\"ARRAY NEST\", arraySchema, ptr)\n\n              // change branche because of nested branch\n              this.branch(\n                arraySchema,\n                ptr,\n                (useless, subResult) => {\n                  if (Object.keys(subResult).length > 0) arrayResult.push(subResult)\n                  next2()\n                },\n                key\n              )\n            }\n            // here we can get and compare values\n            else {\n              current.input = ptr\n\n              // console.log(\"ARRAY DIRECT\");\n\n              // creation of a shortcut on the access fields\n              current.access = arraySchema.$_access\n              current.result = {}\n\n              // execution of user assignment\n              this.options.onAssign(current, () => {\n                // store as array if there is result\n                const values = Object.values(current.result)\n                if (values.length > 0) {\n                  arrayResult.push(values[0])\n                }\n\n                next2()\n              })\n            }\n          })\n        }\n      }\n      // here the input must be an object\n      else if (current.object.$_nested === true) {\n        // this is an input error\n        if (typeof current.input !== 'object') {\n          // here we reset the input as we have\n          // to follow all the schema\n          current.input = null\n        }\n\n        this.branch(\n          current.object,\n          current.input,\n          (useless, subResult) => {\n            if (Object.keys(subResult).length > 0) result[key] = subResult\n            next()\n          },\n          key\n        )\n      }\n      // here we can get and compare values\n      else {\n        // put a shortcut\n        current.access = current.object.$_access\n\n        // execution of user assignment\n        this.options.onAssign(current, next)\n      }\n    })\n  }\n}\n\nfunction fieldifyIterator (options) {\n  const fib = new fieldifyIteratorBuffer(options)\n\n  fib.branch(options.handler.schema, options.input, () => {\n    // end user execution\n    fib.options.onEnd(fib)\n  })\n}\n\nmodule.exports = fieldifyIterator\n","const utils = require('./utils')\nconst fusion = require('./fusion')\n\nclass fieldifyHandler {\n  constructor (schema) {\n    this.orgSchema = schema\n    this.schema = fusion({}, schema)\n\n    this._access = {}\n    this._accessStack = []\n  }\n\n  branch (schema, line) {\n    line = line || ''\n    const no = utils.getNO(schema)\n\n    // construct options of the current branch\n    const tmpAccess = {}\n    for (var a in no.nestedOptions) {\n      const ptr = no.nestedOptions[a]\n      tmpAccess[ptr[0]] = ptr[1]\n    }\n\n    this._access = fusion(this._access, tmpAccess)\n\n    if (no.nestedObject.length > 0) schema.$_nested = true\n\n    for (var key in no.nestedObject) {\n      const ptrS = no.nestedObject[key]\n      const noIn = utils.getNO(ptrS[1])\n      const subLine = line.length > 0 ? line + '.' + ptrS[0] : ptrS[0]\n      var drive = ptrS[1]\n\n      // current key is an array\n      if (Array.isArray(ptrS[1])) {\n        drive = ptrS[1][0]\n        drive.$_array = true\n      }\n      // the current key is nested\n      else if (noIn.nestedObject.length > 0) {\n        drive.$_nested = true\n      }\n\n      // push on the stack current accesses\n      this._accessStack.push(this._access)\n\n      // remove useless private info\n      delete this._access.$_nested\n      delete this._access.$_array\n\n      // enter in the branch\n      this.branch(drive, subLine)\n\n      // set the current access\n      drive.$_access = this._access\n\n      // restore the state of access\n      this._access = this._accessStack.pop()\n    }\n  }\n}\n\nfunction fieldifyCompiler (schema) {\n  const fib = new fieldifyHandler(schema)\n\n  // process nested object\n  fib.branch(fib.schema)\n\n  //    console.log(JSON.stringify(fib.schema, null, \"\\t\"))\n\n  return (fib)\n}\n\nmodule.exports = fieldifyCompiler\n","const String = require('./String')\nconst Number = require('./Number')\nconst Select = require('./Select')\nconst Name = require('./Name')\nconst Email = require('./Email')\nconst Checkbox = require('./Checkbox')\nconst Hash = require('./Hash')\nconst URL = require('./URL')\nconst DatePicker = require('./DatePicker')\nconst Slug = require('./Slug')\nconst Color = require('./Color')\nconst FieldName = require('./FieldName')\nconst KV = require('./KV')\n\nmodule.exports = {\n  String,\n  Number,\n  Select,\n  Name,\n  Email,\n  Checkbox,\n  Hash,\n  URL,\n  DatePicker,\n  Slug,\n  Color,\n  FieldName,\n  KV\n}\n","\nconst fusion = require('./fusion')\nconst compile = require('./compile')\nconst iterator = require('./iterator')\nconst assign = require('./assign')\nconst utils = require('./utils')\nconst types = require('./types')\n\nclass fieldifySchema {\n  constructor (name, options) {\n    if (!options) options = {}\n\n    this.tree = options.tree || {}\n    this.policy = options.policy || {\n      read: true,\n      write: true\n    }\n  }\n\n  resolver (type) {\n    return (types[type])\n  }\n\n  fusion (schema) {\n    this.tree = fusion(this.tree, schema)\n  }\n\n  /**\n   * Compile the targetted schema\n   * @param {Object} schema The schema\n   */\n  compile (schema) {\n    if (schema) this.tree = schema\n\n    const localAssigner = (user, dst, object, source) => {\n      dst.$_key = ('.' + source).split('.').pop()\n\n      for (var a in object) dst[a] = object[a]\n\n      var typeClass = null\n\n      // the type is a string, use the resolver to retrieve\n      // the good object control\n      if (typeof object.$type === 'string') {\n        dst.$type = this.resolver(object.$type)\n        if (!dst.$type) {\n          console.error('Can not resolv type ' + object.$type)\n          return (true)\n        }\n        typeClass = dst.$type.class\n      }\n      else if (object.$type) {\n        typeClass = object.$type.class\n      }\n\n      // create the type with the desired options\n\n      dst.$_type = typeClass ? new typeClass(object.$options) : undefined\n      dst.$_wire = '.' + source\n\n      // apply default policy\n      // use with caution\n      if (user) {\n        dst.$_hidden = true\n        dst.$_wire = user + dst.$_wire\n      }\n\n      dst.$read = '$read' in dst ? dst.$read : this.policy.read\n      dst.$write = '$write' in dst ? dst.$write : this.policy.write\n\n      // sanatize options\n      if (!user && dst.$_type && object.$options) {\n        const correctedOptions = dst.$_type.sanatizeOptions(object.$options || {})\n        dst.$options = correctedOptions\n      }\n\n      return (true)\n    }\n\n    // here we store the \"original\" non type schematized use\n    // to work with lineup and to drive the flow of displaying\n    const nonTypeSchematized = assign(this.tree, localAssigner)\n\n    // extract the schematized types\n    // this will be use in background for verification\n    // and filtering\n    const typeSchematized = assign(nonTypeSchematized, (user, dst, object, source) => {\n      if (object.$_type && object.$_type.schematizer) {\n        const patch = object.$_type.schematizer(object)\n        if (patch !== null) {\n          for (var a in object) dst[a] = object[a]\n\n          // extract sub fields\n          const extract = assign(patch, localAssigner, object.$_wire)\n          for (var a in extract) dst[a] = extract[a]\n\n          dst.$_schematized = true\n        }\n        else for (var a in object) dst[a] = object[a]\n      }\n      else for (var a in object) dst[a] = object[a]\n\n      return (true)\n    })\n\n    // we will finally based the search on the assigned extraction\n    this.handler = compile(nonTypeSchematized, this.resolver.bind(this))\n    this.handlerSchematized = compile(typeSchematized, this.resolver.bind(this))\n  }\n\n  /**\n   * Export the current working schema\n   */\n  export (pv) {\n    const localAssigner = (user, dst, object, source) => {\n      if (object.$_hidden === true) return (true)\n\n      for (var a in object) {\n        if (utils.leafPrivate.test(a) && pv === true) {\n          dst[a] = object[a]\n        }\n        else if (utils.leaf.test(a) && utils.leafPrivate.test(a) === false && pv !== true) {\n          dst[a] = object[a]\n        }\n      }\n\n      if (typeof dst.$type !== 'string' && dst.$type) dst.$type = dst.$type.code\n\n      return (true)\n    }\n\n    //  prune and return\n    return (assign(this.handler.schema, localAssigner))\n  }\n\n  /**\n   * Verify User Input following Schema Definition\n   * @param {*} input User input\n   * @param {*} onEnd Function is async, fired when verification is done\n   */\n  verify (input, onEnd) {\n    const ret = {\n      error: false\n    }\n\n    const opts = {\n      handler: this.handlerSchematized,\n      input: input,\n\n      onAssign: (current, next) => {\n        // get different pointer we need\n        const { access, input } = current\n\n        // check if access schema has right to write\n        if (access.$write !== true) {\n          // do not response to avoid field discovery\n          // just ignore the field\n          // if user set required without then it\n          // will have logic conflict\n          return (next())\n        }\n\n        // check if the field is required\n        if (access.$required === true && input === undefined) {\n          ret.error = true\n          if (!ret.fields) ret.fields = {}\n          ret.fields[current.line] = 'Required Field'\n          return (next())\n        }\n        // in opposite, if the field is not required\n        // then we should not run the verifier\n        if (access.$required !== true && input === undefined) {\n          // just a pass through\n          return (next())\n        }\n\n        // run the type dependant verifier\n        if (access.$_type) {\n          access.$_type.verify(input, (error, message) => {\n            // there is error during verification\n            if (error === true) {\n              ret.error = true\n              if (!ret.fields) ret.fields = {}\n              ret.fields[current.line] = message\n              return (next())\n            }\n\n            // just assign value\n            current.result[current.key] = input\n            next()\n          })\n        }\n        else {\n          ret.error = true\n          if (!ret.fields) ret.fields = {}\n          ret.fields[current.line] = 'Need field interpretor'\n          return (next())\n        }\n      },\n\n      onEnd: (iterator) => {\n        ret.result = iterator.result\n        onEnd(ret)\n      }\n    }\n    iterator(opts)\n  }\n\n  /**\n   * Filter Database Output following Schema Definition\n   * @param {*} output\n   * @param {*} onEnd\n   */\n  filter (output, onEnd) {\n    if (Array.isArray(output)) {\n      const ret = {\n        error: false,\n        result: []\n      }\n      utils.eachItem(output, (index, ptr, next, oend) => {\n        if (oend === true) return (onEnd(ret))\n\n        // apply filter on each entry\n        this._filterLine(ptr, ({ result }) => {\n          ret.result.push(result)\n          next()\n        })\n      })\n    }\n    else {\n      this._filterLine(output, onEnd)\n    }\n  }\n\n  /**\n   * Encode the input data following fieldify schema\n   * @param {*} input\n   * @param {*} onEnd When operation is done\n   */\n  encode (input, onEnd) {\n    this.flow('encode', input, onEnd)\n  }\n\n  /**\n   * Decode the input data following fieldify schema\n   * @param {*} input\n   * @param {*} onEnd When operation is done\n   */\n  decode (input, onEnd) {\n    this.flow('decode', input, onEnd)\n  }\n\n  /**\n   * Execute type callback following the flow of the schema\n   * @param {String} direction The executed callback inside the type\n   * @param {*} input Input data\n   * @param {*} onEnd Called when finish to read\n   */\n  flow (direction, input, onEnd) {\n    const ret = {\n      error: false\n    }\n\n    const opts = {\n      handler: this.handlerSchematized,\n      input: input,\n\n      onAssign: (current, next) => {\n        // get different pointer we need\n        const { access, result, input } = current\n\n        // run the type dependant verifier\n        access.$_type[direction](input, (output) => {\n          // just assign value\n          result[current.key] = output\n          next()\n        })\n      },\n\n      onEnd: (iterator) => {\n        ret.result = iterator.result\n        onEnd(ret)\n      }\n    }\n    iterator(opts)\n  }\n\n  /**\n   * Get lineup allow to read the schema following a string\n   * @param {String} lineup String, field separate by points\n   * @param {Boolean} beforeLast Return the before last instead of the last one\n   * @returns {Object}\n   *\n   * The string must start with a point:\n   * getLineup(\".\") = get the root schema\n   * getLineup(\".fieldA.fieldB\")\n   */\n  getLineup (lineup, beforeLast) {\n    const fields = lineup.split('.')\n    fields.shift()\n\n    var bLast = this.handler.schema\n    var root = this.handler.schema\n    for (var a = 0; a < fields.length; a++) {\n      const field = fields[a]\n      var ptr = root[field]\n      bLast = root\n\n      if (Array.isArray(ptr)) ptr = ptr[0]\n\n      if (!ptr) return (beforeLast === true ? { beforeLast: bLast, last: null, fields } : null)\n      root = ptr\n    }\n\n    return (beforeLast === true ? { beforeLast: bLast, last: root, fields } : root)\n  }\n\n  /**\n   * Set an object in the schema following the lineup string\n   * @param {String} lineup\n   * @param {Object} obj\n   *\n   * The string must start with a point:\n   * setLineup(\".fieldA.fieldB\", {$type: Types.String})\n   */\n  setLineup (lineup, obj) {\n    const root = this.getLineup(lineup, true)\n    const injection = root.beforeLast\n    const key = root.fields[root.fields.length - 1]\n\n    if (!injection) return (false)\n\n    // inject the field as it into the schema\n    injection[key] = obj\n\n    // during the injection and to avoid recompilation\n    // we will dynamically resolv the type\n    if (obj.$type && typeof obj.$type === 'string') {\n      obj.$type = this.resolver(obj.$type)\n    }\n\n    return (true)\n  }\n\n  /**\n   * Rename a line up\n   * @param {String} oldLineup\n   * @param {String} newLineup\n   */\n  renameLineup (oldLineup, newLineup) {\n    // get old lineup info\n    const root = this.getLineup(oldLineup, true)\n    const injection = root.beforeLast\n    const key = root.fields[root.fields.length - 1]\n    const saved = injection[key]\n\n    if (!injection || !saved) return (false)\n\n    // prepare new lineup\n    const fields = newLineup.split('.')\n    fields.shift()\n    const newKey = fields[fields.length - 1]\n\n    if (!newKey) return (false)\n\n    // restore on the new place\n    injection[newKey] = saved\n\n    return (true)\n  }\n\n  /**\n   * Remove object (and everything else) following the lineup String\n   * @param {String} lineup\n   */\n  removeLineup (lineup) {\n    const root = this.getLineup(lineup, true)\n    const injection = root.beforeLast\n    const key = root.fields[root.fields.length - 1]\n\n    if (!injection) return (false)\n\n    // inject the field as it into the schema\n    delete injection[key]\n\n    return (true)\n  }\n\n  _filterLine (input, onEnd) {\n    const ret = {\n      error: false\n    }\n\n    const opts = {\n      handler: this.handlerSchematized,\n      input: input,\n\n      onAssign: (current, next) => {\n        // get different pointer we need\n        const { access, result, input } = current\n\n        // check if access schema has right to write\n        if (access.$read !== true) {\n          // do not response to avoid field discovery\n          // just ignore the field\n          // if user set required without then it\n          // will have logic conflict\n          return (next())\n        }\n\n        // run the type dependant verifier\n        access.$_type.filter(input, (valid, message) => {\n          if (valid !== true) {\n            return (next())\n          }\n\n          // just assign value\n          result[current.key] = input\n          next()\n        })\n      },\n\n      onEnd: (iterator) => {\n        ret.result = iterator.result\n        onEnd(ret)\n      }\n    }\n    iterator(opts)\n  }\n}\n\nmodule.exports = fieldifySchema\n","const signderivaType = require('./type')\n\nconst strictRegex = /`|~|!|@|#|\\$|%|\\^|&|\\*|\\(|\\)|\\+|=|\\[|\\{|\\]|\\}|\\||\\\\|'|<|,|\\.|>|\\?|\\/|\"|;|:/gm\n\nconst noUnicodeRegex = /^[a-z0-9\\-_\\s]+$/i\n\nconst exported = {\n  code: 'String',\n  description: 'String of characters'\n}\n\nclass signderivaTypeString extends signderivaType {\n  verify (input, cb) {\n    if (typeof input !== 'string') {\n      return (cb(true, 'Not a string'))\n    }\n\n    if ('min' in this.options && input.length < this.options.min) {\n      return (cb(true, `String is too short (min: ${this.options.min})`))\n    }\n\n    if ('max' in this.options && input.length > this.options.max) {\n      return (cb(true, `String is too long (max: ${this.options.max})`))\n    }\n\n    if (this.options.strict === true && input.match(strictRegex)) {\n      return (cb(true, 'Forbidden special chars'))\n    }\n\n    if (this.options.unicode === false && !noUnicodeRegex.test(input)) {\n      return (cb(true, 'Unicode is forbidden'))\n    }\n\n    cb(false)\n  }\n\n  sanatizeOptions (input) {\n    const output = {\n      placeholder: typeof input.placeholder === 'string' ? input.placeholder : undefined,\n      help: typeof input.help === 'string' ? input.help : undefined,\n      min: typeof input.min === 'number' ? input.min : undefined,\n      max: typeof input.max === 'number' ? input.max : undefined,\n      strict: typeof input.strict === 'boolean' ? input.strict : undefined,\n      unicode: typeof input.unicode === 'boolean' ? input.unicode : undefined\n    }\n    return (output)\n  }\n\n  configuration () {\n    return ({\n      placeholder: {\n        $doc: 'Field placeholder',\n        $required: false,\n        $type: 'String'\n      },\n      help: {\n        $doc: 'Help / Bottom message',\n        $required: false,\n        $type: 'String'\n      }\n    })\n  }\n}\n\nexported.class = signderivaTypeString\nmodule.exports = exported\n","const signderivaType = require('./type')\n\n// const noUnicodeRegex = /^[0-9]+$/i\n\nconst exported = {\n  code: 'Number',\n  description: 'Various Numbers'\n}\n\nfunction isInt (n) {\n  return n % 1 === 0\n}\n\nclass signderivaTypeNumber extends signderivaType {\n  verify (input, cb) {\n    if (isNaN(input)) return (cb(true, 'Not a number'))\n\n    if (typeof input === 'string') input = parseInt(input)\n\n    const integer = isInt(input)\n\n    // if (this.options.unicode === false && !noUnicodeRegex.test(input)) {\n    //   return (cb(true, 'Unicode is forbidden'))\n    // }\n\n    cb(false)\n  }\n\n  sanatizeOptions (input) {\n    const output = {\n      // placeholder: typeof input.placeholder === 'string' ? input.placeholder : undefined,\n      // help: typeof input.help === 'string' ? input.help : undefined,\n      // min: typeof input.min === 'number' ? input.min : undefined,\n      // max: typeof input.max === 'number' ? input.max : undefined,\n      // strict: typeof input.strict === 'boolean' ? input.strict : undefined,\n      // unicode: typeof input.unicode === 'boolean' ? input.unicode : undefined\n    }\n    return (output)\n  }\n\n  configuration () {\n    return ({\n      acceptedTypes: {\n        $doc: 'What kind of number to accept',\n        $required: true,\n        $type: 'Select',\n        $options: {\n          default: 'both',\n          items: {\n            both: 'Both Integer & Float',\n            integer: 'Only Integer',\n            float: 'Only Float'\n          }\n        }\n      }\n    })\n  }\n}\n\nexported.class = signderivaTypeNumber\nmodule.exports = exported\n","const fieldifyType = require('./type')\n\nclass fieldifyTypeSelector extends fieldifyType {\n  sanatizeOptions (input) {\n    const output = {\n      placeholder: typeof input.placeholder === 'string' ? input.placeholder : undefined,\n      help: typeof input.help === 'string' ? input.help : undefined,\n      default: typeof input.default === 'string' ? input.default : undefined,\n      items: typeof input.items === 'object' ? input.items : undefined\n    }\n    return (output)\n  }\n\n  configuration () {\n    return ({\n      default: {\n        $doc: 'Default selection (key)',\n        $required: false,\n        $type: 'String'\n      },\n      items: {\n        $doc: 'Items in selector',\n        $required: true,\n        $type: 'KV'\n      }\n    })\n  }\n\n}\n\nmodule.exports = {\n  code: 'Select',\n  description: 'Selector',\n  class: fieldifyTypeSelector\n}\n","const signderivaType = require('./type')\n\nclass signderivaTypeName extends signderivaType {\n  schematizer () {\n    return ({\n      first: {\n        $type: 'String',\n        $options: {\n          strict: true,\n          min: 2,\n          max: 128,\n          unicode: false\n        }\n      },\n      last: {\n        $type: 'String',\n        $options: {\n          strict: true,\n          min: 2,\n          max: 128,\n          unicode: true\n        }\n      }\n    })\n  }\n}\n\nmodule.exports = {\n  code: 'Name',\n  description: 'Name (first and last name)',\n  class: signderivaTypeName\n}\n","const signderivaType = require('./type')\n\n// eslint-disable-next-line no-control-regex\nconst regex = /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/\n\nclass signderivaTypeEmailAddress extends signderivaType {\n  verify (input, cb) {\n    if (typeof input !== 'string') {\n      return (cb(true, 'Not an e-mail'))\n    }\n\n    const ret = regex.test(input)\n    if (ret !== true) return (cb(true, 'Invalid e-mail address'))\n\n    return (cb(false))\n  }\n\n  encode (input, cb) {\n    input = input.toLowerCase()\n    if (cb) cb(input)\n    return (input)\n  }\n}\n\nmodule.exports = {\n  code: 'Email',\n  description: 'E-mail address',\n  class: signderivaTypeEmailAddress\n}\n","const fieldifyType = require('./type')\n\nclass fieldifyTypeCheckbox extends fieldifyType {\n\n}\n\nmodule.exports = {\n  code: 'Checkbox',\n  description: 'Checkbox options',\n  class: fieldifyTypeCheckbox\n}\n","const signderivaType = require('./type')\n\n// Support\n// SHA1\n// SHA256 < default\n// SHA512\n\nconst _sha1 = /\\b[0-9a-f]{5,40}\\b/\nconst _sha256 = /\\b[A-Fa-f0-9]{64}\\b/\nconst _sha512 = /\\b[A-Fa-f0-9]{128}\\b/\n\nclass signderivaTypeHash extends signderivaType {\n  constructor (options) {\n    super(options)\n\n    switch (this.options.mode) {\n      case 'sha1':\n        this.verify = this.sha1Verifier.bind(this)\n        break\n\n      default:\n      case 'sha256':\n        this.verify = this.sha256Verifier.bind(this)\n        break\n\n      case 'sha512':\n        this.verify = this.sha512Verifier.bind(this)\n        break\n    }\n  }\n\n  sha1Verifier (input, cb) {\n    if (!input) {\n      if (cb) cb(false)\n      return (false)\n    }\n\n    const ret = _sha1.test(input)\n    if (cb) cb(ret)\n    return (ret)\n  }\n\n  sha256Verifier (input, cb) {\n    if (!input) {\n      if (cb) cb(false)\n      return (false)\n    }\n    const ret = _sha256.test(input)\n    if (cb) cb(ret)\n    return (ret)\n  }\n\n  sha512Verifier (input, cb) {\n    if (!input) {\n      if (cb) cb(false)\n      return (false)\n    }\n    const ret = _sha512.test(input)\n    if (cb) cb(ret)\n    return (ret)\n  }\n}\n\nmodule.exports = {\n  code: 'Hash',\n  description: 'Computer Hash',\n  class: signderivaTypeHash\n}\n","const signderivaType = require('./type')\n\n// Support\n// SHA1\n// SHA256 < default\n// SHA512\n\n// eslint-disable-next-line no-useless-escape\nconst regex = /^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$/g\n\nclass signderivaTypeURL extends signderivaType {\n  constructor (options) {\n    super(options)\n\n    if (!this.options.maxLength) this.options.maxLength = 256\n    if (!this.options.minLength) this.options.minLength = 8\n  }\n\n  verifier (input, cb) {\n    if (!input) {\n      if (cb) cb(false)\n      return (false)\n    }\n\n    if (typeof input !== 'string') {\n      if (cb) cb(false)\n      return (false)\n    }\n\n    if (input.length <= 0 || input.length > this.options.maxLength) {\n      if (cb) cb(false)\n      return (false)\n    }\n\n    const ret = regex.test(input)\n    if (cb) cb(ret)\n    return (ret)\n  }\n}\n\nmodule.exports = {\n  code: 'URL',\n  description: 'URL',\n  class: signderivaTypeURL\n}\n","const signderivaType = require('./type')\n\n// const regex = /^((0x){0,1}|#{0,1})([0-9A-F]{8}|[0-9A-F]{6})$/ig\n\nclass signderivaTypeDatePicker extends signderivaType {\n  constructor (options) {\n    super(options)\n    if (!('range' in this.options)) this.options.range = false\n  }\n}\n\nmodule.exports = {\n  code: 'DatePicker',\n  description: 'Date Picker',\n  class: signderivaTypeDatePicker\n}\n","const signderivaType = require('./type')\n\nconst regex = /^[a-z0-9]+(?:-[a-z0-9]+)*$/g\n\nclass signderivaTypeSlug extends signderivaType {\n  verifier (input, cb) {\n    if (!input) {\n      if (cb) cb(false)\n      return (false)\n    }\n\n    if (typeof input !== 'string') {\n      if (cb) cb(false)\n      return (false)\n    }\n\n    const ret = regex.test(input)\n    if (cb) cb(ret)\n    return (ret)\n  }\n}\n\nmodule.exports = {\n  code: 'Slug',\n  description: 'Slug name',\n  class: signderivaTypeSlug\n}\n","const signderivaType = require('./type')\n\nconst regex = /^((0x){0,1}|#{0,1})([0-9A-F]{8}|[0-9A-F]{6})$/ig\n\nclass signderivaTypeColor extends signderivaType {\n  verifier (input, cb) {\n    if (!input) {\n      if (cb) cb(false)\n      return (false)\n    }\n\n    if (typeof input !== 'string') {\n      if (cb) cb(false)\n      return (false)\n    }\n\n    const ret = regex.test(input)\n    if (cb) cb(ret)\n    return (ret)\n  }\n}\n\nmodule.exports = {\n  code: 'Color',\n  description: 'HTML Color',\n  class: signderivaTypeColor\n}\n","const fieldifyType = require('./type')\n\nconst regex = /^([a-z0-9]+)$/i\n\n\nclass fieldifyTypeFieldName extends fieldifyType {\n  verify (input, cb) {\n    if (!input) {\n      return (cb(true))\n    }\n\n    if (typeof input !== 'string') {\n      return (cb(true, 'Not a string'))\n    }\n\n    const ret = regex.test(input)\n    if (!ret) return (cb(true, 'Forbidden special chars'))\n\n    return (cb(false))\n  }\n}\n\nmodule.exports = {\n  code: 'FieldName',\n  description: 'Restricted Field Name',\n  class: fieldifyTypeFieldName\n}\n","const signderivaType = require('./type')\n\nconst regex = /^([a-z0-9]+)$/i\n\nclass signderivaTypeKV extends signderivaType {\n  verify (input, cb) {\n    if (!input || typeof input !== 'object' || input.constructor.name !== 'Object') {\n      return (cb(true, 'Not a KV'))\n    }\n\n    for (var key in input) {\n      // const value = input[key]\n\n      // verify the key\n      const ret = regex.test(key)\n      if (!ret) return (cb(true, 'Invalid key name ' + key))\n    }\n\n    cb(false)\n  }\n\n  // sanatizeOptions (input) {\n  //   const output = {\n  //     placeholder: typeof input.placeholder === 'string' ? input.placeholder : undefined,\n  //     help: typeof input.help === 'string' ? input.help : undefined,\n  //     min: typeof input.min === 'number' ? input.min : undefined,\n  //     max: typeof input.max === 'number' ? input.max : undefined,\n  //     strict: typeof input.strict === 'boolean' ? input.strict : undefined,\n  //     unicode: typeof input.unicode === 'boolean' ? input.unicode : undefined\n  //   }\n  //   return (output)\n  // }\n\n  configuration () {\n    return ({\n      min: {\n        $doc: 'Minimun of items',\n        $required: false,\n        $type: 'Number',\n        $options: {\n          acceptedTypes: 'integer'\n        }\n      },\n      max: {\n        $doc: 'Maximun of items',\n        $required: false,\n        $type: 'Number',\n        $options: {\n          acceptedTypes: 'integer'\n        }\n      }\n    })\n  }\n}\n\nmodule.exports = {\n  code: 'KV',\n  description: 'Object with single Key / Value',\n  class: signderivaTypeKV\n}\n","\n// const fusion = require('./fusion')\n// const compile = require('./compile')\n// const iterator = require('./iterator')\n// const assign = require('./assign')\n// const utils = require('./utils')\n\nclass fieldifyInput {\n  constructor (schema, value) {\n    this.schema = schema\n    this._value = value||{}\n    this.verifying = false\n  }\n\n  setValue (input) {\n    this._value = input\n  }\n\n  getValue () {\n    return (this._value)\n  }\n\n  verify (cb) {\n    this.schema.verify(this._value, cb)\n  }\n\n  reset () {\n    this._value = {}\n  }\n\n  set (line, data) {\n    const node = this.get(line, true)\n    if (node) node.input[node.fields[node.fields.length - 1]] = data\n  }\n\n  get (line, create) {\n    const fields = line.split('.')\n    fields.shift()\n\n    var schema = this.schema.handler.schema\n    var input = this._value\n    var schemaCur, inputCur\n\n    // align integers in field name\n    for (var a = 0; a < fields.length; a++) {\n      var field = fields[a]\n      if (!isNaN(field)) {\n        field = parseInt(field)\n        fields[a] = field\n      }\n    }\n\n    // horizontal read\n    for (var a = 0; a < fields.length - 1; a++) {\n      var field = fields[a]\n\n      if (Array.isArray(schema)) schemaCur = schema[0]\n      else schemaCur = schema[field]\n\n      if (!schemaCur) return (null)\n\n      // no input found for this entry\n      // initialize it\n      inputCur = input[field]\n      if (!inputCur && create === true) {\n        if (schemaCur.$_nested === true && schemaCur.$_array !== true) {\n          inputCur = input[field] = {}\n        }\n        else if (schemaCur.$_nested === true && schemaCur.$_array === true) {\n          inputCur = input[field] = {}\n        }\n      }\n      else if (!inputCur && create !== true) return (null)\n\n      // swap schema and input\n      schema = schemaCur\n      input = inputCur\n    }\n\n    return ({ schema, input, fields })\n  }\n\n  remove (line) {\n    const node = this.get(line)\n    if (node) {\n      const key = node.fields[node.fields.length - 1]\n      if (Array.isArray(node.input)) node.input.splice(key, 1)\n      else delete node.input[node.fields[node.fields.length - 1]]\n    }\n  }\n}\n\nmodule.exports = fieldifyInput\n","module.exports = class fieldifyType {\n  constructor (options) {\n    this.options = options || {}\n  }\n\n  encode (input, cb) {\n    if (cb) cb(input)\n    return (input)\n  }\n\n  decode (input, cb) {\n    if (cb) cb(input)\n    return (input)\n  }\n\n  verify (input, cb) {\n    if (cb) cb(false)\n    return (false)\n  }\n\n  filter (input, cb) {\n    if (cb) cb(true)\n    return (true)\n  }\n\n  schematizer () {\n    return (null)\n  }\n\n  configuration () {\n    return (null)\n  }\n\n  // will be auto generate from configuration\n  sanatizeOptions (input) {\n    const output = {}\n    return (output)\n  }\n}\n","import React from 'react';\n\n\nexport default class RecycledComponent extends React.Component {\n  constructor(props, context, updater) {\n    // parent\n    super(props, context, updater)\n\n    // setup state with the cycle returns\n    this.state = this.cycle(props, true)\n  }\n\n  componentDidUpdate(props, state) {\n    // execute parent\n    if(super.componentDidUpdate) super.componentDidUpdate(props, state)\n\n    // props have changed\n    var changed = false\n    for(var a in props) {\n      // all types are compared exept functions\n      // which changes at any round\n      if(typeof props[a] !== \"function\" && props[a] !== this.props[a]) {\n        changed = true\n        break\n      }\n    }\n\n    // something need to be updated inside this component\n    if (changed === true) {\n      // recycling the state of the component\n      const ret = this.cycle(this.props, false)\n      if(ret && typeof ret === \"object\") this.setState(ret)\n    }\n  }\n\n  // the famous cycling function\n  cycle(props, first) {\n    return({})\n  }\n}","import React, { Component } from 'react';\nimport {\n  Col,\n  Row,\n  Form\n} from \"antd\";\n\nexport default class FieldifyTypeForm extends Component {\n  constructor(props) {\n    super(props)\n    this.state = this.cycle(props)\n  }\n\n\n  componentDidUpdate(props, state) {\n    if (this.props.schema !== props.schema) {\n      const cycle = this.cycle(this.props);\n      this.setState(cycle)\n    }\n  }\n\n  cycle(props) {\n    this.schema = props.schema;\n    \n    const state = {\n      value: props.value,\n      verify: props.verify,\n      feedback: false,\n      status: null,\n      options: {}\n    }\n\n    this.isInjected = props.isInjected;\n\n    this.onChange = props.onChange ? props.onChange : () => { };\n    this.onError = props.onError ? props.onError : () => { };\n\n    if (!this.schema) {\n      this.schema = {}\n      return (state)\n    }\n\n    state.help = this.schema.$help;\n    state.options = this.schema.$options || {};\n    this.handler = this.schema.$_type;\n\n\n    // if (props.verify === true) {\n    //   this.verify(props.value, (ret) => {\n    //     this.state = { ...this.state, ...ret }\n    //   })\n    // }\n\n    return (state)\n  }\n\n  timedChange(cb, speed) {\n    if (this._changeTimer) {\n      this._changeTimerQueue++;\n      this._changeTimerCb = cb;\n      return;\n    }\n\n    cb = cb || this._changeTimerCb;\n    if (!cb) return;\n\n    delete this._changeTimerCb;\n    this._changeTimerQueue = 0;\n    this._changeTimer = setTimeout(() => {\n      cb(() => {\n        delete this._changeTimer;\n\n        // update in queue ?\n        if (this._changeTimerQueue > 0) {\n          this.timedChange(cb, speed);\n        }\n      })\n    }, speed)\n  }\n\n  changeValue(value, speed) {\n    speed = speed || 100;\n\n    this.setState({\n      value: value\n    })\n\n    this._lastValue = value;\n\n    this.timedChange((end) => {\n      this.verify(this._lastValue, (ret) => {\n        this.setState(ret);\n        if (ret.status !== \"success\") {\n          end();\n          return;\n        }\n        \n        this.onChange(this.schema, this._lastValue);\n        end();\n      })\n    }, speed)\n  }\n\n  verify(value, cb) {\n    if(!this.handler) {\n      return (cb({\n        status: \"error\",\n        feedback: true,\n        help: \"No Handler on verifier\"\n      }))\n    }\n    \n    this.handler.verify(value, (error, message) => {\n      if (error === false) {\n        this.onError(false);\n        return (cb({\n          status: \"success\",\n          feedback: true,\n          help: null\n        }));\n      }\n\n      \n      this.onError(true, message);\n      return (cb({\n        status: \"error\",\n        feedback: true,\n        help: message\n      }))\n    })\n  }\n\n\n  render(children) {\n    // return(children)\n\n    if (this.isInjected === true) return (\n      <Form.Item\n        label={this.schema.$doc}\n        required={this.schema.$required}\n        validateStatus={this.state.status}\n        hasFeedback={this.state.feedback}\n        help={this.state.help}\n        style={{ marginBottom: \"0px\" }}\n        wrapperCol={{ sm: 24 }}\n      >\n        {children}\n      </Form.Item>\n    )\n\n    return (\n      <Form.Item\n        label={this.schema.$doc}\n        required={this.schema.$required}\n        validateStatus={this.state.status}\n        hasFeedback={this.state.feedback}\n        help={this.state.help}\n        style={{ marginBottom: \"8px\" }}\n        wrapperCol={{ sm: 24 }}\n      >\n        {children}\n      </Form.Item>\n    )\n  }\n}\n\n","import React, { Component } from 'react';\nimport RecycledComponent from 'react-recycling';\n\nimport {\n  Col,\n  Row,\n  Form,\n  Input\n} from \"antd\";\n\nexport default class FieldifyTypeRender extends RecycledComponent {\n\n  cycle(props) {\n    const state = {\n      schema: props.schema,\n      value: props.value,\n      injected: props.injected\n    }\n\n    return (state)\n  }\n\n  subRender(children) {\n\n    if(this.state.injected === true) {\n      return (\n        <Form.Item\n          label={this.state.schema.$doc}\n          hasFeedback={true}\n          validateStatus=\"success\"\n          style={{ marginBottom: \"0px\" }}\n          wrapperCol={{ sm: 24 }}\n        >\n          {children}\n        </Form.Item>\n      )\n    }\n    return (\n      <Form.Item\n        label={this.state.schema.$doc}\n        hasFeedback={true}\n        validateStatus=\"success\"\n      >\n        {children}\n      </Form.Item>\n    )\n  }\n\n  render() {\n    return (this.subRender(\n      <div style={{ width: \"100%\" }}>\n        {this.state.value}\n      </div>\n    ));\n  }\n}\n\n","import { Component } from 'react';\n\nexport default class SignderivaTypeInfo extends Component {\n  constructor(props) {\n    super(props)\n    this.props = props;\n    if (props.match) this.path = props.match.path;\n    this.state = {}\n  }\n\n\n  componentDidUpdate(prevProps, prevState) {\n    const pNew = this.props.schema || {};\n    const pOld = prevProps.schema || {};\n    // console.log(\"SignderivaTypeInfo.update\", pOld, pNew)\n  }\n\n}\n\n","import { Component } from 'react';\n\nexport default class SignderivaTypeBuilder extends Component {\n  constructor(props) {\n    super(props);\n    this.props = props;\n    this.onChange = props.onChange ? props.onChange : () => { };\n\n    if (props.match) this.path = props.match.path;\n\n    this.state = { ...props.options };\n\n    this.default = {};\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const pNew = this.props.options || {};\n    const pOld = prevProps.options || {};\n    \n    var changed = 0;\n    for (var key in this.default) {\n      const o = pOld[key];\n      const n = pNew[key];\n      if (o !== n)\n        changed++;\n    }\n\n    // console.log(\"TypeBuilder.update\", changed, pOld, pNew)\n    if (changed > 0) {\n      this.setState(pNew);\n      this.onChange({...pNew});\n    }\n    \n  }\n\n  setup(prev) {\n    // console.log(\"setup\")\n    const state = { ...prev };\n\n    // clean non valid field\n    for (var a in state) {\n      const p = this.default[a];\n      if (!p) delete state[a]\n    }\n\n    // setup default\n    for (var a in this.default) {\n      if (!(a in state))\n        state[a] = this.default[a];\n    }\n    return (state);\n  }\n\n  configure() {\n    this.state = this.setup(this.state);\n    this.onChange({ ...this.state });\n  }\n\n  changeIt(key, value) {\n    const change = Object.assign({}, this.state);\n    change[key] = value;\n\n    // console.log(\"TypeBuilder\", change)\n    this.setState(change);\n    this.onChange({...change});\n  }\n\n}\n","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { FieldStringOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeRender from '../lib/TypeRender';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass StringForm extends TypeForm {\n  render() {\n    return (super.render(\n      <Input \n      value={this.state.value} \n      placeholder={this.state.options.placeholder} \n      onChange={({ target }) => this.changeValue(target.value)} \n      style={{width: \"100%\"}}\n      />\n    ));\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass StringRender extends TypeRender {\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass StringInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#fadb14\" style={{ color: \"#555555\" }}><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass StringBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"String min/max size\">\n          <Space>\n            <InputNumber min={0} value={this.state.minSize} onChange={(value) => this.changeIt(\"minSize\", value)} />\n\n            <InputNumber min={0} value={this.state.maxSize} onChange={(value) => this.changeIt(\"maxSize\", value)} />\n          </Space>\n        </Form.Item>\n\n      </div>\n    )\n  }\n}\n\n/* <div class=\"ant-form-item-control-input\">\n  <div class=\"ant-form-item-control-input-content\">\n    <input type=\"text\" class=\"ant-input\" value=\"vdvfsdvfdsvfds\" style=\"width: 100%;\">\n      </div><span class=\"ant-form-item-children-icon\">\n        <span role=\"img\" aria-label=\"check-circle\" class=\"anticon anticon-check-circle\">\n          <svg viewBox=\"64 64 896 896\" focusable=\"false\" class=\"\" data-icon=\"check-circle\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\">\n            <path d=\"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm193.5 301.7l-210.6 292a31.8 31.8 0 01-51.7 0L318.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.2 0 19.9 4.9 25.9 13.3l71.2 98.8 157.2-218c6-8.3 15.6-13.3 25.9-13.3H699c6.5 0 10.3 7.4 6.5 12.7z\">\n              </path>\n              </svg>\n              </span>\n              </span>\n              </div> */\n\n\n\nexport default {\n  code: types.String.code,\n  description: types.String.description,\n  class: types.String.class,\n\n  Info: StringInfo,\n  Builder: StringBuilder,\n  Form: StringForm,\n  Render: StringRender,\n}\n\n\n","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { UserSwitchOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeRender from '../lib/TypeRender';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\nimport TString from './String';\n\nconst StringForm = TString.Form\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NameForm extends TypeForm {\n  constructor(props) {\n    super(props)\n  }\n\n  cycle(props) {\n    const ret = super.cycle(props)\n    if (!ret.value) ret.value = {}\n    \n    this.result = {...ret.value}\n    return (ret)\n  }\n\n  error(from, error, message) {\n    // this.setState({\n    //   help: \"Please fill the form\"\n    // })\n  }\n\n  setField(key, schema, value) {\n    this.result[key] = value;\n    this.onChange(this.schema, this.result);\n  }\n\n  render() {\n\n    return (super.render(\n      <Row gutter={16}>\n        <Col className=\"gutter-row\" span={12}>\n          <StringForm\n            schema={this.schema.first}\n            verify={this.state.verify}\n            value={this.state.value.first}\n            onChange={(schema, value) => this.setField(\"first\", schema, value)}\n            // onError={(error, message) => this.error(\"first\", error, message)}\n            isInjected={true}\n          />\n        </Col>\n        <Col className=\"gutter-row\" span={12}>\n          <StringForm\n            schema={this.schema.last}\n            verify={this.state.verify}\n            value={this.state.value.last}\n            onChange={(schema, value) => this.setField(\"last\", schema, value)}\n            // onError={(error, message) => this.error(\"last\", error, message)}\n            isInjected={true}\n          />\n        </Col>\n      </Row>\n    ))\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NameInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#36cfc9\" style={{ color: \"#555555\" }}><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NameRender extends TypeRender {\n  static getDerivedStateFromProps(props, state) {\n    if(state.value && typeof state.value === \"object\") {\n      var final = \"\"\n\n      if(state.value.first) final += state.value.first\n      if(state.value.last) final += \" \"+state.value.last\n\n      state.value = final.trim()\n    }\n    return(state)\n  }\n}\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NameBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"Name min/max size\">\n          <Space>\n            <InputNumber min={0} value={this.state.minSize} onChange={(value) => this.changeIt(\"minSize\", value)} />\n\n            <InputNumber min={0} value={this.state.maxSize} onChange={(value) => this.changeIt(\"maxSize\", value)} />\n          </Space>\n        </Form.Item>\n\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.Name.code,\n  description: types.Name.description,\n  class: types.Name.class,\n\n  Info: NameInfo,\n  Builder: NameBuilder,\n  Form: NameForm,\n  Render: NameRender,\n\n  noFormItem: true\n}\n\n\n","import { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  Checkbox,\n  Form,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { MailOutlined } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeRender from '../lib/TypeRender';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass EmailForm extends TypeForm {\n  render() {\n    return (super.render(\n      <Input value={this.state.value} placeholder={this.state.options.placeholder} onChange={({ target }) => this.changeValue(target.value)} />\n    ));\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass EmailInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#1890ff\"><MailOutlined /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass EmailRender extends TypeRender {\n}\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Complement builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass EmailBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      subAddressing: true\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"Sub-addressing\">\n          <Checkbox checked={this.state.subAddressing} onChange={({ target }) => this.changeIt(\"subAddressing\", target.checked)}>Allowed</Checkbox>\n        </Form.Item>\n      </div>\n    )\n  }\n}\n\n\nexport default {\n  code: types.Email.code,\n  description: types.Email.description,\n  class: types.Email.class,\n\n  Info: EmailInfo,\n  Builder: EmailBuilder,\n  Form: EmailForm,\n  Render: EmailRender\n}","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { NumberOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeRender from '../lib/TypeRender';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NumberForm extends TypeForm {\n  render() {\n    return (super.render(\n      <InputNumber \n      value={this.state.value} \n      placeholder={this.state.options.placeholder} \n      onChange={(value) => this.changeValue(value)} \n      style={{width: \"100%\"}}\n      />\n    ));\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NumberInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#ff7a45\"><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NumberRender extends TypeRender {\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass NumberBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.Number.code,\n  description: types.Number.description,\n  class: types.Number.class,\n\n  Info: NumberInfo,\n  Builder: NumberBuilder,\n  Form: NumberForm,\n  Render: NumberRender\n}\n\n\n","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { FieldStringOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass CheckboxForm extends TypeForm {\n  render() {\n    return (super.render(\n      <Input placeholder=\"Checkbox of characters\" />\n    ))\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass CheckboxInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#fadb14\" style={{ color: \"#555555\" }}><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass CheckboxBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"Checkbox min/max size\">\n          <Space>\n            <InputNumber min={0} value={this.state.minSize} onChange={(value) => this.changeIt(\"minSize\", value)} />\n\n            <InputNumber min={0} value={this.state.maxSize} onChange={(value) => this.changeIt(\"maxSize\", value)} />\n          </Space>\n        </Form.Item>\n\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.Checkbox.code,\n  description: types.Checkbox.description,\n  class: types.Checkbox.class,\n\n  Info: CheckboxInfo,\n  Builder: CheckboxBuilder,\n  Form: CheckboxForm\n}\n\n\n","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Select,\n  Col,\n  Row\n} from \"antd\";\n\nimport { SelectOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeRender from '../lib/TypeRender';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass SelectForm extends TypeForm {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      value: props.value,\n      options: {}\n    }\n\n    if (props.schema.$options) this.state.options = props.schema.$options\n\n    if(!this.state.value && this.state.options.default) {\n      this.state.value = this.state.options.default\n      // inform the change\n      this.onChange(this.schema, this.state.value);\n    }\n\n    this.state.items = this.updateItems()\n  }\n\n  updateItems() {\n    if (!this.state.options.items) return ([])\n\n    const options = []\n    for (var key in this.state.options.items) {\n      const value = this.state.options.items[key];\n      options.push(<Select.Option value={key} key={key}>{value}</Select.Option>)\n    }\n\n    return (options)\n  }\n\n  render() {\n    return (super.render(\n      <Select value={this.state.value} onChange={(value)  => this.changeValue(value)}>\n        {this.state.items}\n      </Select>\n    ))\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass SelectInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#52c41a\" style={{ color: \"white\" }}><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass SelectRender extends TypeRender {\n  static getDerivedStateFromProps(props, state) {\n    if(typeof state.value === \"string\") {\n\n      if(props.schema.$options && props.schema.$options.items) {\n        const ptr = props.schema.$options.items\n        if(ptr[state.value]) state.value = ptr[state.value]\n      }\n    }\n    return(state)\n  }\n\n}\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass SelectBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"Select min/max size\">\n          <Space>\n            <InputNumber min={0} value={this.state.minSize} onChange={(value) => this.changeIt(\"minSize\", value)} />\n\n            <InputNumber min={0} value={this.state.maxSize} onChange={(value) => this.changeIt(\"maxSize\", value)} />\n          </Space>\n        </Form.Item>\n\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.Select.code,\n  description: types.Select.description,\n  class: types.Select.class,\n\n  Info: SelectInfo,\n  Builder: SelectBuilder,\n  Form: SelectForm,\n  Render: SelectRender\n}\n\n\n","// this is a hidden type\n// to manage nested object\nimport { types,  fieldifyType } from 'fieldify'\n\n\nclass ObjectClass extends fieldifyType {\n}\n\n\nexport default {\n  code: \"Object\",\n  description: \"Nested Sub Object\",\n  class: ObjectClass\n}\n","// this is a hidden type\n// to manage nested object\nimport { types,  fieldifyType } from 'fieldify'\n\nclass ArrayClass extends fieldifyType {\n  configuration () {\n    return ({\n      min: {\n        $doc: 'Minimum of items',\n        $required: false,\n        $type: 'Number'\n      },\n      max: {\n        $doc: 'Maximun of items',\n        $required: false,\n        $type: 'Number'\n      }\n    })\n  }\n}\n\nexport default {\n  code: \"Array\",\n  description: \"Array\",\n  class: ArrayClass\n}\n","\nimport { types } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  InputNumber,\n  Form,\n  Space,\n  Tag,\n  Input,\n  Col,\n  Row\n} from \"antd\";\n\nimport { FieldStringOutlined as Icon } from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\nimport String from './String'\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass FieldNameForm extends String.Form { \n  constructor(props){\n    super(props)\n  }\n\n  verify(input, cb) {\n    super.verify(input, (ret)=>{\n      if(ret.status !== \"success\") {\n        return(cb(ret))\n      }\n\n      // check if the key is already used\n      if(this.props.user && input in this.props.user) {\n        const msg = `Field name already used`\n        \n        this.onError(true, msg);\n        return (cb({\n          status: \"error\",\n          feedback: true,\n          help: msg\n        }))\n      }\n\n      cb(ret)\n    })\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass FieldNameInfo extends String.Info { }\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass FieldNameBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    // this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n        <Form.Item label=\"FieldName min/max size\">\n          {/* <Space>\n            <InputNumber min={0} value={this.state.minSize} onChange={(value) => this.changeIt(\"minSize\", value)} />\n\n            <InputNumber min={0} value={this.state.maxSize} onChange={(value) => this.changeIt(\"maxSize\", value)} />\n          </Space> */}\n        </Form.Item>\n\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.FieldName.code,\n  description: types.FieldName.description,\n  class: types.FieldName.class,\n\n  Info: FieldNameInfo,\n  Builder: FieldNameBuilder,\n  Form: FieldNameForm\n}\n\n\n","\nimport { types, input as FieldifyInput } from 'fieldify'\n\nimport React from 'react';\n\nimport {\n  Table,\n  Form,\n  Input,\n  Tag,\n  Modal,\n  Alert,\n  Row\n} from \"antd\";\n\nimport {\n  SmallDashOutlined as Icon,\n  EditOutlined as EditIcon,\n  DeleteOutlined as DeleteIcon,\n  UnorderedListOutlined as ObjectIcon,\n  PlusOutlined as PlusIcon,\n  CopyOutlined as ArrayIcon\n} from '@ant-design/icons';\n\nimport TypeForm from '../lib/TypeForm';\nimport TypeRender from '../lib/TypeRender';\nimport TypeInfo from '../lib/TypeInfo';\nimport TypeBuilder from '../lib/TypeBuilder';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field in a form\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass KVForm extends TypeForm {\n\n  constructor(props) {\n    super(props)\n  }\n\n  cycle(props) {\n    const ret = super.cycle(props)\n\n    if (!ret.value) ret.value = {}\n\n    this.result = { ...ret.value }\n\n    ret.modal = false\n    ret.modalCurrent = {\n      key: \"\",\n      value: \"\"\n    }\n    ret.dataTree = { ...ret.value }\n    ret.dataSource = this.computeDataSource(ret.dataTree);\n\n    return (ret)\n  }\n\n  computeDataSource(tree) {\n    const ds = []\n    for (let key in tree) {\n      const value = tree[key]\n      ds.push({\n        key: key,\n        value: value,\n        actions: <div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n          <span className=\"ant-radio-button-wrapper\" onClick={() => this.removeKey(key)}>\n            <span><DeleteIcon /></span>\n          </span>\n          <span className=\"ant-radio-button-wrapper\" onClick={() => this.openModal({ key, value })}>\n            <span><EditIcon /></span>\n          </span>\n        </div>\n      })\n    }\n    return (ds)\n  }\n\n  handleModalChange(key, value) {\n    const modalCurrent = { ...this.state.modalCurrent }\n    modalCurrent[key] = value;\n    this.setState({ modalCurrent })\n  }\n\n  openModal(data) {\n    const state = {\n      modalError: false,\n      modalInitial: null,\n      modalCurrent: data || {\n        key: \"\",\n        value: \"\"\n      },\n      modal: true\n    }\n\n    if (data) state.modalInitial = { ...state.modalCurrent }\n\n    this.setState(state)\n  }\n\n  removeKey(key) {\n    const state = { ...this.state }\n    delete state.dataTree[key]\n    state.dataSource = this.computeDataSource(state.dataTree);\n    this.setState(state)\n\n    this.changeValue(state.dataTree)\n  }\n\n  editedButton() {\n    const state = { ...this.state }\n\n    const mc = this.state.modalCurrent;\n\n    // check the key input\n    const type = this.schema.$_type;\n\n    // verify the input\n    const data = {}\n    data[mc.key] = mc.value;\n    type.verify(data, (error, message) => {\n      state.modalError = error;\n      state.modalErrorMessage = message;\n\n      if (error === false) {\n        // remove old entry and add new one\n        if (state.modalInitial) {\n          delete state.dataTree[state.modalInitial.key];\n        }\n        state.dataTree[state.modalCurrent.key] = state.modalCurrent.value\n\n        state.dataSource = this.computeDataSource(state.dataTree);\n\n        state.modal = false;\n      }\n\n      this.setState(state)\n      this.changeValue(state.dataTree)\n    })\n\n  }\n\n  render() {\n    const onCancel = () => {\n      this.setState({ modal: false });\n    };\n\n    const columns = [\n      {\n        title: 'Key',\n        dataIndex: 'key',\n        key: 'key',\n      },\n      {\n        title: 'Value',\n        dataIndex: 'value',\n        key: 'value',\n      },\n      {\n        title: <div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n          <span className=\"ant-radio-button-wrapper\" onClick={() => this.openModal()}>\n            <span>Add <PlusIcon /></span>\n          </span>\n        </div>,\n        dataIndex: 'actions',\n        key: 'actions',\n        align: \"right\"\n      },\n    ];\n\n    const layout = {\n      labelCol: { span: 8 },\n      wrapperCol: { span: 16 },\n    };\n\n    return (super.render(<div>\n      <Modal\n        centered\n        closable={false}\n        visible={this.state.modal}\n        width={300}\n        onOk={this.editedButton.bind(this)}\n        onCancel={onCancel}\n      >\n        {this.state.modalError === true ?\n          <div style={{ marginBottom: 8 }}>\n            <Alert size=\"small\" message={this.state.modalErrorMessage} type=\"error\" />\n          </div>\n\n          : null}\n\n        <Form\n          {...layout}\n        >\n          <Form.Item label=\"Key\">\n            <Input value={this.state.modalCurrent.key} onChange={({ target }) => this.handleModalChange(\"key\", target.value)} />\n          </Form.Item>\n\n          <Form.Item label=\"Value\">\n            <Input value={this.state.modalCurrent.value} onChange={({ target }) => this.handleModalChange(\"value\", target.value)} />\n          </Form.Item>\n\n        </Form>\n\n\n      </Modal>\n      <Table\n        size=\"small\"\n        dataSource={this.state.dataSource}\n        columns={columns}\n        pagination={{\n          total: this.state.dataSource.length,\n          pageSize: this.state.dataSource.length,\n          hideOnSinglePage: true\n        }}\n      />\n    </div>));\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Information of the field show fancy information of the type\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass KVInfo extends TypeInfo {\n  render() {\n    return (\n      <span>\n        <Tag color=\"#22075e\"><Icon /></Tag>\n      </span>\n    )\n  }\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Rendering of the field\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass KVRender extends TypeRender {\n\n  cycle(props) {\n    const ret = super.cycle(props)\n\n    if (!ret.value) ret.value = {}\n\n    this.result = { ...ret.value }\n\n    ret.dataTree = { ...ret.value }\n    ret.dataSource = this.computeDataSource(ret.dataTree);\n\n    return (ret)\n  }\n\n  computeDataSource(tree) {\n    const ds = []\n    for (let key in tree) {\n      const value = tree[key]\n      ds.push({\n        key: key,\n        value: value\n      })\n    }\n    return (ds)\n  }\n\n\n  render() {\n    const columns = [\n      {\n        dataIndex: 'key',\n        key: 'key',\n      },\n      {\n        dataIndex: 'value',\n        key: 'value',\n      }\n    ];\n\n    const layout = {\n      labelCol: { span: 8 },\n      wrapperCol: { span: 16 },\n    };\n\n    return (super.subRender(<div>\n      <Table\n        showHeader={false}\n        size=\"small\"\n        dataSource={this.state.dataSource}\n        columns={columns}\n        pagination={{\n          total: this.state.dataSource.length,\n          pageSize: this.state.dataSource.length,\n          hideOnSinglePage: true\n        }}\n      />\n    </div>));\n  }\n\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n *\n * Field builder\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nclass KVBuilder extends TypeBuilder {\n  constructor(props) {\n    super(props)\n\n    this.default = {\n      minSize: 1,\n      maxSize: 128\n    }\n\n    this.configure()\n  }\n\n  render() {\n    return (\n      <div>\n      </div>\n    )\n  }\n}\n\nexport default {\n  code: types.KV.code,\n  description: types.KV.description,\n  class: types.KV.class,\n\n  Info: KVInfo,\n  Builder: KVBuilder,\n  Form: KVForm,\n  Render: KVRender\n}\n\n\n","import Name from \"./Types/Name\"\nimport Email from \"./Types/Email\"\nimport String from \"./Types/String\"\nimport Number from \"./Types/Number\"\nimport Checkbox from \"./Types/Checkbox\"\nimport Select from \"./Types/Select\"\nimport Object from \"./Types/Object\"\nimport Array from \"./Types/Array\"\nimport FieldName from \"./Types/FieldName\"\nimport KV from \"./Types/KV\"\n\nexport default {\n  Name,\n  Email,\n  String,\n  Number,\n  Select,\n  Checkbox,\n  Object,\n  Array,\n  FieldName,\n  KV\n}\n","import { schema } from \"fieldify\";\nimport Types from \"../Types\"\n\nexport class FieldifySchema extends schema {\n  constructor(name, options) {\n    super(name, options);\n  }\n\n  resolver(type) {\n    return (Types[type])\n  }\n\n  compile(schema) {\n    // process normal compilation\n    super.compile(schema);\n  }\n}\n","import { utils, input as FieldifyInput } from \"fieldify\";\nimport React from 'react';\nimport RecycledComponent from 'react-recycling';\n\nimport { Form, Table, Button, Input, Card } from \"antd\";\nimport {\n  PlusOutlined as PlusIcon,\n  DeleteOutlined as DeleteIcon\n} from '@ant-design/icons';\n\nimport { FieldifySchema } from \"../Schema/Schema\";\n\n\nexport class FieldifySchemaForm extends RecycledComponent {\n  constructor(props) {\n    super(props)\n\n    this.formRef = React.createRef()\n\n  }\n\n  cycle(props, first) {\n\n    const state = {}\n\n    // compile the schema\n    state.rawSchema = props.schema\n    state.schema = new FieldifySchema(\"form\")\n    state.schema.compile(state.rawSchema)\n\n    // create an input instance\n    // console.log(\"rawInput\", state.rawInput === props.rawInput)\n    state.rawInput = props.input\n    state.input = new FieldifyInput(state.schema)\n    state.input.setValue(props.input)\n\n    state.inputValue = state.input.getValue()\n    state.verify = props.verify || false\n\n    this.references = {};\n\n    this.onChange = props.onChange ? props.onChange : () => { };\n\n    state.reactive = this.update(state.schema, state.inputValue, state.verify);\n\n    return (state)\n  }\n\n  getValue() {\n    return (this.state.input.getValue())\n  }\n\n  clickAddArray(line) {\n    this.state.input.set(line)\n    const _value = this.state.input.getValue();\n    this.onChange(this.state.input, _value)\n    this.setState({\n      inputValue: _value,\n      reactive: this.update(this.state.schema, _value, false)\n    })\n  }\n\n  clickRemoveArrayItem(line) {\n    this.state.input.remove(line)\n    const _value = this.state.input.getValue();\n    this.onChange(this.state.input, _value)\n    this.setState({\n      inputValue: _value,\n      reactive: this.update(this.state.schema, _value, false)\n    })\n  }\n\n  setValue(line, value) {\n    if (!this.state.input) return;\n\n    this.state.input.set(line, value)\n    const _value = this.state.input.getValue();\n    this.onChange(this.state.input, _value)\n    this.setState({\n      inputValue: _value\n    })\n  }\n\n  update(root, input, verify) {\n    const follower = (schema, schematized, input, ret, line) => {\n      line = line || \"\"\n\n      utils.orderedRead(schema, (index, item) => {\n\n        const source = { ...Array.isArray(item) ? item[0] : item };\n        const schematizedSrc = schematized[source.$_key];\n        const sourceSchematized = { ...Array.isArray(schematizedSrc) ? schematizedSrc[0] : schematizedSrc };\n\n        const inputPtr = input ? input[source.$_key] : null;\n        const lineKey = line + \".\" + source.$_key;\n\n        if (source.$_array === true) {\n          const columns = [\n            {\n              dataIndex: 'form',\n              key: 'form',\n              width: \"100%\"\n            },\n            {\n              dataIndex: 'actions',\n              key: 'actions',\n              align: \"right\"\n            },\n          ];\n          const dataSource = []\n\n          var inputPtr2 = inputPtr;\n          const options = source.$array || {};\n          const min = options.min ? options.min : (source.$required === true ? 1 : 0)\n\n          if (source.$_nested === true) {\n            var inputPtr2 = input[source.$_key]\n\n            if (!Array.isArray(inputPtr)) inputPtr2 = input[source.$_key] = [];\n\n            // force to create min form\n            if (min - inputPtr2.length > 0) {\n              for (var a = 0; a <= min - inputPtr2.length; a++) {\n                inputPtr2.push({})\n              }\n            }\n\n            for (var a = 0; a < inputPtr2.length; a++) {\n              const value = inputPtr2[a];\n              const key = lineKey + \".\" + a\n\n              const child = [];\n              follower(source, sourceSchematized, value, child, key);\n\n              dataSource.push({\n                key,\n                form: child,\n                actions: <Button size=\"small\" onClick={() => this.clickRemoveArrayItem(key)}>\n                  <span><DeleteIcon /></span>\n                </Button>\n              })\n            }\n          }\n          else if (source.$type) {\n            delete sourceSchematized.$doc; // source is cloned\n            const TypeForm = source.$type.Form;\n\n            // console.log(\"Array non nested\", min, inputPtr2)\n\n            if (verify === true) {\n              // console.log()\n            }\n\n            if (!Array.isArray(inputPtr)) {\n              input[item.$_key] = [];\n              inputPtr2 = input[item.$_key];\n            }\n\n            if (!inputPtr2) return (ret);\n\n            if (min - inputPtr2.length > 0) {\n              for (var a = 0; a <= min - inputPtr2.length; a++) {\n                inputPtr2.push(null)\n              }\n            }\n\n            for (var a = 0; a < inputPtr2.length; a++) {\n              const value = inputPtr2[a];\n              const key = lineKey + \".\" + a\n\n              dataSource.push({\n                key,\n                form: <TypeForm\n                  schema={sourceSchematized}\n                  value={value}\n                  verify={verify}\n                  user={this.props.user}\n                  onChange={(schema, value) => this.setValue(key, value)}\n                  isInjected={true}\n\n                  // reference errors\n                  onError={(error, message) => {\n                    if (error === true) {\n                      this.references[key] = message;\n                    }\n                    else {\n                      const ref = this.references[key];\n                      if (ref) {\n                        delete this.references[key];\n                      }\n                    }\n                  }}\n                />,\n                actions: <Button size=\"small\" onClick={() => this.clickRemoveArrayItem(key)}>\n                  <span><DeleteIcon /></span>\n                </Button>\n              })\n            }\n          }\n\n          ret.push(<Form.Item key={source.$_wire} noStyle={true}>\n            <div className=\"ant-form-item\">\n              <Card size=\"small\" title={source.$_access.$doc} extra={<div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n                {inputPtr2 ?\n                  <span className=\"ant-radio-button-wrapper\" onClick={() => this.clickAddArray(lineKey + \".\" + inputPtr2.length)}>\n                    <span><PlusIcon /></span>\n                  </span>\n                  : null}\n              </div>}>\n                <Table\n                  size=\"small\"\n                  dataSource={dataSource}\n                  columns={columns}\n                  verticalAlign='middle'\n                  showHeader={false}\n                  pagination={{\n                    total: dataSource.length,\n                    pageSize: dataSource.length,\n                    hideOnSinglePage: true\n                  }}\n                  bordered\n                />\n              </Card>\n            </div>\n          </Form.Item>);\n\n        }\n        else {\n          if (source.$_nested === true) {\n            const child = [];\n            follower(source, sourceSchematized, inputPtr, child, lineKey);\n\n            ret.push(<div key={source.$_wire} className=\"ant-form-item\">\n              <Card size=\"small\" title={source.$doc}>\n                {child}\n              </Card>\n            </div>);\n          }\n          else if (item.$type) {\n            const TypeForm = item.$type.Form;\n\n            ret.push(<TypeForm\n              schema={sourceSchematized}\n              value={inputPtr}\n              key={source.$_wire}\n              verify={verify}\n              user={this.props.user}\n              onChange={(schema, value) => this.setValue(lineKey, value)}\n\n              // reference errors\n              onError={(error, message) => {\n                if (error === true) {\n                  this.references[source.$_wire] = message;\n                }\n                else {\n                  const ref = this.references[source.$_wire];\n                  if (ref) {\n                    delete this.references[source.$_wire];\n                  }\n                }\n              }}\n            />);\n          }\n        }\n      });\n      return (ret);\n    };\n\n    const ret = [];\n    follower(\n      root.handler.schema,\n      root.handlerSchematized.schema,\n      input,\n      ret\n    );\n    return (ret);\n  }\n\n  render() {\n\n    const layout = {\n      labelCol: { span: 8 },\n      wrapperCol: { span: 16 },\n    };\n\n    return (<Form\n      key={this.formRef}\n      {...layout}\n      name=\"basic\" >\n      {this.state.reactive}\n    </Form>);\n  }\n}\n","import { utils, input as FieldifyInput } from \"fieldify\";\n\nimport React from 'react';\nimport Types from '../Types';\nimport { Modal, Form, Input, Select, Checkbox, Tag } from \"antd\";\nimport { FieldifySchema } from \"../Schema/Schema\";\nimport { FieldifySchemaForm } from './Form'\nimport { ConsoleSqlOutlined } from \"@ant-design/icons\";\n\n// build all available types\nconst allTypes = {}\nconst allTypesNoArray = {}\nfor (var a in Types) {\n  allTypes[a] = Types[a].description\n  if (a !== \"Array\") {\n    allTypesNoArray[a] = Types[a].description\n  }\n}\n\n// set the very basic schema for the modal\nconst baseSchema = {\n  key: {\n    $doc: \"Name of the field\",\n    $type: Types.FieldName,\n    $required: true,\n    $position: 10\n  },\n  type: {\n    $doc: \"Field type\",\n    $type: \"Select\",\n    $required: true,\n    $options: {\n      items: allTypes\n    },\n    $position: 11\n  },\n  doc: {\n    $doc: \"Description\",\n    $required: false,\n    $type: \"String\",\n    $position: 22\n  },\n  position: {\n    $doc: \"Position in the serie\",\n    $required: false,\n    $type: \"Number\",\n    $default: 0,\n    $options: {\n      acceptedTypes: \"integer\"\n    },\n    $position: 23\n  },\n  // options: {\n  //   $doc: \"Options\",\n  //   $type: Types.Checkbox,\n  //   $options: {\n  //     required: \"Field is required\",\n  //     readOnly: \"Field is read only\",\n  //   }\n  // },\n}\n\nexport class FieldifySchemaBuilderModal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.formRef = React.createRef()\n    this.state = this.cycle(props, true)\n    this.currentSchema = baseSchema\n  }\n\n  componentDidUpdate(props) {\n    var changed = false\n    var state = { ...this.state }\n\n    if (this.props.visible !== props.visible) {\n      this.currentSchema = baseSchema\n      state = this.cycle(this.props)\n      changed = true;\n    }\n\n    if (changed === true) this.setState(state)\n  }\n\n  cycle(props, first) {\n\n    // here we have 3 cases\n    // normal case = $_array !== true && $_nested !== true\n    // nested in array = $_array === true && $_nested === true\n    // normal in array = $_array === true && $_nested !== true\n    // single nested = $_array !== true && $_nested === true\n\n    const state = {\n      edition: false,\n      original: props.value,\n      form: {\n        state: \"Filling\",\n        color: \"blue\"\n      },\n      value: {},\n      visible: props.visible,\n      user: props.user,\n      verify: false\n    };\n   \n    if (state.user && state.user.$_wire) {\n      state.initialPath = state.user.$_wire;\n    }\n    else state.initialPath = '';\n\n    if (props.value) {\n      const val = props.value;\n\n      state.edition = true;\n\n      // normal case\n      if (val.$_array !== true && val.$_nested !== true) {\n        state.value = {\n          key: val.$_key,\n          type: val.$type.code,\n          doc: val.$doc,\n          required: val.$required,\n          read: val.$read,\n          write: val.$write,\n          options: val.$options,\n          position: val.$position,\n        }\n      }\n      // nested in array\n      else if (val.$_array === true && val.$_nested === true) {\n        state.value = {\n          key: val.$_key,\n          type: \"Array\",\n          content: \"Object\",\n          doc: val.$doc,\n          required: val.$required,\n          read: val.$read,\n          write: val.$write,\n          options: val.$options,\n          position: val.$position,\n        }\n      }\n      // normal in array\n      else if (val.$_array === true && val.$_nested !== true) {\n        state.value = {\n          key: val.$_key,\n          type: \"Array\",\n          content: typeof val.$type === \"string\" ? val.$type : val.$type.code,\n          doc: val.$doc,\n          required: val.$required,\n          read: val.$read,\n          write: val.$write,\n          options: val.$options,\n          position: val.$position,\n        }\n      }\n      // special handle for objects\n      else if (val.$_array !== true && val.$_nested === true) {\n        state.value = {\n          key: val.$_key,\n          type: \"Object\",\n          doc: val.$doc,\n          required: val.$required,\n          read: val.$read,\n          write: val.$write,\n          options: val.$options,\n          position: val.$position,\n        }\n      }\n    }\n    // single addition\n    else {\n      // nothing to set\n      state.value = {}\n    }\n\n    this.driveSchema(state)\n    state.input.setValue(state.value)\n    return (state)\n  }\n\n  driveSchema(state, force) {\n    const value = state.value;\n\n    const Type = Types[value.type]\n    if (Type && Type !== this.currentType) {\n      // create a fake tmp type\n      const TypeObject = new Type.class\n\n      const configuration = TypeObject.configuration()\n\n      this.currentSchema = { ...baseSchema }\n\n      // special cases for array \n      if (value.type === \"Array\") {\n        this.currentSchema.content = {\n          $doc: \"Item content type\",\n          $type: \"Select\",\n          $required: true,\n          $options: {\n            default: value.content || \"Object\",\n            items: allTypesNoArray\n          },\n          $position: 12\n        }\n      }\n\n      if (configuration) this.currentSchema.options = {\n        ...configuration,\n        $doc: \"Type configuration\"\n      };\n\n      // const upSchema = Type.\n      state.currentType = Type;\n\n      state.schema = new FieldifySchema(\"modal\");\n      state.schema.compile(this.currentSchema);\n      state.input = new FieldifyInput(state.schema)\n\n    }\n    else {\n      state.schema = new FieldifySchema(\"modal\");\n      state.schema.compile(this.currentSchema);\n      state.input = new FieldifyInput(state.schema)\n    }\n  }\n\n\n  formChanged(value) {\n\n    const state = {\n      schema: this.state.schema,\n      input: this.state.input,\n      value: { ...this.state.value, ...value }\n    }\n\n    this.driveSchema(state)\n    state.input.setValue(state.value)\n    this.setState(state)\n\n    state.input.verify((result) => {\n      const state = { form: {} }\n      state.verify = true;\n\n      state.error = result.error\n\n      if (result.error === true) {\n        state.form.color = \"blue\"\n        state.form.state = \"Filling\"\n      }\n      else {\n        state.form.color = \"green\"\n        state.form.state = \"Passed\"\n      }\n\n      this.setState(state)\n    })\n\n  }\n\n  handleOK() {\n    this.state.input.verify((result) => {\n      const state = { form: {} }\n      state.verify = true;\n\n      state.error = result.error\n\n      if (result.error === true) {\n        state.form.color = \"red\"\n        state.form.state = \"Error\"\n      }\n      else {\n        state.form.color = \"green\"\n        state.form.state = \"Passed\"\n\n        this.setState(state)\n\n        // get the current input values \n        const value = result.result\n        // const value = this.state.input.getValue()\n        var nvalue = {}\n\n        // rename all root value with $\n        for (var key in value) nvalue['$' + key] = value[key]\n\n        // we will save the last path in order to reconstruct the field name\n        const source = this.state.initialPath.split('.')\n        source.pop()\n        source.push(value.key)\n        const npath = source.join('.')\n        delete nvalue.$key;\n\n        // because object and array are virtualized in the builder \n        // then we need to remap the item with the correct schema underlining\n\n        if (nvalue.$type === \"Array\" && nvalue.$content === \"Object\") {\n\n          if (this.state.edition === true) {\n            // recopy nestedObjects if exists\n            // avoid root copy\n            if (this.props.user.$_wire) {\n              const no = utils.getNO(this.props.user)\n              for (var a in no.nestedObject) {\n                const p = no.nestedObject[a]\n                nvalue[p[0]] = p[1]\n              }\n            }\n          }\n          else if(!nvalue.$doc) nvalue.$doc = \"\"\n\n          delete nvalue.$type;\n          delete nvalue.$content;\n          nvalue = [nvalue]\n        }\n        // normal in array\n        else if (nvalue.$type === \"Array\" && nvalue.$content !== \"Object\") {\n          nvalue.$type = nvalue.$content;\n          delete nvalue.$content;\n          nvalue = [nvalue]\n        }\n        // special handle for objects\n        else if (nvalue.$type === \"Object\") {\n\n          if (this.state.edition === true) {\n            // recopy nestedObjects if exists\n            // avoid root copy\n            if (this.props.user.$_wire) {\n              const no = utils.getNO(this.props.user)\n              for (var a in no.nestedObject) {\n                const p = no.nestedObject[a]\n                nvalue[p[0]] = p[1]\n              }\n            }\n          }\n          else if(!nvalue.$doc) nvalue.$doc = \"\"\n\n          delete nvalue.$type;\n        }\n\n        if (this.state.edition === true) {\n          this.props.onOk(({\n            edition: true,\n            oldPath: this.state.initialPath,\n            newPath: npath,\n            key: value.key,\n            value: nvalue\n          }))\n        }\n        else {\n          this.props.onOk(({\n            edition: false,\n            newPath: this.state.initialPath + \".\" + value.key,\n            key: value.key,\n            value: nvalue\n          }))\n        }\n      }\n    })\n\n  }\n\n  render() {\n    const onOk = () => {\n      // this.onOk(this.state);\n    };\n    const onCancel = () => {\n      // this.setState({ visible: false });\n      this.props.onCancel(this.state);\n    };\n    const layout = {\n      labelCol: { span: 8 },\n      wrapperCol: { span: 16 },\n    };\n\n    return (<Modal\n      title={<span>Add New Field To Your Schema <Tag color={this.state.form.color}>{this.state.form.state}</Tag></span>}\n      centered\n      visible={this.state.visible}\n      width={600}\n      onOk={this.handleOK.bind(this)}\n      onCancel={onCancel}\n    >\n      <FieldifySchemaForm\n        ref={this.formRef}\n        schema={this.currentSchema}\n        input={this.state.value}\n        user={this.props.user}\n        verify={this.state.verify}\n        onChange={this.formChanged.bind(this)}\n      />\n\n    </Modal>);\n  }\n}\n","import React from 'react';\n\nimport RecycledComponent from 'react-recycling';\n\nimport {\n  schema,\n  iterator,\n  assign,\n  fusion,\n  utils\n} from \"fieldify\"\n\nimport {\n  notification,\n  Table,\n  Tag,\n  Popconfirm,\n  Tooltip\n} from 'antd';\n\nimport {\n  EditOutlined as EditIcon,\n  DeleteOutlined as DeleteIcon,\n  UnorderedListOutlined as ObjectIcon,\n  PlusOutlined as PlusIcon,\n  CopyOutlined as ArrayIcon\n} from '@ant-design/icons';\n\nimport { FieldifySchema } from \"../Schema/Schema\";\n\nimport { FieldifySchemaBuilderModal } from './BuilderModal';\n\nimport String from \"../Types/String\";\n\nexport class FieldifySchemaBuilder extends RecycledComponent {\n\n  cycle(props, first) {\n    const state = {\n      modal: false,\n      modalUser: null,\n      schemaDataSource: []\n    };\n\n    this.onChange = ()=>{}\n    if(props.onChange) this.onChange = props.onChange\n\n    // compile the schema\n    state.schema = new FieldifySchema(\"form\")\n    state.schema.compile(props.schema)\n\n    state.schemaDataSource = this.updateDataSource(state.schema)\n\n    this.columns = [\n      {\n        title: 'Key',\n        dataIndex: 'name',\n        key: 'key',\n      },\n      {\n        title: 'Description',\n        dataIndex: 'doc',\n        key: 'doc'\n      },\n      {\n        title: <div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n          <span className=\"ant-radio-button-wrapper\" onClick={() => this.handlingAdd()}>\n            <span>Add <PlusIcon /></span>\n          </span>\n        </div>,\n        dataIndex: 'actions',\n        key: 'actions',\n        align: \"right\"\n      },\n    ];\n\n    return(state)\n  }\n\n  fireOnChange() {\n    const ex = this.state.schema.export()\n    // this.state.schema.compile(ex)\n\n    // fire on change for exporting the new schema\n    this.onChange(ex)\n  }\n\n  itemChanged(arg) {\n\n    if (arg.edition === true) {\n      const lineup = this.state.schema.getLineup(arg.oldPath);\n\n      // delete org\n      this.state.schema.removeLineup(arg.oldPath)\n\n      // put new\n      this.state.schema.setLineup(arg.newPath, arg.value)\n\n      notification.success({\n        message: \"Field updated\",\n        description: `Field at ${arg.oldPath} has been successfully updated`\n      })\n    }\n\n    // manage addition\n    else {\n      // just put the new one\n      this.state.schema.setLineup(arg.newPath, arg.value)\n\n      notification.success({\n        message: \"Field added\",\n        description: `Field at ${arg.newPath} has been successfully added`\n      })\n    }\n\n    this.fireOnChange();\n\n    this.setState({\n      modal: false,\n      modalContent: null,\n      modalUser: null,\n      schemaDataSource: this.updateDataSource(this.state.schema)\n    });\n  }\n\n  itemRemove(item) {\n    this.state.schema.removeLineup(item.$_wire);\n\n    this.fireOnChange();\n\n    this.setState({\n      schemaDataSource: this.updateDataSource(this.state.schema)\n    });\n\n    notification.success({\n      message: \"Field removed\",\n      description: `Field at ${item.$_wire} has been successfully removed`\n    })\n  }\n\n  handlingAdd(path) {\n    path = path || \".\";\n\n    const lineup = this.state.schema.getLineup(path) || this.state.schema.handler.schema;\n\n    const state = {\n      modal: true, \n      modalContent: null, \n      modalUser: lineup\n    }\n\n    this.setState(state);\n  }\n\n  handlingEdit(item) {\n    const path = item.$_wire || \".\";\n\n    const lineup = this.state.schema.getLineup(path) || this.state.schema.handler.schema;\n\n    const state = {\n      modal: true, \n      modalContent: item, \n      modalUser: lineup\n    }\n\n    this.setState(state);\n  }\n\n  updateDataSource(root) {\n    const self = this;\n    function fieldify2antDataTable(schema, wire) {\n      if (!wire)\n        wire = \"\";\n      const current = [];\n      utils.orderedRead(schema, (index, item) => {\n        var path = wire + \".\" + item.$_key;\n        item.$_path = path;\n\n        // Is array\n        if (Array.isArray(item)) {\n          path = wire + \".\" + item[0].$_key;\n          item[0].$_path = path;\n          item[0].$_array = true;\n\n          var composite = <Tooltip title=\"... of objects\">\n            <Tag color=\"#722ed1\"><ObjectIcon /></Tag>\n          </Tooltip>;\n          // for direct type assignation\n          if (\"$type\" in item[0]) {\n            const TypeInfo = item[0].$type.Info;\n            composite = <TypeInfo />;\n          }\n          else {\n            item[0].$_nested = true;\n          }\n\n          current.push({\n            ptr: item[0],\n            key: path,\n            name: <div>\n              <Tooltip title=\"This field is an array ...\">\n                <Tag color=\"#eb2f96\"><ArrayIcon /></Tag>\n              </Tooltip>\n              {composite}\n              <strong>{item[0].$_key}</strong>\n            </div>,\n            doc: item[0].$doc,\n            children: !(\"$type\" in item[0]) ? fieldify2antDataTable(item[0], path) : null,\n            actions: <div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n              <Popconfirm title={<span>Are you sure to delete the Array <strong>{path}</strong></span>} onConfirm={() => self.itemRemove(item[0])} okText=\"Yes\" cancelText=\"No\">\n                <span className=\"ant-radio-button-wrapper\">\n                  <span><DeleteIcon /></span>\n                </span>\n              </Popconfirm>\n\n              <span className=\"ant-radio-button-wrapper\" onClick={() => self.handlingEdit(item[0])}>\n                <span><EditIcon /></span>\n              </span>\n\n              {!(\"$type\" in item[0]) ?\n                <span className=\"ant-radio-button-wrapper\" onClick={() => self.handlingAdd(path)}>\n                  <span><PlusIcon /></span>\n                </span>\n                : null}\n            </div>\n          });\n        }\n        // is object\n        else if (typeof item === \"object\" && !item.$type) {\n          item.$_nested = true;\n          current.push({\n            ptr: item,\n            key: path,\n            name: <div>\n              <Tooltip title=\"This field is an object\">\n                <Tag color=\"#722ed1\"><ObjectIcon /></Tag>\n              </Tooltip>\n              <strong>{item.$_key}</strong>\n            </div>,\n            doc: item.$doc,\n            children: fieldify2antDataTable(item, path),\n            actions: <div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n              <Popconfirm title={<span>Are you sure to delete Object <strong>{path}</strong></span>} onConfirm={() => self.itemRemove(item)} okText=\"Yes\" cancelText=\"No\">\n                <span className=\"ant-radio-button-wrapper\">\n                  <span><DeleteIcon /></span>\n                </span>\n              </Popconfirm>\n\n              <span className=\"ant-radio-button-wrapper\" onClick={() => self.handlingEdit(item)}>\n                <span><EditIcon /></span>\n              </span>\n\n              <span className=\"ant-radio-button-wrapper\" onClick={() => self.handlingAdd(path)}>\n                <span><PlusIcon /></span>\n              </span>\n            </div>\n          });\n        }\n        else {\n          const TypeInfo = item.$type.Info;\n          current.push({\n            ptr: item,\n            key: path,\n            name: <div>\n              <TypeInfo /> {item.$_key}\n            </div>,\n            doc: item.$doc,\n            actions: <div className=\"ant-radio-group ant-radio-group-outline ant-radio-group-small\">\n              <Popconfirm title={<span>Are you sure to delete <strong>{path}</strong></span>} onConfirm={() => self.itemRemove(item)}\n                // onCancel={cancel}\n                okText=\"Yes\" cancelText=\"No\">\n                <span className=\"ant-radio-button-wrapper\">\n                  <span><DeleteIcon /></span>\n                </span>\n              </Popconfirm>\n\n              <span className=\"ant-radio-button-wrapper\" onClick={() => self.handlingEdit(item)}>\n                <span><EditIcon /></span>\n              </span>\n            </div>\n          });\n        }\n      });\n      return (current);\n    }\n\n    var data = null;\n    if (root) {\n      data = fieldify2antDataTable(root.handler.schema);\n      return (data)\n    }\n\n    return ([])\n  }\n\n  render() {\n    const sds = this.state.schemaDataSource;\n\n    return (<div>\n      <FieldifySchemaBuilderModal\n        user={this.state.modalUser}\n        visible={this.state.modal}\n        value={this.state.modalContent}\n        onCancel={() => this.setState({ modal: false })}\n        onOk={this.itemChanged.bind(this)}\n      />\n\n      <Table columns={this.columns} dataSource={sds} size=\"small\" pagination={{\n        total: sds.length,\n        pageSize: sds.length,\n        hideOnSinglePage: true\n      }} expandable={{ defaultExpandAllRows: true }} />\n    </div>);\n  }\n}","import { utils, input as FieldifyInput } from \"fieldify\";\nimport React from 'react';\nimport RecycledComponent from 'react-recycling';\n\nimport { Form, Table, Button, Input, Card } from \"antd\";\nimport {\n  PlusOutlined as PlusIcon,\n  DeleteOutlined as DeleteIcon\n} from '@ant-design/icons';\n\nimport { FieldifySchema } from \"../Schema/Schema\";\n\nexport class FieldifySchemaRender extends RecycledComponent {\n  constructor(props) {\n    super(props)\n\n    this.formRef = React.createRef()\n  }\n\n  cycle(props, first) {\n\n    const state = {\n      layout: props.layout ? props.layout : \"horizontal\"\n    }\n\n    // compile the schema\n    state.rawSchema = props.schema\n    state.schema = new FieldifySchema(\"form\")\n    state.schema.compile(state.rawSchema)\n\n    // create an input instance\n    // console.log(\"rawInput\", state.rawInput === props.rawInput)\n    state.rawInput = props.input\n    state.input = new FieldifyInput(state.schema)\n    state.input.setValue(props.input)\n    state.inputValue = state.input.getValue()\n\n    state.verify = props.verify || false\n\n    this.references = {};\n\n    this.onChange = props.onChange ? props.onChange : () => { };\n\n    state.reactive = this.update(state.schema, state.inputValue, state.verify);\n\n    return (state)\n  }\n\n  update(root, input, verify) {\n    const follower = (schema, input, ret, line) => {\n      line = line || \"\"\n\n      utils.orderedRead(schema, (index, item) => {\n        const source = { ...Array.isArray(item) ? item[0] : item };\n        const inputPtr = input ? input[source.$_key] : null;\n        const lineKey = line + \".\" + source.$_key;\n\n        if (source.$_array === true) {\n          const columns = [\n            {\n              dataIndex: 'form',\n              key: 'form',\n              width: \"100%\"\n            }\n          ];\n\n          const dataSource = []\n\n          var inputPtr2 = inputPtr;\n          const options = source.$array || {};\n          const min = options.min ? options.min : (source.$required === true ? 1 : 0)\n\n          if (source.$_nested === true) {\n            var inputPtr2 = input[source.$_key]\n\n            if (!Array.isArray(inputPtr)) inputPtr2 = input[source.$_key] = [];\n\n            // force to create min form\n            if (min - inputPtr2.length > 0) {\n              for (var a = 0; a <= min - inputPtr2.length; a++) {\n                inputPtr2.push({})\n              }\n            }\n\n            for (var a = 0; a < inputPtr2.length; a++) {\n              const value = inputPtr2[a];\n              const key = lineKey + \".\" + a\n\n              const child = [];\n              follower(source, value, child, key);\n\n              dataSource.push({\n                key,\n                form: child\n              })\n            }\n          }\n          else if(source.$type) {\n            delete source.$doc; // source is cloned\n            const TypeRender = source.$type.Render;\n\n            // console.log(\"Array non nested\", min, inputPtr2)\n\n            if (verify === true) {\n              // console.log()\n            }\n\n            if (TypeRender) {\n              if (!Array.isArray(inputPtr)) {\n                input[item.$_key] = [];\n                inputPtr2 = input[item.$_key];\n              }\n\n              if (!inputPtr2) return (ret);\n\n              if (min - inputPtr2.length > 0) {\n                for (var a = 0; a <= min - inputPtr2.length; a++) {\n                  inputPtr2.push(null)\n                }\n              }\n\n              for (var a = 0; a < inputPtr2.length; a++) {\n                const value = inputPtr2[a];\n                const key = lineKey + \".\" + a\n\n                dataSource.push({\n                  key,\n                  form: <TypeRender\n                    schema={source}\n                    value={value}\n                    injected={true}\n                    key={\"render.\"+source.$_wire}\n                  />\n                })\n              }\n\n            }\n\n          }\n\n          ret.push(<Form.Item key={source.$_wire} noStyle={true}>\n            <div className=\"ant-form-item\">\n              <Card size=\"small\" title={source.$_access.$doc}>\n                <Table\n                  size=\"small\"\n                  dataSource={dataSource}\n                  columns={columns}\n                  showHeader={false}\n                  pagination={{\n                    total: dataSource.length,\n                    pageSize: dataSource.length,\n                    hideOnSinglePage: true\n                  }}\n                />\n              </Card>\n            </div>\n          </Form.Item>);\n\n        }\n        else {\n          if (source.$_nested === true) {\n            const child = [];\n            follower(source, inputPtr, child, lineKey);\n\n            ret.push(<div key={\"render.\"+source.$_wire} className=\"ant-form-item\">\n              <Card size=\"small\" title={source.$doc}>\n                {child}\n              </Card>\n            </div>);\n          }\n          else {\n            const TypeRender = item.$type.Render;\n            if (TypeRender) {\n              ret.push(<TypeRender\n                schema={source}\n                value={inputPtr}\n                key={\"render.\"+source.$_wire}\n              />);\n            }\n          }\n        }\n      });\n      return (ret);\n    };\n\n    const ret = [];\n    follower(root.handler.schema, input, ret);\n    return (ret);\n  }\n\n  render() {\n    var layout = {};\n\n    if (this.state.layout === 'horizontal') {\n      layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n      }\n    }\n    return (<Form\n      layout={this.state.layout}\n      key={this.formRef}\n      {...layout}\n      name=\"basic\" >\n      {this.state.reactive}\n    </Form>);\n  }\n}\n","import { input } from \"fieldify\"\n\nimport React from 'react'\nimport styles from './styles.module.css'\n\nimport * as schema from './Schema'\nimport types from './Types'\n\n// just map the input class from fieldify\nexport class Input extends input {}\n\n// export the schema\nexport const Schema = schema;\n\n// export types\nexport const Types = types;\n\n\n","import React from 'react'\n\nimport { Schema, Types, Input } from '@fieldify/antd'\n\nimport { Row, Col, Card, Tabs, Tag, Form, Radio, Divider } from 'antd';\n\nimport '@fieldify/antd/dist/index.css'\nimport \"antd/dist/antd.css\";\n\nconst {\n  FieldifySchemaBuilder,\n  FieldifySchema,\n  FieldifySchemaForm,\n  FieldifySchemaRender\n} = Schema\n\nconst { TabPane } = Tabs\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    const initial = {\n      company: {\n        $doc: \"Your company name\",\n        $type: \"String\",\n        $position: 0\n      },\n      name: {\n        $doc: \"Civility\",\n        $type: \"Name\",\n        $position: 1\n      },\n\n      email: {\n        $doc: \"Votre e-mail\",\n        $type: Types.Email,\n        $position: 2\n      },\n\n      age: {\n        $doc: \"Age\",\n        $type: Types.Number,\n        $position: 3\n      },\n\n      KV: {\n        $doc: \"Key and Value\",\n        $type: Types.KV,\n        $position: 4\n      },\n\n      types: {\n        $doc: 'What kind of number to accept',\n        $required: true,\n        $type: 'Select',\n        $options: {\n          default: 'both',\n          items: {\n            both: 'Both Integer & Float',\n            integer: 'Only Integer',\n            float: 'Only Float'\n          }\n        }\n      },\n\n      address: {\n        $doc: \"Address\",\n        home: {\n          $doc: \"Home\",\n          street: { $doc: \"Street\", $type: Types.String, $options: { min: 2, placeholder: \"Your street\" } },\n          zip: { $doc: \"ZIP\", $type: Types.String },\n          country: { $doc: \"Country\", $type: Types.String },\n        },\n        work: {\n          $doc: \"Work\",\n          street: { $doc: \"Street\", $type: Types.String },\n          zip: { $doc: \"ZIP\", $type: Types.String },\n          country: { $doc: \"Country\", $type: Types.String },\n        },\n      },\n\n      nestedArray: [{\n        $doc: \"Array of Objects (nested)\",\n        // name: {\n        //   $doc: \"Civility\",\n        //   $type: Types.Name,\n        //   $position: 1\n        // },\n        // description: { $doc: \"Description\", $type: Types.String, $options: { strict: true } },\n        // price: { $doc: \"Price\", $type: Types.String },\n        $array: {\n          min: 2\n        }\n      }],\n\n      inlinedArray: [{\n        $required: true,\n        $doc: \"Array of User Defined types (non-nested)\",\n        $type: Types.Name,\n        $options: { min: 2 },\n        $array: {\n          min: 2,\n          max: 100\n        }\n      }],\n\n      inlinedArrayString: [{\n        $required: true,\n        $doc: \"Array of String type (non-nested)\",\n        $type: \"String\",\n        $array: {\n          min: 1,\n          max: 100\n        }\n      }]\n    }\n\n    this.state = this.cycle({\n      schema: initial,\n      input: {\n        company: \"Test of the test\",\n        name: {\n          first: \"Michael\",\n          last: \"Vergoz\"\n        },\n        email: \"mvcdsa@cdas.com\",\n        KV: {\n          \"testcas\": \"Awesome\"\n        },\n\n        nestedArray: [{\n          name: {\n            first: \"Michael\",\n            last: \"Vergoz\"\n          },\n          description: \"This is a description\"\n        }],\n        inlinedArray: [{ first: \"Michael\" }],\n\n        inlinedArrayString: ['michael', 'vergoz', 'did', 'it', 'well']\n      }\n    }, true)\n  }\n\n  cycle(props, first) {\n\n    const state = {\n      schema: props.schema,\n      input: props.input,\n      inputRender: {...props.input},\n\n      form: {\n        json: JSON.stringify(props.input, null, \"  \"),\n        state: \"Filling\",\n        color: \"blue\"\n      },\n      builder: {\n        json: JSON.stringify(props.schema, null, \"  \")\n      },\n      render: {\n        layout: \"horizontal\"\n      }\n    }\n\n    return (state)\n  }\n\n\n  builderChanged(schema) {\n    const state = {\n      schema: schema,\n      builder: {\n        json: JSON.stringify(schema, null, \"  \")\n      }\n    }\n\n    this.setState(state)\n  }\n\n  formChanged(input, value) {\n    // run the verifier on each change to \n    // get the status into the title\n\n    input.verify((result) => {\n\n      const state = {\n        inputRender: {...result.result},\n        form: {\n          data: result.result,\n          json: JSON.stringify(result.result, null, \"  \")\n        }\n      }\n\n      if (result.error === true) {\n        state.form.color = \"orange\"\n        state.form.state = \"Verify Failed\"\n      }\n      else {\n        state.form.color = \"green\"\n        state.form.state = \"Passed\"\n      }\n\n      this.setState(state)\n    })\n  }\n\n  render() {\n    const style = { padding: '8px' };\n\n    return <div style={{ width: \"100%\" }}>\n      <h1>Welcome in @fieldify/antd</h1>\n      <h2>Schema Builder</h2>\n\n      <Row>\n        <Col sm={12} xxl={8}>\n          <div style={style}>\n            <Card size=\"small\" title=\"Pass #1 - Building\">\n              <Tabs defaultActiveKey=\"1\">\n                <TabPane tab=\"Visual Editor\" key=\"1\">\n                  <FieldifySchemaBuilder schema={this.state.schema} onChange={this.builderChanged.bind(this)} />\n                </TabPane>\n                <TabPane tab=\"JSON Schema\" key=\"2\">\n                  <pre>\n                    {this.state.builder.json}\n                  </pre>\n                </TabPane>\n              </Tabs>\n            </Card>\n          </div>\n        </Col>\n        <Col sm={12} xxl={8}>\n          <div style={style}>\n            <Card size=\"small\" title={<>Pass #2 - Filling Form <Tag color={this.state.form.color}>{this.state.form.state}</Tag></>}>\n              <Tabs defaultActiveKey=\"1\">\n                <TabPane tab=\"Visual Rendering\" key=\"1\">\n                  <FieldifySchemaForm schema={this.state.schema} input={this.state.input} onChange={this.formChanged.bind(this)} />\n                </TabPane>\n                <TabPane tab=\"Sanatized JSON Input\" key=\"2\">\n                  <pre>\n                    {this.state.form.json}\n                  </pre>\n                </TabPane>\n              </Tabs>\n            </Card>\n          </div>\n        </Col>\n        <Col sm={12} xxl={8}>\n          <div style={style}>\n            <Card size=\"small\" title=\"Pass #3 - Final Result\">\n              <Form>\n                <Form.Item label=\"Form Layout\" name=\"layout\">\n                  <Radio.Group\n                    value={this.state.render.layout}\n                    onChange={({ target }) => this.setState({ render: { layout: target.value } })}\n                  >\n                    <Radio.Button value=\"horizontal\">Horizontal</Radio.Button>\n                    <Radio.Button value=\"vertical\">Vertical</Radio.Button>\n                    <Radio.Button value=\"inline\">Inline</Radio.Button>\n                  </Radio.Group>\n                </Form.Item>\n              </Form>\n              <Divider />\n              <FieldifySchemaRender schema={this.state.schema} input={this.state.inputRender} layout={this.state.render.layout} />\n            </Card>\n          </div>\n        </Col>\n      </Row>\n    </div>\n  }\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","const leafRegex = /^\\$/\nconst leafPrivateRegex = /^\\$_/\n\nconst internal = {\n  $required: true,\n  $maxArray: 100\n}\n\nmodule.exports = {\n  leaf: leafRegex,\n  leafPrivate: leafPrivateRegex,\n\n  /**\n   * Determine if there is a defined field in the current object stage\n   * @param  {Object}  schema Current stage\n   * @return {Boolean}      true there is reference, false it's free\n   */\n  isThereSubObject: (schema) => {\n    for (var key in schema) {\n      if (internal.hasOwnProperty(key)) continue\n      if (!leafRegex.test(key)) {\n        return (true)\n      }\n    }\n    return (false)\n  },\n\n  /**\n   * Determine if there an object parameter\n   * @param  {Object}  schema Current stage\n   * @return {Boolean}      true there is reference, false it's free\n   */\n  isThereObjectParams: (schema) => {\n    for (var key in schema) {\n      if (internal.hasOwnProperty(key)) continue\n      if (leafRegex.test(key)) {\n        return (true)\n      }\n    }\n    return (false)\n  },\n\n  /**\n   * Async object follower\n   * @param  {[type]} objs       Object to follow\n   * @param  {Function} executor Per item execution\n   */\n  eachObject: (objs, executor) => {\n    var aObjects = []\n\n    // transpose objets to array\n    for (var a in objs) { aObjects.push([a, objs[a]]) }\n\n    function next () {\n      var o = aObjects.shift()\n      if (o === undefined) {\n        executor(null, null, next, true)\n        return\n      }\n      executor(o[0], o[1], () => {\n        process.nextTick(next)\n      }, false)\n    }\n\n    process.nextTick(next)\n  },\n\n  /**\n   * Async array follower\n   * @param  {[type]} list     List of object\n   * @param  {[type]} executor Per item execution\n   */\n  eachItem: (list, executor) => {\n    var index = 0\n    if (!Array.isArray(list)) { return (executor(null, null, null, true)) }\n    function next () {\n      var o = list[index]\n      if (o === undefined) {\n        executor(null, null, null, true)\n        return\n      }\n      executor(index, o, () => {\n        index++\n        process.nextTick(next)\n      }, false)\n    }\n    process.nextTick(next)\n  },\n\n  /**\n   * Read async a list of callback\n   * @param  {Array}    list   Array of callback\n   * @param  {Function} finish Triggered when list is completed\n   */\n  sync: (list, finish) => {\n    function next (index) {\n      var exec = list[index]\n      if (!exec) {\n        if (finish) finish()\n        return\n      }\n      exec(() => {\n        index++\n        process.nextTick(next, index)\n      })\n    }\n    process.nextTick(next, 0)\n  },\n\n  getNO: (schema) => {\n    const nestedObject = []\n    const nestedOptions = []\n\n    for (var key in schema) {\n      const ptr = schema[key]\n      const fc = key.substr(0, 1)\n      if (fc === '$') nestedOptions.push([key, ptr])\n      else nestedObject.push([key, ptr])\n    }\n\n    return ({ nestedObject, nestedOptions })\n  },\n\n  orderedRead: (schema, cb, wire) => {\n    wire = wire || ''\n\n    const dup = { ...schema }\n\n    // remap keys\n    for (var key in dup) {\n      if (leafRegex.test(key)) {\n        delete dup[key]\n        continue\n      }\n    }\n\n    // ordering the line\n    const ordered = Object.values(dup).sort((a, b) => {\n      if (Array.isArray(a)) a = a[0]\n      if (Array.isArray(b)) b = b[0]\n\n      return (a.$position - b.$position)\n    })\n\n    // this pass is use to reduce displacement on positions\n    for (var index = 0; index < ordered.length; index++) {\n      var ptr = ordered[index]\n      if (Array.isArray(ptr)) ptr = ptr[0]\n      ptr.$position = index\n    }\n\n    // follow and update the line\n    for (var index = 0; index < ordered.length; index++) {\n      const item = ordered[index]\n      cb(index, item)\n    }\n  }\n}\n"],"sourceRoot":""}